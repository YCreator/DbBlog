-- MySQL dump 10.13  Distrib 5.6.24, for Win32 (x86)
--
-- Host: localhost    Database: db_blog3
-- ------------------------------------------------------
-- Server version	5.6.24

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `category_blogtype`
--

DROP TABLE IF EXISTS `category_blogtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `category_blogtype` (
  `cate_id` bigint(20) NOT NULL,
  `type_id` bigint(20) NOT NULL,
  PRIMARY KEY (`cate_id`,`type_id`),
  KEY `FK19ptfhahwwie0x34kshc90ss4` (`type_id`),
  CONSTRAINT `FK19ptfhahwwie0x34kshc90ss4` FOREIGN KEY (`type_id`) REFERENCES `t_blogtype` (`id`),
  CONSTRAINT `FKriprg8m98wcagna19b6h7dy4b` FOREIGN KEY (`cate_id`) REFERENCES `t_category` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `category_blogtype`
--

LOCK TABLES `category_blogtype` WRITE;
/*!40000 ALTER TABLE `category_blogtype` DISABLE KEYS */;
INSERT INTO `category_blogtype` VALUES (20,1),(20,3),(20,7),(20,10),(20,11),(22,13),(24,14),(24,15),(28,16),(23,17);
/*!40000 ALTER TABLE `category_blogtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_blog`
--

DROP TABLE IF EXISTS `t_blog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL,
  `summary` varchar(400) DEFAULT NULL,
  `release_date` datetime DEFAULT NULL,
  `click_hit` int(11) NOT NULL DEFAULT '0',
  `reply_hit` int(11) NOT NULL DEFAULT '0',
  `content` text,
  `type_id` bigint(20) DEFAULT NULL,
  `keyword` varchar(200) DEFAULT NULL,
  `pic_path` varchar(200) DEFAULT NULL,
  `version` int(11) DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `typeId` (`type_id`),
  CONSTRAINT `FKp2jcp1fq585dk7s25dpeu5ojr` FOREIGN KEY (`type_id`) REFERENCES `t_blogtype` (`id`),
  CONSTRAINT `FKs5kru5n7u44pcmnh11b1qce7` FOREIGN KEY (`type_id`) REFERENCES `t_blogtype` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_blog`
--

LOCK TABLES `t_blog` WRITE;
/*!40000 ALTER TABLE `t_blog` DISABLE KEYS */;
INSERT INTO `t_blog` VALUES (35,'Java并发控制机制详解','在一般性开发中，笔者经常看到很多同学在对待java并发开发模型中只会使用一些基础的方法。比如Volatile，synchronized。像Lock和atomic这类高级并发包很多人并不经常使用。我想大部分原因都是来之于对原理的不属性导致的。在繁忙的开发工作中，又有谁会很准确的把握和使用正确的并发模型呢？所以最','2016-08-27 17:13:09',6,0,'<p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在一般性开发中，笔者经常看到很多同学在对待java并发开发模型中只会使用一些基础的方法。比如<span class=\"wp_keywordlink\"><a href=\"http://www.codeceo.com/article/java-volatile-var.html\" title=\"Volatile\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">Volatile</a></span>，synchronized。像Lock和atomic这类高级并发包很多人并不经常使用。我想大部分原因都是来之于对原理的不属性导致的。在繁忙的开发工作中，又有谁会很准确的把握和使用正确的并发模型呢？</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">所以最近基于这个思想，本人打算把并发控制机制这部分整理成一篇文章。既是对自己掌握知识的一个回忆，也是希望这篇讲到的类容能帮助到大部分开发者。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">并行程序开发不可避免地要涉及多线程、多任务的协作和数据共享等问题。在JDK中，提供了多种途径实现多线程间的并发控制。比如常用的：内部锁、重入锁、读写锁和信号量。</p><h2 id=\"Java内存模型\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">Java内存模型</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在java中，每一个线程有一块工作内存区，其中存放着被所有线程共享的主内存中的变量的值的拷贝。当线程执行时，它在自己的工作内存中操作这些变量。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">为了存取一个共享的变量，一个线程通常先获取锁定并且清除它的工作内存区，这保证该共享变量从所有线程的共享内存区正确地装入到线程的工作内存区，当线程解锁时保证该工作内存区中变量的值协会到共享内存中。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当一个线程使用某一个变量时，不论程序是否正确地使用线程同步操作，它获取的值一定是由它本身或者其他线程存储到变量中的值。例如，如果两个线程把不同的值或者对象引用存储到同一个共享变量中，那么该变量的值要么是这个线程的，要么是那个线程的，共享变量的值不会是由两个线程的引用值组合而成。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">一个变量时Java程序可以存取的一个地址，它不仅包括基本类型变量、引用类型变量，而且还包括数组类型变量。保存在主内存区的变量可以被所有线程共享，但是一个线程存取另一个线程的参数或者局部变量时不可能的，所以开发人员不必担心局部变量的线程安全问题。</p><h2 id=\"volatile变量–多线程间可见\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">volatile变量–多线程间可见</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">由于每个线程都有自己的工作内存区，因此当一个线程改变自己的工作内存中的数据时，对其他线程来说，可能是不可见的。为此，可以使用volatile关键字破事所有线程军读写内存中的变量，从而使得volatile变量在多线程间可见。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">声明为volatile的变量可以做到如下保证：</p><blockquote style=\"margin: 15px auto; padding: 10px 15px 5px; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 214, 214); font-size: 12px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal; background-color: rgb(253, 253, 253);\"><p style=\"margin-top: 0px; padding: 0px;\">1、其他线程对变量的修改，可以及时反应在当前线程中；<br/>2、确保当前线程对volatile变量的修改，能及时写回到共享内存中，并被其他线程所见；<br/>3、使用volatile声明的变量，编译器会保证其有序性。</p></blockquote><h2 id=\"同步关键字synchronized\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">同步关键字synchronized</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">同步关键字synchronized是Java语言中最为常用的同步方法之一。在JDK早期版本中，synchronized的性能并不是太好，值适合于锁竞争不是特别激烈的场合。在JDK6中，synchronized和非公平锁的差距已经缩小。更为重要的是，synchronized更为简洁明了，代码可读性和维护性比较好。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">锁定一个对象的方法：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;synchronized&nbsp;void&nbsp;method(){}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当method()方法被调用时，调用线程首先必须获得当前对象所，若当前对象锁被其他线程持有，这调用线程会等待，犯法结束后，对象锁会被释放，以上方法等价于下面的写法：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;void&nbsp;method(){synchronized(this){//&nbsp;do&nbsp;something&nbsp;…}\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">其次，使用synchronized还可以构造同步块，与同步方法相比，同步块可以更为精确控制同步代码范围。一个小的同步代码非常有离与锁的快进快出，从而使系统拥有更高的吞吐量。</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;void&nbsp;method(Object&nbsp;o){//&nbsp;beforesynchronized(o){//&nbsp;do&nbsp;something&nbsp;...}//&nbsp;after}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">synchronized也可以用于static函数：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;synchronized&nbsp;static&nbsp;void&nbsp;method(){}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">这个地方一定要注意，synchronized的锁是加在<strong style=\"margin: 0px; padding: 0px;\">当前Class对象</strong>上，因此，所有对该方法的调用，都必须获得Class对象的锁。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">虽然synchronized可以保证对象或者代码段的线程安全，但是仅使用synchronized还是不足以控制拥有复杂逻辑的线程交互。为了实现多线程间的交互，还需要使用Object对象的wait()和notify()方法。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">典型用法：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">synchronized(obj){&nbsp;&nbsp;&nbsp;&nbsp;while(&lt;?&gt;){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.wait();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;收到通知后，继续执行。\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在使用wait()方法前，需要获得对象锁。在wait()方法执行时，当前线程或释放obj的独占锁，供其他线程使用。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当等待在obj上线程收到obj.notify()时，它就能重新获得obj的独占锁，并继续运行。注意了，notify()方法是<strong style=\"margin: 0px; padding: 0px;\">随机唤起</strong>等待在当前对象的某一个线程。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">下面是一个阻塞队列的实现：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;class&nbsp;BlockQueue{&nbsp;private&nbsp;List&nbsp;list&nbsp;=&nbsp;new&nbsp;ArrayList();&nbsp;public&nbsp;synchronized&nbsp;Object&nbsp;pop()&nbsp;throws&nbsp;InterruptedException{&nbsp;while&nbsp;(list.size()==0){&nbsp;this.wait();\n&nbsp;}&nbsp;if&nbsp;(list.size()&gt;0){&nbsp;return&nbsp;list.remove(0);\n&nbsp;}&nbsp;else{&nbsp;return&nbsp;null;\n&nbsp;}\n&nbsp;}&nbsp;public&nbsp;synchronized&nbsp;Object&nbsp;put(Object&nbsp;obj){\n&nbsp;list.add(obj);&nbsp;this.notify();\n&nbsp;}\n\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">synchronized配合wait()、notify()</strong>应该是Java开发者必须掌握的基本技能。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">Reentrantlock重入锁</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">Reentrantlock称为重入锁。它比synchronized拥有更加强大的功能，它可以中断、可定时。在高并发的情况下，它比synchronized有明显的性能优势。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">Reentrantlock提供了公平和非公平两种锁。公平锁是对锁的获取是先进先出，而非公平锁是可以插队的。当然从性能上分析，非公平锁的性能要好得多。因此，在无特殊需要，应该优选非公平锁，但是synchronized提供锁业不是绝对公平的。Reentrantlock在构造的时候可以指定锁是否公平。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在使用重入锁时，一定要在程序最后释放锁。一般释放锁的代码要写在finally里。否则，如果程序出现异常，Loack就永远无法释放了。synchronized的锁是JVM最后自动释放的。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">经典使用方式如下：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs cs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">try&nbsp;{&nbsp;if&nbsp;(lock.tryLock(5,&nbsp;TimeUnit.SECONDS))&nbsp;{&nbsp;//如果已经被lock，尝试等待5s，看是否可以获得锁，如果5s后仍然无法获得锁则返回false继续执行\n&nbsp;//&nbsp;lock.lockInterruptibly();可以响应中断事件\n&nbsp;try&nbsp;{&nbsp;\n&nbsp;//操作\n&nbsp;}&nbsp;finally&nbsp;{&nbsp;lock.unlock();\n&nbsp;}\n&nbsp;}\n}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{\n&nbsp;e.printStackTrace();&nbsp;//当前线程被中断时(interrupt)，会抛InterruptedException&nbsp;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">Reentrantlock提供了非常丰富的锁控制功能，灵活应用这些控制方法，可以提高应用程序的性能。不过这里并非是极力推荐使用Reentrantlock。重入锁算是JDK中提供的高级开发工具。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">ReadWriteLock读写锁</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">读写分离是一种非常常见的数据处理思想。在sql中应该算是必须用到的技术。ReadWriteLock是在JDK5中提供的读写分离锁。读写分离锁可以有效地帮助减少锁竞争，以提升系统性能。读写分离使用场景主要是如果在系统中，读操作次数远远大于写操作。使用方式如下：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs cs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">private&nbsp;ReentrantReadWriteLock&nbsp;readWriteLock&nbsp;=&nbsp;new&nbsp;ReentrantReadWriteLock();private&nbsp;Lock&nbsp;readLock&nbsp;=&nbsp;readWriteLock.readLock();private&nbsp;Lock&nbsp;writeLock&nbsp;=&nbsp;readWriteLock.writeLock();public&nbsp;Object&nbsp;handleRead()&nbsp;throws&nbsp;InterruptedException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readLock.lock();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(1000);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;\n&nbsp;&nbsp;&nbsp;&nbsp;}finally{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readLock.unlock();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}public&nbsp;Object&nbsp;handleRead()&nbsp;throws&nbsp;InterruptedException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeLock.lock();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(1000);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;\n&nbsp;&nbsp;&nbsp;&nbsp;}finally{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeLock.unlock();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">Condition对象</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">Conditiond对象用于协调多线程间的复杂协作。主要与锁相关联。通过Lock接口中的newCondition()方法可以生成一个与Lock绑定的Condition实例。Condition对象和锁的关系就如用Object.wait()、Object.notify()两个函数以及synchronized关键字一样。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">这里可以把ArrayBlockingQueue的源码摘出来看一下：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;class&nbsp;ArrayBlockingQueue&nbsp;extends&nbsp;AbstractQueueimplements&nbsp;BlockingQueue,&nbsp;java.io.Serializable&nbsp;{/**&nbsp;Main&nbsp;lock&nbsp;guarding&nbsp;all&nbsp;access&nbsp;*/final&nbsp;ReentrantLock&nbsp;lock;/**&nbsp;Condition&nbsp;for&nbsp;waiting&nbsp;takes&nbsp;*/private&nbsp;final&nbsp;Condition&nbsp;notEmpty;/**&nbsp;Condition&nbsp;for&nbsp;waiting&nbsp;puts&nbsp;*/private&nbsp;final&nbsp;Condition&nbsp;notFull;public&nbsp;ArrayBlockingQueue(int&nbsp;capacity,&nbsp;boolean&nbsp;fair)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(capacity&nbsp;&lt;=&nbsp;0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;IllegalArgumentException();&nbsp;&nbsp;&nbsp;&nbsp;this.items&nbsp;=&nbsp;new&nbsp;Object[capacity];\n&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;=&nbsp;new&nbsp;ReentrantLock(fair);&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;notEmpty&nbsp;=&nbsp;lock.newCondition();&nbsp;//&nbsp;生成与Lock绑定的Condition\n&nbsp;&nbsp;&nbsp;&nbsp;notFull&nbsp;=&nbsp;&nbsp;lock.newCondition();\n}public&nbsp;void&nbsp;put(E&nbsp;e)&nbsp;throws&nbsp;InterruptedException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;checkNotNull(e);&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;ReentrantLock&nbsp;lock&nbsp;=&nbsp;this.lock;\n&nbsp;&nbsp;&nbsp;&nbsp;lock.lockInterruptibly();&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(count&nbsp;==&nbsp;items.length)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notFull.await();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insert(e);\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock.unlock();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}private&nbsp;void&nbsp;insert(E&nbsp;x)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;items[putIndex]&nbsp;=&nbsp;x;\n&nbsp;&nbsp;&nbsp;&nbsp;putIndex&nbsp;=&nbsp;inc(putIndex);\n&nbsp;&nbsp;&nbsp;&nbsp;++count;\n&nbsp;&nbsp;&nbsp;&nbsp;notEmpty.signal();&nbsp;//&nbsp;通知}public&nbsp;E&nbsp;take()&nbsp;throws&nbsp;InterruptedException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;ReentrantLock&nbsp;lock&nbsp;=&nbsp;this.lock;\n&nbsp;&nbsp;&nbsp;&nbsp;lock.lockInterruptibly();&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(count&nbsp;==&nbsp;0)&nbsp;//&nbsp;如果队列为空\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notEmpty.await();&nbsp;&nbsp;//&nbsp;则消费者队列要等待一个非空的信号\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;extract();\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock.unlock();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}private&nbsp;E&nbsp;extract()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;Object[]&nbsp;items&nbsp;=&nbsp;this.items;\n&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;x&nbsp;=&nbsp;this.&lt;E&gt;cast(items[takeIndex]);\n&nbsp;&nbsp;&nbsp;&nbsp;items[takeIndex]&nbsp;=&nbsp;null;\n&nbsp;&nbsp;&nbsp;&nbsp;takeIndex&nbsp;=&nbsp;inc(takeIndex);\n&nbsp;&nbsp;&nbsp;&nbsp;--count;\n&nbsp;&nbsp;&nbsp;&nbsp;notFull.signal();&nbsp;//&nbsp;通知put()&nbsp;线程队列已有空闲空间\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;\n}//&nbsp;other&nbsp;code}</pre><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">Semaphore信号量</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">信号量为多线程协作提供了更为强大的控制方法。信号量是对锁的扩展。无论是内部锁synchronized还是重入锁ReentrantLock，一次都允许一个线程访问一个资源，而信号量却可以指定多个线程同时访问某一个资源。从构造函数可以看出：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;Semaphore(int&nbsp;permits)&nbsp;{}public&nbsp;Semaphore(int&nbsp;permits,&nbsp;boolean&nbsp;fair){}&nbsp;//&nbsp;可以指定是否公平</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">permits指定了信号量的准入书，也就是同时能申请多少个许可。当每个线程每次只申请一个许可时，这就相当于指定了同时有多少个线程可以访问某一个资源。这里罗列一下主要方法的使用：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>&nbsp;public void acquire() throws InterruptedException {} //尝试获得一个准入的许可。若无法获得，则线程会等待，知道有线程释放一个许可或者当前线程被中断。</p></li><li><p>public void acquireUninterruptibly(){} // 类似于acquire()，但是不会响应中断。</p></li><li><p>public boolean tryAcquire(){} // 尝试获取，如果成功则为true，否则false。这个方法不会等待，立即返回。</p></li><li><p>public boolean tryAcquire(long timeout, TimeUnit unit) throws InterruptedException {} // 尝试等待多长时间</p></li><li><p>public void release() //用于在现场访问资源结束后，释放一个许可，以使其他等待许可的线程可以进行资源访问。</p></li></ul><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">下面来看一下JDK文档中提供使用信号量的实例。这个实例很好的解释了如何通过信号量控制资源访问。</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;class&nbsp;Pool&nbsp;{private&nbsp;static&nbsp;final&nbsp;int&nbsp;MAX_AVAILABLE&nbsp;=&nbsp;100;private&nbsp;final&nbsp;Semaphore&nbsp;available&nbsp;=&nbsp;new&nbsp;Semaphore(MAX_AVAILABLE,&nbsp;true);public&nbsp;Object&nbsp;getItem()&nbsp;throws&nbsp;InterruptedException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;available.acquire();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;申请一个许可\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;同时只能有100个线程进入取得可用项，\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;超过100个则需要等待\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;getNextAvailableItem();\n}public&nbsp;void&nbsp;putItem(Object&nbsp;x)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;将给定项放回池内，标记为未被使用\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(markAsUnused(x))&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;available.release();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;新增了一个可用项，释放一个许可，请求资源的线程被激活一个\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}//&nbsp;仅作示例参考，非真实数据protected&nbsp;Object[]&nbsp;items&nbsp;=&nbsp;new&nbsp;Object[MAX_AVAILABLE];&nbsp;//&nbsp;用于对象池复用对象protected&nbsp;boolean[]&nbsp;used&nbsp;=&nbsp;new&nbsp;boolean[MAX_AVAILABLE];&nbsp;//&nbsp;标记作用protected&nbsp;synchronized&nbsp;Object&nbsp;getNextAvailableItem()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;MAX_AVAILABLE;&nbsp;++i)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!used[i])&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[i]&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;items[i];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\n}protected&nbsp;synchronized&nbsp;boolean&nbsp;markAsUnused(Object&nbsp;item)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;MAX_AVAILABLE;&nbsp;++i)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(item&nbsp;==&nbsp;items[i])&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(used[i])&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[i]&nbsp;=&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;\n}\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">此实例简单实现了一个对象池，对象池最大容量为100。因此，当同时有100个对象请求时，对象池就会出现资源短缺，未能获得资源的线程就需要等待。当某个线程使用对象完毕后，就需要将对象返回给对象池。此时，由于可用资源增加，因此，可以激活一个等待该资源的线程。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\"><span class=\"wp_keywordlink\"><a href=\"http://www.codeceo.com/article/threadlocal-usage.html\" title=\"ThreadLocal\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">ThreadLocal</a></span>线程局部变量</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在刚开始接触ThreadLocal，笔者很难理解这个线程局部变量的使用场景。当现在回过头去看，ThreadLocal是一种多线程间并发访问变量的解决方案。与synchronized等加锁的方式不同，ThreadLocal完全不提供锁，而使用了以空间换时间的手段，为每个线程提供变量的独立副本，以保障线程安全，因此它不是一种数据共享的解决方案。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">ThreadLocal是解决线程安全问题一个很好的思路，ThreadLocal类中有一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值对应线程的变量副本，由于Key值不可重复，每一个“线程对象”对应线程的“变量副本”，而到达了线程安全。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">特别值得注意的地方，从性能上说，ThreadLocal并不具有绝对的又是，在并发量不是很高时，也行加锁的性能会更好。但作为一套与锁完全无关的线程安全解决方案，在高并发量或者所竞争激烈的场合，使用ThreadLocal可以在一定程度上减少锁竞争。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">下面是一个ThreadLocal的简单使用：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs cs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;class&nbsp;TestNum&nbsp;{&nbsp;//&nbsp;通过匿名内部类覆盖ThreadLocal的initialValue()方法，指定初始值\n&nbsp;private&nbsp;static&nbsp;ThreadLocal&nbsp;seqNum&nbsp;=&nbsp;new&nbsp;ThreadLocal()&nbsp;{&nbsp;public&nbsp;Integer&nbsp;initialValue()&nbsp;{&nbsp;return&nbsp;0;\n&nbsp;}\n&nbsp;};&nbsp;//&nbsp;获取下一个序列值\n&nbsp;public&nbsp;int&nbsp;getNextNum()&nbsp;{\n&nbsp;seqNum.set(seqNum.get()&nbsp;+&nbsp;1);&nbsp;return&nbsp;seqNum.get();\n}public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n&nbsp;TestNum&nbsp;sn&nbsp;=&nbsp;new&nbsp;TestNum();&nbsp;//3个线程共享sn，各自产生序列号\n&nbsp;TestClient&nbsp;t1&nbsp;=&nbsp;new&nbsp;TestClient(sn);\n&nbsp;TestClient&nbsp;t2&nbsp;=&nbsp;new&nbsp;TestClient(sn);\n&nbsp;TestClient&nbsp;t3&nbsp;=&nbsp;new&nbsp;TestClient(sn);\n&nbsp;t1.start();\n&nbsp;t2.start();\n&nbsp;t3.start();\n&nbsp;}private&nbsp;static&nbsp;class&nbsp;TestClient&nbsp;extends&nbsp;Thread&nbsp;{&nbsp;private&nbsp;TestNum&nbsp;sn;public&nbsp;TestClient(TestNum&nbsp;sn)&nbsp;{&nbsp;this.sn&nbsp;=&nbsp;sn;\n&nbsp;}public&nbsp;void&nbsp;run()&nbsp;{&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;3;&nbsp;i++)&nbsp;{&nbsp;//&nbsp;每个线程打出3个序列值\n&nbsp;System.out.println(&quot;thread[&quot;&nbsp;+&nbsp;Thread.currentThread().getName()&nbsp;+&nbsp;&quot;]&nbsp;--&gt;&nbsp;sn[&quot;\n&nbsp;+&nbsp;sn.getNextNum()&nbsp;+&nbsp;&quot;]&quot;);\n&nbsp;}\n&nbsp;}\n&nbsp;}\n&nbsp;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">输出结果：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs css\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">thread[Thread-0]&nbsp;–&gt;&nbsp;sn[1]thread[Thread-1]&nbsp;–&gt;&nbsp;sn[1]thread[Thread-2]&nbsp;–&gt;&nbsp;sn[1]thread[Thread-1]&nbsp;–&gt;&nbsp;sn[2]thread[Thread-0]&nbsp;–&gt;&nbsp;sn[2]thread[Thread-1]&nbsp;–&gt;&nbsp;sn[3]thread[Thread-2]&nbsp;–&gt;&nbsp;sn[2]thread[Thread-0]&nbsp;–&gt;&nbsp;sn[3]thread[Thread-2]&nbsp;–&gt;&nbsp;sn[3]</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">输出的结果信息可以发现每个线程所产生的序号虽然都共享同一个TestNum实例，但它们并没有发生相互干扰的情况，而是各自产生独立的序列号，这是因为ThreadLocal为每一个线程提供了单独的副本。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">锁的性能和优化</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">“锁”是最常用的同步方法之一。在平常开发中，经常能看到很多同学直接把锁加很大一段代码上。还有的同学只会用一种锁方式解决所有共享问题。显然这样的编码是让人无法接受的。特别的在高并发的环境下，激烈的锁竞争会导致程序的性能下降德更加明显。因此合理使用锁对程序的性能直接相关。<br/><strong style=\"margin: 0px; padding: 0px;\"></strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">1、线程的开销</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在多核情况下，使用多线程可以明显提高系统的性能。但是在实际情况中，使用多线程的方式会额外增加系统的开销。相对于单核系统任务本身的资源消耗外，多线程应用还需要维护额外多线程特有的信息。比如，线程本身的元数据，线程调度，线程上下文的切换等。<br/><strong style=\"margin: 0px; padding: 0px;\"></strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">2、减小锁持有时间&nbsp;</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在使用锁进行并发控制的程序中，当锁发生竞争时，单个线程对锁的持有时间与系统性能有着直接的关系。如果线程持有锁的时间很长，那么相对地，锁的竞争程度也就越激烈。因此，在程序开发过程中，应该尽可能地减少对某个锁的占有时间，以减少线程间互斥的可能。比如下面这一段代码：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;synchronized&nbsp;void&nbsp;syncMehod(){\nbeforeMethod();\nmutexMethod();\nafterMethod();\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">此实例如果只有mutexMethod()方法是有同步需要的，而在beforeMethod(),和afterMethod()并不需要做同步控制。如果beforeMethod(),和afterMethod()分别是重量级的方法，则会花费较长的CPU时间。在这个时候，如果并发量较大时，使用这种同步方案会导致等待线程大量增加。因为当前执行的线程只有在执行完所有任务后，才会释放锁。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">下面是优化后的方案，只在必要的时候进行同步，这样就能明显减少线程持有锁的时间，提高系统的吞吐量。代码如下：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;void&nbsp;syncMehod(){\nbeforeMethod();synchronized(this){\nmutexMethod();\n}\nafterMethod();\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">3、减少锁粒度</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">减小锁粒度也是一种削弱多线程锁竞争的一种有效手段，这种技术典型的使用场景就是ConcurrentHashMap这个类。在普通的HashMap中每当对集合进行add()操作或者get()操作时，总是获得集合对象的锁。这种操作完全是一种同步行为，因为锁是在整个集合对象上的，因此，在高并发时，激烈的锁竞争会影响到系统的吞吐量。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">如果看过源码的同学应该知道HashMap是数组+链表的方式做实现的。ConcurrentHashMap在HashMap的基础上将整个HashMap分成若干个段(Segment)，每个段都是一个子HashMap。如果需要在增加一个新的表项，并不是将这个HashMap加锁，二十搜线根据hashcode得到该表项应该被存放在哪个段中，然后对该段加锁，并完成put()操作。这样，在多线程环境中，如果多个线程同时进行写入操作，只要被写入的项不存在同一个段中，那么线程间便可以做到真正的并行。具体的实现希望读者自己花点时间读一读ConcurrentHashMap这个类的源码，这里就不再做过多描述了。<br/><strong style=\"margin: 0px; padding: 0px;\"></strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">4、锁分离&nbsp;</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在前面提起过ReadWriteLock读写锁，那么读写分离的延伸就是锁的分离。同样可以在JDK中找到锁分离的源码LinkedBlockingQueue。</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;class&nbsp;LinkedBlockingQueue&nbsp;extends&nbsp;AbstractQueueimplements&nbsp;BlockingQueue,&nbsp;java.io.Serializable&nbsp;{/*&nbsp;Lock&nbsp;held&nbsp;by&nbsp;take,&nbsp;poll,&nbsp;etc&nbsp;/\nprivate&nbsp;final&nbsp;ReentrantLock&nbsp;takeLock&nbsp;=&nbsp;new&nbsp;ReentrantLock();\n/**&nbsp;Wait&nbsp;queue&nbsp;for&nbsp;waiting&nbsp;takes&nbsp;*/private&nbsp;final&nbsp;Condition&nbsp;notEmpty&nbsp;=&nbsp;takeLock.newCondition();/**&nbsp;Lock&nbsp;held&nbsp;by&nbsp;put,&nbsp;offer,&nbsp;etc&nbsp;*/private&nbsp;final&nbsp;ReentrantLock&nbsp;putLock&nbsp;=&nbsp;new&nbsp;ReentrantLock();/**&nbsp;Wait&nbsp;queue&nbsp;for&nbsp;waiting&nbsp;puts&nbsp;*/private&nbsp;final&nbsp;Condition&nbsp;notFull&nbsp;=&nbsp;putLock.newCondition();public&nbsp;E&nbsp;take()&nbsp;throws&nbsp;InterruptedException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;x;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;c&nbsp;=&nbsp;-1;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;AtomicInteger&nbsp;count&nbsp;=&nbsp;this.count;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;ReentrantLock&nbsp;takeLock&nbsp;=&nbsp;this.takeLock;\n&nbsp;&nbsp;&nbsp;&nbsp;takeLock.lockInterruptibly();&nbsp;//&nbsp;不能有两个线程同时读取数据\n&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(count.get()&nbsp;==&nbsp;0)&nbsp;{&nbsp;//&nbsp;如果当前没有可用数据，一直等待put()的通知\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notEmpty.await();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&nbsp;dequeue();&nbsp;//&nbsp;从头部移除一项\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;count.getAndDecrement();&nbsp;//&nbsp;size减1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c&nbsp;&gt;&nbsp;1)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notEmpty.signal();&nbsp;//&nbsp;通知其他take()操作\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;takeLock.unlock();&nbsp;//&nbsp;释放锁\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c&nbsp;==&nbsp;capacity)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signalNotFull();&nbsp;//&nbsp;通知put()操作，已有空余空间\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x;\n}public&nbsp;void&nbsp;put(E&nbsp;e)&nbsp;throws&nbsp;InterruptedException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(e&nbsp;==&nbsp;null)&nbsp;throw&nbsp;new&nbsp;NullPointerException();&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Note:&nbsp;convention&nbsp;in&nbsp;all&nbsp;put/take/etc&nbsp;is&nbsp;to&nbsp;preset&nbsp;local&nbsp;var\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;holding&nbsp;count&nbsp;negative&nbsp;to&nbsp;indicate&nbsp;failure&nbsp;unless&nbsp;set.\n&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;c&nbsp;=&nbsp;-1;\n&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;node&nbsp;=&nbsp;new&nbsp;Node(e);&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;ReentrantLock&nbsp;putLock&nbsp;=&nbsp;this.putLock;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;AtomicInteger&nbsp;count&nbsp;=&nbsp;this.count;\n&nbsp;&nbsp;&nbsp;&nbsp;putLock.lockInterruptibly();&nbsp;//&nbsp;不能有两个线程同时put数据\n&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Note&nbsp;that&nbsp;count&nbsp;is&nbsp;used&nbsp;in&nbsp;wait&nbsp;guard&nbsp;even&nbsp;though&nbsp;it&nbsp;is\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;not&nbsp;protected&nbsp;by&nbsp;lock.&nbsp;This&nbsp;works&nbsp;because&nbsp;count&nbsp;can\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;only&nbsp;decrease&nbsp;at&nbsp;this&nbsp;point&nbsp;(all&nbsp;other&nbsp;puts&nbsp;are&nbsp;shut\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;out&nbsp;by&nbsp;lock),&nbsp;and&nbsp;we&nbsp;(or&nbsp;some&nbsp;other&nbsp;waiting&nbsp;put)&nbsp;are\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;signalled&nbsp;if&nbsp;it&nbsp;ever&nbsp;changes&nbsp;from&nbsp;capacity.&nbsp;Similarly\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;for&nbsp;all&nbsp;other&nbsp;uses&nbsp;of&nbsp;count&nbsp;in&nbsp;other&nbsp;wait&nbsp;guards.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(count.get()&nbsp;==&nbsp;capacity)&nbsp;{&nbsp;//&nbsp;队列满了&nbsp;则等待\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notFull.await();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enqueue(node);&nbsp;//&nbsp;加入队列\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c&nbsp;=&nbsp;count.getAndIncrement();//&nbsp;size加1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c&nbsp;+&nbsp;1&nbsp;&lt;&nbsp;capacity)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notFull.signal();&nbsp;//&nbsp;如果有足够空间，通知其他线程\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;putLock.unlock();//&nbsp;释放锁\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(c&nbsp;==&nbsp;0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signalNotEmpty();//&nbsp;插入成功后，通知take()操作读取数据}//&nbsp;other&nbsp;code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">这里需要说明一下的就是，take()和put()函数是相互独立的，它们之间不存在锁竞争关系。只需要在take()和put()各自方法内部分别对takeLock和putLock发生竞争。从而，削弱了锁竞争的可能性。<br/><strong style=\"margin: 0px; padding: 0px;\"></strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">5、锁粗化</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">上面说到的减小锁时间和粒度，这样做就是为了满足每个线程持有锁的时间尽量短。但是，在粒度上应该把握一个度，如果对用一个锁不停地进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而加大了系统开销。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我们需要知道的是，虚拟机在遇到一连串连续的对同一锁不断进行请求和释放的操作时，便会把所有的锁操作整合成对锁的一次请求，从而减少对锁的请求同步次数，这样的操作叫做锁的粗化。下面是一段整合实例演示：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;void&nbsp;syncMehod(){synchronized(lock){\nmethod1();\n}synchronized(lock){\nmethod2();\n}\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">JVM整合后的形式：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;void&nbsp;syncMehod(){synchronized(lock){\nmethod1();\nmethod2();\n}\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">因此，这样的整合给我们开发人员对锁粒度的把握给出了很好的演示作用。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">无锁的并行计算</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">上面花了很大篇幅在说锁的事情，同时也提到过锁是会带来一定的上下文切换的额外资源开销，在高并发时，”锁“的激烈竞争可能会成为系统瓶颈。因此，这里可以使用一种非阻塞同步方法。这种无锁方式依然能保证数据和程序在高并发环境下保持多线程间的一致性。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">1、非阻塞同步/无锁</strong><br/>非阻塞同步方式其实在前面的ThreadLocal中已经有所体现，每个线程拥有各自独立的变量副本，因此在并行计算时，无需相互等待。这里笔者主要推荐一种更为重要的、基于比较并交换（Compare And Swap）CAS算法的无锁并发控制方法。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">CAS算法的过程：它包含3个参数CAS(V,E,N)。V表示要更新的变量，E表示预期值，N表示新值。仅当V值等于E值时，才会将V的值设为N，如果V值和E值不同，则说明已经有其他线程做了更新，则当前线程什么都不做。最后CAS返回当前V的真实值。CAS操作时抱着乐观的态度进行的，它总是认为自己可以成功完成操作。当多个线程同时使用CAS操作一个变量时，只有一个会胜出，并成功更新，其余俊辉失败。失败的线程不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。基于这样的原理，CAS操作及时没有锁，也可以发现其他线程对当前线程的干扰，并且进行恰当的处理。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">2、原子量操作</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">JDK的java.util.concurrent.atomic包提供了使用无锁算法实现的原子操作类，代码内部主要使用了底层native代码的实现。有兴趣的同学可以继续跟踪一下native层面的代码。这里就不贴表层的代码实现了。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">下面主要以一个例子来展示普通同步方法和无锁同步的性能差距：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">public&nbsp;class&nbsp;TestAtomic&nbsp;{private&nbsp;static&nbsp;final&nbsp;int&nbsp;MAX_THREADS&nbsp;=&nbsp;3;private&nbsp;static&nbsp;final&nbsp;int&nbsp;TASK_COUNT&nbsp;=&nbsp;3;private&nbsp;static&nbsp;final&nbsp;int&nbsp;TARGET_COUNT&nbsp;=&nbsp;100&nbsp;*&nbsp;10000;private&nbsp;AtomicInteger&nbsp;acount&nbsp;=&nbsp;new&nbsp;AtomicInteger(0);private&nbsp;int&nbsp;count&nbsp;=&nbsp;0;synchronized&nbsp;int&nbsp;inc()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;++count;\n}synchronized&nbsp;int&nbsp;getCount()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;count;\n}public&nbsp;class&nbsp;SyncThread&nbsp;implements&nbsp;Runnable&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;startTime;\n&nbsp;&nbsp;&nbsp;&nbsp;TestAtomic&nbsp;out;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SyncThread(TestAtomic&nbsp;o,&nbsp;long&nbsp;startTime)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.out&nbsp;=&nbsp;o;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.startTime&nbsp;=&nbsp;startTime;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;v&nbsp;=&nbsp;out.inc();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(v&nbsp;&lt;&nbsp;TARGET_COUNT)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v&nbsp;=&nbsp;out.inc();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;endTime&nbsp;=&nbsp;System.currentTimeMillis();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;SyncThread&nbsp;spend:&quot;&nbsp;+&nbsp;(endTime&nbsp;-&nbsp;startTime)&nbsp;+&nbsp;&quot;ms&quot;&nbsp;+&nbsp;&quot;,&nbsp;v=&quot;&nbsp;+&nbsp;v);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}public&nbsp;class&nbsp;AtomicThread&nbsp;implements&nbsp;Runnable&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;startTime;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;AtomicThread(long&nbsp;startTime)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.startTime&nbsp;=&nbsp;startTime;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;v&nbsp;=&nbsp;acount.incrementAndGet();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;(v&nbsp;&lt;&nbsp;TARGET_COUNT)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v&nbsp;=&nbsp;acount.incrementAndGet();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;endTime&nbsp;=&nbsp;System.currentTimeMillis();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;AtomicThread&nbsp;spend:&quot;&nbsp;+&nbsp;(endTime&nbsp;-&nbsp;startTime)&nbsp;+&nbsp;&quot;ms&quot;&nbsp;+&nbsp;&quot;,&nbsp;v=&quot;&nbsp;+&nbsp;v);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}@Testpublic&nbsp;void&nbsp;testSync()&nbsp;throws&nbsp;InterruptedException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;ExecutorService&nbsp;exe&nbsp;=&nbsp;Executors.newFixedThreadPool(MAX_THREADS);&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;startTime&nbsp;=&nbsp;System.currentTimeMillis();\n&nbsp;&nbsp;&nbsp;&nbsp;SyncThread&nbsp;sync&nbsp;=&nbsp;new&nbsp;SyncThread(this,&nbsp;startTime);&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;TASK_COUNT;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exe.submit(sync);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(10000);\n}@Testpublic&nbsp;void&nbsp;testAtomic()&nbsp;throws&nbsp;InterruptedException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;ExecutorService&nbsp;exe&nbsp;=&nbsp;Executors.newFixedThreadPool(MAX_THREADS);&nbsp;&nbsp;&nbsp;&nbsp;long&nbsp;startTime&nbsp;=&nbsp;System.currentTimeMillis();\n&nbsp;&nbsp;&nbsp;&nbsp;AtomicThread&nbsp;atomic&nbsp;=&nbsp;new&nbsp;AtomicThread(startTime);&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;TASK_COUNT;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exe.submit(atomic);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(10000);\n}\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">测试结果如下：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs bash\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">testSync():\nSyncThread&nbsp;spend:201ms,&nbsp;v=1000002\nSyncThread&nbsp;spend:201ms,&nbsp;v=1000000\nSyncThread&nbsp;spend:201ms,&nbsp;v=1000001testAtomic():\nAtomicThread&nbsp;spend:43ms,&nbsp;v=1000000\nAtomicThread&nbsp;spend:44ms,&nbsp;v=1000001\nAtomicThread&nbsp;spend:46ms,&nbsp;v=1000002</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">相信这样的测试结果将内部锁和非阻塞同步算法的性能差异体现的非常明显。因此笔者更推荐直接视同atomic下的这个原子类。</p><h2 id=\"结束语\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">结束语</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">终于把想表达的这些东西整理完成了，其实还有一些想CountDownLatch这样的类没有讲到。不过上面的所讲到的绝对是并发编程中的核心。也许有些读者朋友能在网上看到很多这样的知识点，但是个人还是觉得知识只有在对比的基础上才能找到它合适的使用场景。因此，这也是笔者整理这篇文章的原因，也希望这篇文章能帮到更多的同学。</p><p><br/></p>',1,'java开发 并发 并发控制','/resources/images/1472288538643.jpg',6),(36,'JavaScript 中 this 的使用技巧总结','tip首先，我知道这篇文章很无聊，无非就是关于 js 中的 this，并且也已经有千千万万的文章写过这部分内容了；但是，我还是想写一篇关于 js 中的 this 的文章，算是一个总结归纳吧；（大神们可以绕行看我的其他文章）在 js 中，this 这个上下文总是变化莫测，很多时候出现 bug 总是一头雾水，其实','2016-08-30 15:58:20',5,0,'<h1 id=\"tip\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">tip</h1><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">首先，我知道这篇文章很无聊，无非就是关于 js 中的 this，并且也已经有千千万万的文章写过这部分内容了；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">但是，我还是想写一篇关于 js 中的 this 的文章，算是一个总结归纳吧；（大神们可以绕行看我的其他文章）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在 js 中，this 这个上下文总是变化莫测，很多时候出现 bug 总是一头雾水，其实，只要分清楚不同的情况下如何执行就 ok 了。</p><h1 id=\"全局执行\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">全局执行</h1><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">首先，我们在全局环境中看看它的 this 是什么：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">first. 浏览器：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">console.log(this);//&nbsp;Window&nbsp;{speechSynthesis:&nbsp;SpeechSynthesis,&nbsp;caches:&nbsp;CacheStorage,&nbsp;localStorage:&nbsp;Storage,&nbsp;sessionStorage:&nbsp;Storage,&nbsp;webkitStorageInfo:&nbsp;DeprecatedStorageInfo…}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到打印出了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">window</code>&nbsp;对象；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">second. node：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs coffeescript\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">console.log(this);//&nbsp;global</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到打印出了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">global</code>&nbsp;对象；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">总结：在全局作用域中它的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;执行当前的全局对象（浏览器端是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">Window</code>，node 中是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">global</code>）。</p><h1 id=\"函数中执行\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">函数中执行</h1><h2 id=\"纯粹的函数调用\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">纯粹的函数调用</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">这是最普通的函数使用方法了：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">function&nbsp;test()&nbsp;{&nbsp;&nbsp;console.log(this);\n};\n\ntest();//&nbsp;Window&nbsp;{speechSynthesis:&nbsp;SpeechSynthesis,&nbsp;caches:&nbsp;CacheStorage,&nbsp;localStorage:&nbsp;Storage,&nbsp;sessionStorage:&nbsp;Storage,&nbsp;webkitStorageInfo:&nbsp;DeprecatedStorageInfo…}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我们可以看到，一个函数被直接调用的时候，属于全局调用，这时候它的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向 全局对象；</p><h3 id=\"严格模式_‘use_strict’;\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">严格模式 ‘use strict’;</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">如果在严格模式的情况下执行纯粹的函数调用，那么这里的的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;并不会指向全局，而是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">undefined</code>，这样的做法是为了消除 js 中一些不严谨的行为：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">&#39;use&nbsp;strict&#39;;function&nbsp;test()&nbsp;{&nbsp;&nbsp;console.log(this);\n};\n\ntest();//&nbsp;undefined</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当然，把它放在一个立即执行函数中会更好，避免了污染全局：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">(function&nbsp;(){&nbsp;&nbsp;&quot;use&nbsp;strict&quot;;\n　console.log(this);\n})();//&nbsp;undefined</pre><h2 id=\"作为对象的方法调用\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">作为对象的方法调用</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当一个函数被当作一个对象的方法调用的时候：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;,\n&nbsp;&nbsp;foo:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.name);\n&nbsp;&nbsp;}\n}\n\nobj.foo();//&nbsp;&#39;qiutc&#39;</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">这时候，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向当前的这个对象；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当然，我们还可以这么做：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">function&nbsp;test()&nbsp;{&nbsp;&nbsp;console.log(this.name);\n}var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;,\n&nbsp;&nbsp;foo:&nbsp;test\n}\n\nobj.foo();//&nbsp;&#39;qiutc&#39;</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">同样不变，因为在 js 中一切都是对象，函数也是一个对象，对于&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">test</code>&nbsp;，它只是一个函数名，函数的引用，它指向这个函数，当&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">foo = test</code>，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">foo</code>&nbsp;同样也指向了这个函数。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">如果把对象的方法赋值给一个变量，然后直接调用这个变量呢：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;,\n&nbsp;&nbsp;foo:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);\n&nbsp;&nbsp;}\n}var&nbsp;test&nbsp;=&nbsp;obj.foo;\ntest();//&nbsp;Window</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到，这时候&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;执行了全局，当我们把&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">test = obj.foo</code>&nbsp;，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">test</code>&nbsp;直接指向了一个函数的引用，这时候，其实和&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>&nbsp;这个对象没有关系了，所以，它是被当作一个普通函数来直接调用，因此，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向全局对象。</p><h3 id=\"一些坑\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">一些坑</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我们经常在回调函数里面会遇到一些坑：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;,\n&nbsp;&nbsp;foo:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);\n&nbsp;&nbsp;},\n&nbsp;&nbsp;foo2:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);\n&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(this.foo,&nbsp;1000);\n&nbsp;&nbsp;}\n}\n\nobj.foo2();</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">执行这段代码我们会发现两次打印出来的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;是不一样的：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">第一次是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">foo2</code>&nbsp;中直接打印&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>，这里指向&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>&nbsp;这个对象，我们毋庸置疑；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">但是在&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;中执行的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this.foo</code>&nbsp;，却指向了全局对象，这里不是把它当作函数的方法使用吗？这一点经常让很多初学者疑惑；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">其实，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;也只是一个函数而已，函数必然有可能需要参数，我们把&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this.foo</code>&nbsp;当作一个参数传给&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;这个函数，就像它需要一个&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">fun</code>参数，在传入参数的时候，其实做了个这样的操作&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">fun = this.foo</code>，看到没有，这里我们直接把&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">fun</code>&nbsp;指向&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this.foo</code>&nbsp;的引用；执行的时候其实是执行了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">fun()</code>&nbsp;所以已经和&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>&nbsp;无关了，它是被当作普通函数直接调用的，因此&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向全局对象。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">这个问题是很多异步回调函数中普遍会碰到的；</p><h4 id=\"解决\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">解决</h4><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">为了解决这个问题，我们可以利用&nbsp;<span class=\"wp_keywordlink\"><a href=\"http://www.codeceo.com/article/javascript-bibao.html\" title=\"闭包\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">闭包</a></span>&nbsp;的特性来处理：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;,\n&nbsp;&nbsp;foo:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);\n&nbsp;&nbsp;},\n&nbsp;&nbsp;foo2:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_this&nbsp;=&nbsp;this;\n&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);&nbsp;&nbsp;//&nbsp;Window\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(_this);&nbsp;&nbsp;//&nbsp;Object&nbsp;{name:&nbsp;&quot;qiutc&quot;}\n&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;1000);\n&nbsp;&nbsp;}\n}\n\nobj.foo2();</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到直接用&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;仍然是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">Window</code>；因为&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">foo2</code>&nbsp;中的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;是指向&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>，我们可以先用一个变量&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">_this</code>&nbsp;来储存，然后在回调函数中使用&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">_this</code>，就可以指向当前的这个对象了；</p><h3 id=\"setTimeout_的另一个坑\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">setTimeout 的另一个坑</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">之前啊说过，如果直接执行回调函数而没有绑定作用域，那么它的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;是指向全局对象(<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">window</code>)，在严格模式下会指向&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">undefined</code>，然而在<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;中的回调函数在严格模式下却表现出不同：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">&#39;use&nbsp;strict&#39;;function&nbsp;foo()&nbsp;{&nbsp;&nbsp;console.log(this);\n}\n\nsetTimeout(foo,&nbsp;1);//&nbsp;window</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">按理说我们加了严格模式，foo 调用也没有指定&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>，应该是出来&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">undefined</code>，但是这里仍然出现了全局对象，难道是严格模式失效了吗？</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">并不，即使在严格模式下，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;方法在调用传入函数的时候，如果这个函数没有指定了的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>，那么它会做一个隐式的操作—-自动地注入全局上下文，等同于调用&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">foo.apply(window)</code>&nbsp;而非&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">foo()</code>；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当然，如果我们在传入函数的时候已经指定&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>，那么就不会被注入全局对象，比如：&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout(foo.bind(obj), 1);</code>；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><a href=\"http://stackoverflow.com/questions/21957030/why-is-window-still-defined-in-this-strict-mode-code\" rel=\"external\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">http://stackoverflow.com/questions/21957030/why-is-window-still-defined-in-this-strict-mode-code</a></p><h2 id=\"作为一个构造函数使用\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">作为一个构造函数使用</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在 js 中，为了实现类，我们需要定义一些构造函数，在调用一个构造函数的时候需要加上&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">new</code>&nbsp;这个关键字：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">function&nbsp;Person(name)&nbsp;{&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;console.log(this);\n}var&nbsp;p&nbsp;=&nbsp;new&nbsp;Person(&#39;qiutc&#39;);//&nbsp;Person&nbsp;{name:&nbsp;&quot;qiutc&quot;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我们可以看到当作构造函数调用时，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向了这个构造函数调用时候实例化出来的对象；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当然，构造函数其实也是一个函数，如果我们把它当作一个普通函数执行，这个&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;仍然执行全局：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">function&nbsp;Person(name)&nbsp;{&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;console.log(this);\n}var&nbsp;p&nbsp;=&nbsp;Person(&#39;qiutc&#39;);//&nbsp;Window</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">其区别在于，如何调用函数（<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">new</code>）。</p><h2 id=\"箭头函数\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">箭头函数</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在 ES6 的新规范中，加入了箭头函数，它和普通函数最不一样的一点就是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;的指向了，还记得我们使用闭包来解决&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;的指向问题吗，如果用上了箭头函数就可以更完美的解决了：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;,\n&nbsp;&nbsp;foo:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);\n&nbsp;&nbsp;},\n&nbsp;&nbsp;foo2:&nbsp;function()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);\n&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);&nbsp;&nbsp;//&nbsp;Object&nbsp;{name:&nbsp;&quot;qiutc&quot;}\n&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;1000);\n&nbsp;&nbsp;}\n}\n\nobj.foo2();</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到，在&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;执行的函数中，本应该打印出在&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">Window</code>，但是在这里&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;却指向了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>，原因就在于，给&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;传入的函数（参数）是一个箭头函数：</p><blockquote style=\"margin: 15px auto; padding: 10px 15px 5px; border-width: 1px 1px 1px 3px; border-style: solid; border-color: rgb(214, 214, 214); font-size: 12px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal; background-color: rgb(253, 253, 253);\"><p style=\"margin-top: 0px; padding: 0px;\">函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p></blockquote><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">根据例子我们理解一下这句话：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj.foo2()</code>&nbsp;执行的时候，当前的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>；在执行&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">setTimeout</code>&nbsp;时候，我们先是定义了一个匿名的箭头函数，关键点就在这，箭头函数内的<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;执行定义时所在的对象，就是指向定义这个箭头函数时作用域内的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>，也就是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj.foo2</code>&nbsp;中的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>，即&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>；所以在执行箭头函数的时候，它的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;-&gt;&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj.foo2 中的 this</code>&nbsp;-&gt;&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">简单来说，&nbsp;箭头函数中的 this 只和定义它时候的作用域的 this 有关，而与在哪里以及如何调用它无关，同时它的 this 指向是不可改变的。</p><h2 id=\"call,_apply,_bind\" style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">call, apply, bind</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在 js 中，函数也是对象，同样也有一些方法，这里我们介绍三个方法，他们可以更改函数中的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向：</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>call</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs css\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">fun.call(thisArg[,&nbsp;arg1[,&nbsp;arg2[,&nbsp;...]]])</pre></li></ul><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">它会立即执行函数，第一个参数是指定执行函数中&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;的上下文，后面的参数是执行函数需要传入的参数；</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>apply</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs css\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">fun.apply(thisArg[,&nbsp;[arg1,&nbsp;arg2,&nbsp;...]])</pre></li></ul><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">它会立即执行函数，第一个参数是指定执行函数中&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;的上下文，第二个参数是一个数组，是传给执行函数的参数（与&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">call</code>&nbsp;的区别）；</p><ul style=\"list-style-type: none;\" class=\" list-paddingleft-2\"><li><p>bind</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs swift\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;foo&nbsp;=&nbsp;fun.bind(thisArg[,&nbsp;arg1[,&nbsp;arg2[,&nbsp;...]]]);</pre></li></ul><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">它不会执行函数，而是返回一个新的函数，这个新的函数被指定了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;的上下文，后面的参数是执行函数需要传入的参数；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><span style=\"margin: 0px; padding: 0px;\">这三个函数其实大同小异，总的目的就是去指定一个函数的上下文（this）</span>，我们以&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">call</code>&nbsp;函数为例；</p><h3 id=\"为一个普通函数指定_this\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">为一个普通函数指定 this</h3><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;};function&nbsp;foo()&nbsp;{&nbsp;&nbsp;console.log(this);\n}\n\nfoo.call(obj);//&nbsp;Object&nbsp;{name:&nbsp;&quot;qiutc&quot;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到，在执行&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">foo.call(obj)</code>&nbsp;的时候，函数内的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>&nbsp;这个对象，成功；</p><h3 id=\"为对象中的方法指定一个_this\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">为对象中的方法指定一个 this</h3><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;,\n&nbsp;&nbsp;foo:&nbsp;function&nbsp;()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;console.log(this);\n&nbsp;&nbsp;}\n}var&nbsp;obj2&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;tcqiu222222&#39;};\n\nobj.foo.call(obj2);//&nbsp;Object&nbsp;{name:&nbsp;&quot;tcqiu222222&quot;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到，执行函数的时候这里的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;指向了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj2</code>，成功；</p><h3 id=\"为构造函数指定_this\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">为构造函数指定 this</h3><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">function&nbsp;Person(name)&nbsp;{&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;console.log(this);\n}var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc2222222&#39;};var&nbsp;p&nbsp;=&nbsp;new&nbsp;Person.call(obj,&nbsp;&#39;qiutc&#39;);//&nbsp;Uncaught&nbsp;TypeError:&nbsp;Person.call&nbsp;is&nbsp;not&nbsp;a&nbsp;constructor(…)</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">这里报了个错，原因是我们去&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">new</code>&nbsp;了&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">Person.call</code>&nbsp;函数，而非&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">Person</code>&nbsp;，这里的函数不是一个构造函数；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">换成&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">bind</code>&nbsp;试试：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">function&nbsp;Person(name)&nbsp;{&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;console.log(this);\n}var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc2222222&#39;};var&nbsp;Person2&nbsp;=&nbsp;Person.bind(obj);var&nbsp;p&nbsp;=&nbsp;new&nbsp;Person2(&#39;qiutc&#39;);//&nbsp;Person&nbsp;{name:&nbsp;&quot;qiutc&quot;}console.log(obj);//&nbsp;Object&nbsp;{name:&nbsp;&quot;qiutc2222222&quot;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">打印出来的是&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">Person</code>&nbsp;实例化出来的对象，而和&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>&nbsp;没有关系，而&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">obj</code>&nbsp;也没有发生变化，说明，我们给&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">Person</code>&nbsp;指定&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;上下文并没有生效；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">因此可以得出：&nbsp;使用 bind 给一个构造函数指定&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>，在&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">new</code>&nbsp;这个构造函数的时候，<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">bind</code>&nbsp;函数所指定的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;并不会生效；</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">当然&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">bind</code>&nbsp;不仅可以指定&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;，还能传入参数，我们来试试这个操作：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">function&nbsp;Person(name)&nbsp;{&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;&nbsp;&nbsp;console.log(this);\n}var&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc2222222&#39;};var&nbsp;Person2&nbsp;=&nbsp;Person.bind(obj,&nbsp;&#39;qiutc111111&#39;);var&nbsp;p&nbsp;=&nbsp;new&nbsp;Person2(&#39;qiutc&#39;);//&nbsp;Person&nbsp;{name:&nbsp;&quot;qiutc111111&quot;}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到，虽然指定&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;不起作用，但是传入参数还是起作用了；</p><h3 id=\"为箭头函数指定_this\" style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 14px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">为箭头函数指定 this</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我们来定义一个全局下的箭头函数，因此这个箭头函数中的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;必然会指向全局对象，如果用&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">call</code>&nbsp;方法改变&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;呢：</p><pre class=\"brush: javascript; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &#39;courier new&#39;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); background-color: rgb(251, 251, 251);\">var&nbsp;afoo&nbsp;=&nbsp;(a)&nbsp;=&gt;&nbsp;{&nbsp;&nbsp;console.log(a);&nbsp;&nbsp;console.log(this);\n}\n\nafoo(1);//&nbsp;1//&nbsp;Windowvar&nbsp;obj&nbsp;=&nbsp;{\n&nbsp;&nbsp;name:&nbsp;&#39;qiutc&#39;};\n\nafoo.call(obj,&nbsp;2);//&nbsp;2//&nbsp;Window</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">可以看到，这里的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">call</code>&nbsp;指向&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>&nbsp;的操作并没有成功，所以可以得出：&nbsp;箭头函数中的 this 在定义它的时候已经决定了（执行定义它的作用域中的 this），与如何调用以及在哪里调用它无关，包括 (call, apply, bind) 等操作都无法改变它的 this。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">只要记住箭头函数大法好，不变的&nbsp;<code style=\"margin: 0px 4px; padding: 1px 4px; font-size: 12px; font-family: &#39;courier new&#39;; color: rgb(119, 119, 119); border-radius: 2px; background-color: rgb(238, 238, 238);\">this</code>。</p><p><a id=\"soft-link\" style=\"color: rgb(0, 136, 219); cursor: pointer; font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\" name=\"soft-link\"></a><span style=\"color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px;\"></span></p><p><br/></p>',16,'WEB开发 javascript this','/resources/images/1472543899536.jpg',5),(37,'java复制文件的4种方式','摘要尽管Java提供了一个可以处理文件的IO操作类。 但是没有一个复制文件的方法。 复制文件是一个重要的操作,当你的程序必须处理很多文件相关的时候。 然而有几种方法可以进行Java文件复制操作,下面列举出4中最受欢迎的方式。1. 使用FileStreams复制这是最经典的方式将一个文件的内容复制到另一个文件中','2016-08-30 16:19:21',41,3,'<p><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 1.6rem;\">摘要</strong></p><p>尽管Java提供了一个可以处理文件的IO操作类。 但是没有一个复制文件的方法。 复制文件是一个重要的操作,当你的程序必须处理很多文件相关的时候。 然而有几种方法可以进行Java文件复制操作,下面列举出4中最受欢迎的方式。</p><p><val data-name=\"blog_content_type\" data-value=\"richtext\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"></val></p><p><span id=\"OSC_h3_1\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"></span></p><h3 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 2.2rem;\">1. 使用FileStreams复制</h3><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; margin-bottom: 16px; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 14px;\">这是最经典的方式将一个文件的内容复制到另一个文件中。 使用FileInputStream读取文件A的字节，使用FileOutputStream写入到文件B。 这是第一个方法的代码:</span></p><pre class=\"brush:java;toolbar: true; auto-links: false; hljs gradle\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; overflow-x: auto; padding: 2px; color: rgb(119, 119, 119); border-radius: 3px; line-height: 1.4; word-wrap: normal; background-color: rgb(253, 246, 227);\">private&nbsp;static&nbsp;void&nbsp;copyFileUsingFileStreams(File&nbsp;source,&nbsp;File&nbsp;dest)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;IOException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;InputStream&nbsp;input&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;OutputStream&nbsp;output&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input&nbsp;=&nbsp;new&nbsp;FileInputStream(source);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;=&nbsp;new&nbsp;FileOutputStream(dest);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;byte[]&nbsp;buf&nbsp;=&nbsp;new&nbsp;byte[1024];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;bytesRead;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((bytesRead&nbsp;=&nbsp;input.read(buf))&nbsp;&gt;&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.write(buf,&nbsp;0,&nbsp;bytesRead);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input.close();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output.close();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; margin-bottom: 16px; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 14px;\">正如你所看到的我们执行几个读和写操作try的数据,所以这应该是一个低效率的,下一个方法我们将看到新的方式。</span></p><p><span id=\"OSC_h3_2\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"></span></p><h3 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 2.2rem;\"><a href=\"https://github.com/uidea/note/blob/master/java/java%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F.md#2-使用filechannel复制\" rel=\"nofollow\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; outline: 0px; border: none; text-decoration: none; color: rgb(68, 102, 187); transition: color 0.3s;\"></a>2. 使用FileChannel复制</h3><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; margin-bottom: 16px; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;\">Java NIO包括transferFrom方法,根据文档应该比文件流复制的速度更快。 这是第二种方法的代码:</p><pre class=\"brush:java;toolbar: true; auto-links: false; hljs gradle\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; overflow-x: auto; padding: 2px; color: rgb(119, 119, 119); border-radius: 3px; line-height: 1.4; word-wrap: normal; background-color: rgb(253, 246, 227);\">private&nbsp;static&nbsp;void&nbsp;copyFileUsingFileChannels(File&nbsp;source,&nbsp;File&nbsp;dest)&nbsp;throws&nbsp;IOException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileChannel&nbsp;inputChannel&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileChannel&nbsp;outputChannel&nbsp;=&nbsp;null;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputChannel&nbsp;=&nbsp;new&nbsp;FileInputStream(source).getChannel();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputChannel&nbsp;=&nbsp;new&nbsp;FileOutputStream(dest).getChannel();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputChannel.transferFrom(inputChannel,&nbsp;0,&nbsp;inputChannel.size());\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inputChannel.close();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outputChannel.close();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p><span id=\"OSC_h3_3\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"></span></p><h3 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 2.2rem;\"><a href=\"https://github.com/uidea/note/blob/master/java/java%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F.md#3-使用commons-io复制\" rel=\"nofollow\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; outline: 0px; border: none; text-decoration: none; color: rgb(68, 102, 187); transition: color 0.3s;\"></a>3. 使用Commons IO复制</h3><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; margin-bottom: 16px; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 14px;\">Apache Commons IO提供拷贝文件方法在其FileUtils类,可用于复制一个文件到另一个地方。它非常方便使用Apache Commons FileUtils类时,您已经使用您的项目。基本上,这个类使用Java NIO FileChannel内部。 这是第三种方法的代码:</span></p><pre class=\"brush:java;toolbar: true; auto-links: false; hljs gradle\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; overflow-x: auto; padding: 2px; color: rgb(119, 119, 119); border-radius: 3px; line-height: 1.4; word-wrap: normal; background-color: rgb(253, 246, 227);\">private&nbsp;static&nbsp;void&nbsp;copyFileUsingApacheCommonsIO(File&nbsp;source,&nbsp;File&nbsp;dest)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;IOException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;FileUtils.copyFile(source,&nbsp;dest);\n}</pre><p><span id=\"OSC_h3_4\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"></span></p><h3 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 2.2rem;\"><a href=\"https://github.com/uidea/note/blob/master/java/java%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F.md#4-使用java7的files类复制\" rel=\"nofollow\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; outline: 0px; border: none; text-decoration: none; color: rgb(68, 102, 187); transition: color 0.3s;\"></a>4. 使用Java7的Files类复制</h3><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; margin-bottom: 16px; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 14px;\">如果你有一些经验在Java 7中你可能会知道,可以使用复制方法的Files类文件,从一个文件复制到另一个文件。 这是第四个方法的代码:</span></p><pre class=\"brush:java;toolbar: true; auto-links: false; hljs gradle\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; overflow-x: auto; padding: 2px; color: rgb(119, 119, 119); border-radius: 3px; line-height: 1.4; word-wrap: normal; background-color: rgb(253, 246, 227);\">private&nbsp;static&nbsp;void&nbsp;copyFileUsingJava7Files(File&nbsp;source,&nbsp;File&nbsp;dest)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws&nbsp;IOException&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Files.copy(source.toPath(),&nbsp;dest.toPath());\n}</pre><p><span id=\"OSC_h3_5\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"></span></p><h3 style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 2.2rem;\"><a href=\"https://github.com/uidea/note/blob/master/java/java%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F.md#测试\" rel=\"nofollow\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; outline: 0px; border: none; text-decoration: none; color: rgb(68, 102, 187); transition: color 0.3s;\"></a>5. 测试</h3><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; margin-bottom: 16px; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px;\">现在看到这些方法中的哪一个是更高效的,我们会复制一个大文件使用每一个在一个简单的程序。 从缓存来避免任何性能明显我们将使用四个不同的源文件和四种不同的目标文件。 让我们看一下代码:</p><pre class=\"brush:java;toolbar: true; auto-links: false; hljs gradle\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; overflow-x: auto; padding: 2px; color: rgb(119, 119, 119); border-radius: 3px; line-height: 1.4; word-wrap: normal; background-color: rgb(253, 246, 227);\">import&nbsp;java.io.File;import&nbsp;java.io.FileInputStream;import&nbsp;java.io.FileOutputStream;import&nbsp;java.io.IOException;import&nbsp;java.io.InputStream;import&nbsp;java.io.OutputStream;import&nbsp;java.nio.channels.FileChannel;import&nbsp;java.nio.file.Files;import&nbsp;org.apache.commons.io.FileUtils;public&nbsp;class&nbsp;CopyFilesExample&nbsp;{	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;InterruptedException,\n			IOException&nbsp;{		File&nbsp;source&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\sourcefile1.txt&quot;);		File&nbsp;dest&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\destfile1.txt&quot;);		//&nbsp;copy&nbsp;file&nbsp;using&nbsp;FileStreams\n		long&nbsp;start&nbsp;=&nbsp;System.nanoTime();		long&nbsp;end;\n		copyFileUsingFileStreams(source,&nbsp;dest);\n		System.out.println(&quot;Time&nbsp;taken&nbsp;by&nbsp;FileStreams&nbsp;Copy&nbsp;=&nbsp;&quot;\n				+&nbsp;(System.nanoTime()&nbsp;-&nbsp;start));		//&nbsp;copy&nbsp;files&nbsp;using&nbsp;java.nio.FileChannel\n		source&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\sourcefile2.txt&quot;);\n		dest&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\destfile2.txt&quot;);\n		start&nbsp;=&nbsp;System.nanoTime();\n		copyFileUsingFileChannels(source,&nbsp;dest);\n		end&nbsp;=&nbsp;System.nanoTime();\n		System.out.println(&quot;Time&nbsp;taken&nbsp;by&nbsp;FileChannels&nbsp;Copy&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;(end&nbsp;-&nbsp;start));		//&nbsp;copy&nbsp;file&nbsp;using&nbsp;Java&nbsp;7&nbsp;Files&nbsp;class\n		source&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\sourcefile3.txt&quot;);\n		dest&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\destfile3.txt&quot;);\n		start&nbsp;=&nbsp;System.nanoTime();\n		copyFileUsingJava7Files(source,&nbsp;dest);\n		end&nbsp;=&nbsp;System.nanoTime();\n		System.out.println(&quot;Time&nbsp;taken&nbsp;by&nbsp;Java7&nbsp;Files&nbsp;Copy&nbsp;=&nbsp;&quot;&nbsp;+&nbsp;(end&nbsp;-&nbsp;start));		//&nbsp;copy&nbsp;files&nbsp;using&nbsp;apache&nbsp;commons&nbsp;io\n		source&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\sourcefile4.txt&quot;);\n		dest&nbsp;=&nbsp;new&nbsp;File(&quot;C:\\\\Users\\\\nikos7\\\\Desktop\\\\files\\\\destfile4.txt&quot;);\n		start&nbsp;=&nbsp;System.nanoTime();\n		copyFileUsingApacheCommonsIO(source,&nbsp;dest);\n		end&nbsp;=&nbsp;System.nanoTime();\n		System.out.println(&quot;Time&nbsp;taken&nbsp;by&nbsp;Apache&nbsp;Commons&nbsp;IO&nbsp;Copy&nbsp;=&nbsp;&quot;\n				+&nbsp;(end&nbsp;-&nbsp;start));\n\n	}	private&nbsp;static&nbsp;void&nbsp;copyFileUsingFileStreams(File&nbsp;source,&nbsp;File&nbsp;dest)			throws&nbsp;IOException&nbsp;{\n		InputStream&nbsp;input&nbsp;=&nbsp;null;\n		OutputStream&nbsp;output&nbsp;=&nbsp;null;		try&nbsp;{\n			input&nbsp;=&nbsp;new&nbsp;FileInputStream(source);\n			output&nbsp;=&nbsp;new&nbsp;FileOutputStream(dest);			byte[]&nbsp;buf&nbsp;=&nbsp;new&nbsp;byte[1024];			int&nbsp;bytesRead;			while&nbsp;((bytesRead&nbsp;=&nbsp;input.read(buf))&nbsp;&gt;&nbsp;0)&nbsp;{\n				output.write(buf,&nbsp;0,&nbsp;bytesRead);\n			}\n		}&nbsp;finally&nbsp;{\n			input.close();\n			output.close();\n		}\n	}	private&nbsp;static&nbsp;void&nbsp;copyFileUsingFileChannels(File&nbsp;source,&nbsp;File&nbsp;dest)			throws&nbsp;IOException&nbsp;{\n		FileChannel&nbsp;inputChannel&nbsp;=&nbsp;null;\n		FileChannel&nbsp;outputChannel&nbsp;=&nbsp;null;		try&nbsp;{\n			inputChannel&nbsp;=&nbsp;new&nbsp;FileInputStream(source).getChannel();\n			outputChannel&nbsp;=&nbsp;new&nbsp;FileOutputStream(dest).getChannel();\n			outputChannel.transferFrom(inputChannel,&nbsp;0,&nbsp;inputChannel.size());\n		}&nbsp;finally&nbsp;{\n			inputChannel.close();\n			outputChannel.close();\n		}\n	}	private&nbsp;static&nbsp;void&nbsp;copyFileUsingJava7Files(File&nbsp;source,&nbsp;File&nbsp;dest)			throws&nbsp;IOException&nbsp;{\n		Files.copy(source.toPath(),&nbsp;dest.toPath());\n	}	private&nbsp;static&nbsp;void&nbsp;copyFileUsingApacheCommonsIO(File&nbsp;source,&nbsp;File&nbsp;dest)			throws&nbsp;IOException&nbsp;{\n		FileUtils.copyFile(source,&nbsp;dest);\n	}\n\n}</pre><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><a href=\"https://github.com/uidea/note/blob/master/java/java%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%844%E7%A7%8D%E6%96%B9%E5%BC%8F.md#输出\" rel=\"nofollow\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; outline: 0px; border: none; text-decoration: none; color: rgb(68, 102, 187); transition: color 0.3s;\"></a><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\">输出：</strong></p><pre class=\"brush:shell;toolbar: true; auto-links: false; hljs kotlin\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; overflow-x: auto; padding: 2px; color: rgb(119, 119, 119); border-radius: 3px; line-height: 1.4; word-wrap: normal; background-color: rgb(253, 246, 227);\">Time&nbsp;taken&nbsp;by&nbsp;FileStreams&nbsp;Copy&nbsp;=&nbsp;127572360Time&nbsp;taken&nbsp;by&nbsp;FileChannels&nbsp;Copy&nbsp;=&nbsp;10449963Time&nbsp;taken&nbsp;by&nbsp;Java7&nbsp;Files&nbsp;Copy&nbsp;=&nbsp;10808333Time&nbsp;taken&nbsp;by&nbsp;Apache&nbsp;Commons&nbsp;IO&nbsp;Copy&nbsp;=&nbsp;17971677</pre><p style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; margin-top: 0px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Segoe UI&#39;, Arial, freesans, sans-serif; font-size: 16px; line-height: 25.6000003814697px; margin-bottom: 0px !important;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; font-size: 14px;\">正如您可以看到的FileChannels拷贝大文件是最好的方法。如果你处理更大的文件,你会注意到一个更大的速度差。 这是一个示例,该示例演示了Java中四种不同的方法可以复制一个文件。</span></p><p><br/></p>',1,'java 复制 file','/resources/images/1472545160347.jpg',44),(39,'Java HelloWorld实现',' 第一个博客，当然从HelloWorld 开发，主要测试下 百度ueditor的代码高亮效果如何。下面上代码：package com.java1234.demo;/** * 测试 * @author Administrator * */public class HelloWorld {	public stat','2016-02-02 10:00:42',465,22,'<p><img src=\"http://img.baidu.com/hi/jx2/j_0013.gif\"/> 第一个博客，当然从HelloWorld 开发，主要测试下 百度ueditor的代码高亮效果如何。</p><p><br/></p><p>下面上代码：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.demo;\n\n/**\n&nbsp;*&nbsp;测试\n&nbsp;*&nbsp;@author&nbsp;Administrator\n&nbsp;*\n&nbsp;*/\npublic&nbsp;class&nbsp;HelloWorld&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		System.out.println(&quot;Hello&nbsp;World，屌炸天！&quot;);\n	}\n}</pre><p><br/></p><p>代码高亮还算凑合，如果加上 复制代码功能，会更好点；</p><p><br/></p><p>运行效果如下：</p><p><img src=\"/static/userImages/20160202/1454378386640040323.jpg\" title=\"1454378386640040323.jpg\" alt=\"QQ鎴浘20160202095931.jpg\"/></p><p><br/></p><p><br/></p><p>这个图我是直接用百度ueditor直接截图的，很方便。这个是我选用百度ueditor在线编辑器的一个重要原因。</p><p><br/></p><p><br/></p>',1,'java','/resources/images/no_picture.jpg',7),(40,'大学必须掌握的软件基础课程',' 大学软件专业有很多课程，有些学生搞不清哪些是重点，以下是笔者根据多年经验，认真很重要的课程罗列下：1，C语言  很重要，作为学编程的入门语言，也是众多流行编程语言之父。2，数据结构和算法很重要，以后深入理解一些东西有帮助，即使是Java把很多数据结构都进行了封装，但是学习本课程，可以对性能有深入理解；3，计','2016-02-02 12:41:52',554,11,'<p><img src=\"http://img.baidu.com/hi/jx2/j_0013.gif\"/>&nbsp;大学软件专业有很多课程，有些学生搞不清哪些是重点，以下是笔者根据多年经验，认真很重要的课程罗列下：</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>1，C语言 &nbsp;</strong></span></p><p>很重要，作为学编程的入门语言，也是众多流行编程语言之父。</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>2，数据结构和算法</strong></span></p><p>很重要，以后深入理解一些东西有帮助，即使是Java把很多数据结构都进行了封装，但是学习本课程，可以对性能有深入理解；</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>3，计算机组成原理</strong></span></p><p>一般，学习一下；</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>4，编译原理</strong></span></p><p>一般，学习一下；</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>5，数据库原理</strong></span></p><p>很重要，对以后系统的数据库设计有帮助，站的层次高；</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>6，操作系统原理</strong></span></p><p>很重要，对以后技术提供，和层次有帮助；</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>7，计算机网络</strong></span></p><p>一般，学习一下；</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>8，软件工程</strong></span></p><p>非常重要，对整个软件开发体系的熟悉，直接可以影响到一个技术人员的职业生涯；</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong>9，计算机英语</strong></span></p><p>非常重要，有一些屌丝不重视，这个真的很重要，以后学习一些新技术的时候，有时候中文资源比较少，这时候学习，基本是直接看官方英文文档，假如英语不行，会很苦逼；</p><p><br/></p><p><strong><span style=\"color: rgb(255, 0, 0);\">10，英语</span></strong></p><p>非常重要，这个和上面的计算机英语有区别，计算机英语主要是一些专业词汇的中文专业翻译；而英语的话，是更加广泛的概念，最少要达到4级，最好6级。大学时候通读基本英文技术书籍，我推荐 Head First系列，以及Thining in Java；</p><p><br/></p><p>以上是我认为比较重要的10个课程。大家可以参考下。。可以有遗漏，大家可以评论留言。讨论交流。</p><p><br/></p><p><span style=\"color: rgb(255, 0, 0);\"><strong><br/></strong></span></p>',4,'大学','/resources/images/no_picture.jpg',2),(41,'大学里应该掌握的两个能力','  根据我的经验，我总结了下，大学里掌握以下两种，毕业的时候，用人单位比较喜欢；第一种能力，自学能力；所谓自学能力，顾名思义，就是自我学习知识，技术的能力，这种能力，人与人之间的差距有大，就像有的人毕业能拿13K，有的人只能拿3K；这种能力如何培养呢？根据我的经验，没有捷径，就是多读书，多思考，多实践，还有就','2016-02-02 13:14:53',554,12,'<p><img src=\"http://img.baidu.com/hi/jx2/j_0003.gif\"/> &nbsp;根据我的经验，我总结了下，大学里掌握以下两种，毕业的时候，用人单位比较喜欢；</p><p><br/></p><p><strong><span style=\"color: rgb(255, 0, 0);\">第一种能力，自学能力；</span></strong></p><p>所谓自学能力，顾名思义，就是自我学习知识，技术的能力，这种能力，人与人之间的差距有大，就像有的人毕业能拿13K，有的人只能拿3K；</p><p>这种能力如何培养呢？</p><p>根据我的经验，没有捷径，就是多读书，多思考，多实践，还有就是稍微多做点笔记，多总结；</p><p>很多人自学能力差，大多数原因不是笨，是读书少，见识少。读书少，基础差，想学点新东西都吃力，底子问题；</p><p>学习方法方面，我有些心得；</p><p>有些二货拿到书，直接从头读到尾，而且不允许自己有遗漏，这个是一种效率很底下的学习方法；</p><p>我的建议如下：</p><p>第一：拿到一本书，先自己想想，是不是自己需要的书，网上多查查，这本书好不好，书的人写的，作者有牛逼的，也有比较渣；</p><p>第二：决定看一本书的时候，一定要先看目录大纲，把目录好好看看，这本书讲啥，章节的划分；然后脑海里有大体映像之后，再看具体章节；说简单点，就是先总后分；</p><p>第三：学习的时候，一定要做笔记，写总结；这样才会有提高；最好是写到自己的博客里；</p><p><br/></p><p><br/></p><p><strong><span style=\"color: rgb(255, 0, 0);\">第二种能力，分析问题和解决问题的能力；</span></strong></p><p>第二种能力，很关键，尤其是搞开发的人，这种能力直接关系到自己的前途；</p><p>比如组长或者项目经理给你一个需求，让你开发出来，我举个具体的例子，组长让你开发一个功能，从数据库取数据库，生成word，并且导出；</p><p>有些人一看这功能，顿时晕了，自己没搞过，老师没教过。无从下手。顿时感觉人生好迷茫；</p><p>这时候就是体现一个人分析问题和解决问题的能力了；</p><p>正常分析过程是这样的，首先是查询数据，然后生成一个word，页面请求，返回word文件流；这里涉及到生成word，可以通过百度关键字 java生成word；</p><p>可以看到有很多的技术方案，这时候，你再百度具体的方案的比较，当然也可以论坛，群里交流。比如velocity freemarker；找到方案后，就是学习这个技术，</p><p>这个就是上面的自学能力的体现，如何快速入门掌握，当然，这种简单的技术，直接搞点demo，运行下，很容易上手；不需要看书；</p><p>如何这种培养能力呢？</p><p>没有捷径，就是要多读书，多学习，多思考，以及最重要，多实践，多搞点小项目，搞的时候会遇到很多问题，设计问题，调试问题，技术方案问题等等；</p><p>遇到问题，解决问题。能力就是这样慢慢提高的。不是什么一下子就变成大神，除非你在做梦；<br/></p><p><br/></p><p><img src=\"http://img.baidu.com/hi/jx2/j_0013.gif\"/>加油吧。骚年们！</p><p><br/></p>',4,'大学','/resources/images/no_picture.jpg',1),(42,'Mysql中文乱码问题解决','有些学员经常遇到 项目jdbc获取数据库数据，中文乱码；这里给出一些解决方案：第一种，修改Mysql数据库编码，改成utf-8，默认是latin1 （推荐）； 如图，找到mysql安装，点mysql实例配置  一直点next知道下面这个界面：记住，前面那个圈 一点要点。。下拉框选utf8继续next直到：写你','2016-02-02 13:29:33',332,6,'<p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">有些学员经常遇到 项目jdbc获取数据库数据，中文乱码；</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><br/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">这里给出一些解决方案：</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><br/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><span style=\"color: rgb(255, 0, 0);\">第一种，修改Mysql数据库编码，改成utf-8，默认是latin1 （推荐）；</span></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><img alt=\"QQ鍥剧墖20160202132103.png\" src=\"/static/userImages/20160202/1454390480343030776.png\" title=\"1454390480343030776.png\"/> 如图，找到mysql安装，点mysql实例配置</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><br/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><img src=\"/static/userImages/20160202/1454390537171022264.jpg\" alt=\"1454390537171022264.jpg\"/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">&nbsp;</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">&nbsp;一直点next知道下面这个界面：</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><img alt=\"QQ鍥剧墖20160202132310.png\" src=\"/static/userImages/20160202/1454390616812058607.png\" title=\"1454390616812058607.png\"/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">记住，前面那个圈 一点要点。。下拉框选utf8</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><br/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">继续next直到：</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><img alt=\"QQ鍥剧墖20160202132431.png\" src=\"/static/userImages/20160202/1454390692687028654.png\" title=\"1454390692687028654.png\"/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">写你原来的密码继续，然后继续Next:</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><img alt=\"QQ鍥剧墖20160202132517.png\" src=\"/static/userImages/20160202/1454390731515038389.png\" title=\"1454390731515038389.png\"/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">点击 执行</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><img alt=\"QQ鍥剧墖20160202132618.png\" src=\"/static/userImages/20160202/1454390793796097934.png\" title=\"1454390793796097934.png\"/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">这样就OK了；</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><br/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">这个执行完。记得要把原来导入的项目数据库删除，重新的导入下即可；<br/></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><br/><span style=\"color: rgb(255, 0, 0);\"></span></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\"><span style=\"color: rgb(255, 0, 0);\">第二种，修改jdbc请求url 指定编码 （不推荐）<br/></span></p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">在jdbc url后面 加上 ?useUnicode=true&amp;characterEncoding=UTF8 指定下编码；</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">假如是在xml配置文件里 要转义下 搞成 ?useUnicode=true&amp;amp;characterEncoding=UTF-8 ；</p><p style=\"margin: 5px 0px; color: rgb(0, 0, 0); font-family: sans-serif; font-size: 16px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 1; word-spacing: 0px; -webkit-text-stroke-width: 0px;\">比如在spring配置文件里：</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;配置数据源&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;dataSource&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;url&quot;&nbsp;value=&quot;jdbc:mysql://localhost:3306/db_blog?useUnicode=true&amp;amp;characterEncoding=UTF-8&quot;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;username&quot;&nbsp;value=&quot;root&quot;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;password&quot;&nbsp;value=&quot;123456&quot;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</pre><p><br/></p><p>推荐第一种；</p><p><br/></p>',2,'mysql 乱码','/resources/images/no_picture.jpg',1),(43,'解决Url带中文参数乱码问题',' 这里我来介绍下如何配置Tomcat 来解决Url带中文参数乱码问题；首先打开Tomcat安装目录，以Tomcat7为例，其他版本基本一样；打开conf文件打开server.xml大概在70行左右的位置 我们加一个属性 URIEncoding=\"UTF-8\"搞成这样即可。。这个是发布项目的时候，配置方式。下面','2016-01-22 13:38:39',381,5,'<p><img src=\"http://img.baidu.com/hi/jx2/j_0001.gif\"/> 这里我来介绍下如何配置Tomcat 来解决Url带中文参数乱码问题；</p><p><br/></p><p>首先打开Tomcat安装目录，以Tomcat7为例，其他版本基本一样；</p><p><img src=\"/static/userImages/20160202/1454391117593077429.jpg\" alt=\"1454391117593077429.jpg\"/></p><p><br/></p><p>打开conf文件</p><p><img src=\"/static/userImages/20160202/1454391166890014358.jpg\" alt=\"1454391166890014358.jpg\"/><br/></p><p><br/></p><p>打开server.xml</p><p><img src=\"/static/userImages/20160202/1454391299968024532.jpg\" alt=\"1454391299968024532.jpg\"/><br/></p><p><br/></p><p>大概在70行左右的位置 我们加一个属性 URIEncoding=&quot;UTF-8&quot;</p><p><br/></p><p><img src=\"/static/userImages/20160202/1454391361171014090.jpg\" alt=\"1454391361171014090.jpg\"/></p><p><br/></p><p>搞成这样即可。。这个是发布项目的时候，配置方式。</p><p><br/></p><p>下面介绍开发的时候，如何配置：</p><p>打开eclipse</p><p>找到server</p><p><img src=\"/static/userImages/20160202/1454391411687030232.jpg\" alt=\"1454391411687030232.jpg\"/><br/></p><p><br/></p><p>点开server.xml</p><p><img src=\"/static/userImages/20160202/1454391443968032571.jpg\" alt=\"1454391443968032571.jpg\"/><br/></p><p><br/></p><p>和刚才一样，加下 URIEncoding=&quot;UTF-8&quot; 这样就支持Url中文参数了；</p><p><br/></p><p>当然还有其他方法，比较麻烦。比如自己转码，过滤。这里就不介绍了。<br/></p>',3,'url中文参数','/resources/images/no_picture.jpg',1),(44,'人生需要奋斗','<p>今天很残酷，明天更残酷，后天很美好，但绝对大部分是死在明天晚上，所以每个人不要轻言放弃。--马云</p><p><img alt=\"1-1510121339113S.jpg\" src=\"/static/userImages/20160202/1454392975421022042.jpg\" title=\"','2016-02-02 14:05:40',428,22,'<p>&lt;p&gt;今天很残酷，明天更残酷，后天很美好，但绝对大部分是死在明天晚上，所以每个人不要轻言放弃。--马云&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;1-1510121339113S.jpg&quot; src=&quot;/static/userImages/20160202/1454392975421022042.jpg&quot; title=&quot;1454392975421022042.jpg&quot;/&gt;&lt;/p&gt;</p>',5,'人生 奋斗','/resources/images/no_picture.jpg',12),(45,'shiro介绍以及推荐视频教程','shiro是apache提供的强大而灵活的开源安全框架，它主要用来处理身份认证，授权，企业会话管理和加密。shiro功能：用户验证、用户执行访问权限控制、在任何环境下使用session API，如cs程序。可以使用多数据源如同时使用oracle、mysql。单点登录(sso)支持。remember me服务。','2016-02-02 17:00:30',549,27,'<p>shiro是apache提供的强大而灵活的开源安全框架，它主要用来处理身份认证，授权，企业会话管理和加密。</p><p>shiro功能：用户验证、用户执行访问权限控制、在任何环境下使用session API，如cs程序。可以使用多数据源如同时使用oracle、mysql。单点登录(sso)支持。remember me服务。</p><p><br/></p><p>推荐视频教程 一头扎进shiro&nbsp;</p><p>课程目录：<span class=\"Apple-tab-span\" style=\"white-space: pre;\">	</span><a href=\"http://www.java1234.com/zy032.html\" target=\"_blank\" title=\"http://www.java1234.com/zy032.html\">http://www.java1234.com/zy032.html</a><span class=\"Apple-tab-span\" style=\"white-space: pre;\">	</span></p><p>百度云打包下载： &nbsp;<a href=\"http://pan.baidu.com/s/1ntEifgt\" target=\"_blank\" title=\"http://pan.baidu.com/s/1ntEifgt\">http://pan.baidu.com/s/1ntEifgt</a></p>',7,'shiro java','/resources/images/no_picture.jpg',1),(47,'什么是webservice?','  webservice 有的人一看到这个，估计会认为这个是一种新技术，一种新框架。其实不是，严格的说，webservice是一种跨平台，跨语言的规范，用于不同平台，不同语言开发的应用之间的交互。  这里具体举个例子，比如在Windows Server服务器上有个C#.Net开发的应用A，在Linux上有个J','2016-02-03 16:07:31',452,15,'<p>&nbsp; webservice 有的人一看到这个，估计会认为这个是一种新技术，一种新框架。<br/></p><p>其实不是，严格的说，webservice是一种跨平台，跨语言的规范，用于不同平台，不同语言开发的应用之间的交互。</p><p><br/></p><p>&nbsp; 这里具体举个例子，比如在Windows Server服务器上有个C#.Net开发的应用A，在Linux上有个Java语言开发的应用B，</p><p>B应用要调用A应用，或者是互相调用。用于查看对方的业务数据。</p><p>&nbsp; 再举个例子，天气预报接口。无数的应用需要获取天气预报信息；这些应用可能是各种平台，各种技术实现；而气象局的项目，估计也就一两种，要对外提供天气预报信息，这个时候，如何解决呢？</p><p><br/></p><p>&nbsp; webservice就是出于以上类似需求而定义出来的规范；</p><p>&nbsp;&nbsp;</p><p>&nbsp; 开发人员一般就是在具体平台开发webservice接口，以及调用webservice接口；每种开发语言都有自己的webservice实现框架。比如Java 就有&nbsp;Apache Axis1、Apache Axis2、Codehaus XFire、Apache CXF、Apache Wink、Jboss &nbsp;RESTEasyd等等...</p><p><br/></p><p><img src=\"/static/userImages/20160203/1454486847949023678.jpg\" title=\"1454486847949023678.jpg\" alt=\"20131203094415-1061627437.jpg\"/></p><p><br/></p><p><br/></p><p>&nbsp;&nbsp;</p>',9,'webservice java','/resources/images/no_picture.jpg',1),(48,'百度云资源，是程序员们的发家致富一块肥肉','  百度云在前两年的“云大战”中，最终获胜，当年各种云盘，相互厮杀，有技术方面的，有公关方面的原因，最终还是百度云大获全胜；  百度云经过几年的发展，逐渐成熟，性能稳定。开始的时候是不考虑盈利的，无广告。一直花钱投入，立志把这个云技术项目做好。时间证明了一切，百度云是一个优秀的，用户量最大的，资源最多，并且处','2016-02-04 18:49:15',1933,24,'<p>&nbsp; 百度云在前两年的“云大战”中，最终获胜，当年各种云盘，相互厮杀，有技术方面的，有公关方面的原因，最终还是百度云大获全胜；</p><p>&nbsp; 百度云经过几年的发展，逐渐成熟，性能稳定。开始的时候是不考虑盈利的，无广告。一直花钱投入，立志把这个云技术项目做好。时间证明了一切，百度云是一个优秀的，用户量最大的，资源最多，</p><p>并且处理违法信息的手段都是成熟的。</p><p>&nbsp; 大家看了标题也许有疑问，“百度云资源，是程序员们的发家致富一块肥肉” 根本原因是百度云拥有海量的用户分享的资源， 但为什么是程序员的肥肉呢。据本人观察，中国至少有500家网站吃到百度云这块肥肉，一种一家就是我，<a href=\"http://pan.java1234.com/\" target=\"_blank\" title=\"http://pan.java1234.com/\">http://pan.java1234.com/</a></p><p>我这个项目，主要是利用谷歌自定义搜索，来搜索用户需要的资源。日IP 2万左右，但是钱赚得不多。</p><p>&nbsp;下面我来谈谈如何利用百度云来赚钱，这里只针对程序员，因为只有程序员有技术来实现。说简单点，就是百度云的海量资源，程序员们可以看作是海量的页面，可以拿过来，搞成自己的资源页面。这样自己搞的站点，就拥有了海量的页面，只要seo搞得还行，一天搞个几万个流量，甚至几十万流量都没问题。然后挂google广告，百度联盟广告，我看到过类似网站，成功申请到谷歌广告，百度联盟广告的。</p><p>&nbsp;这块蛋糕，以后肯定会被越来越多的程序员看重，并且分享。但是我个人觉得，这块蛋糕非常大，大得我估计能养活10万个程序员。<img src=\"http://img.baidu.com/hi/jx2/j_0005.gif\"/> 当然有些人觉得我吹牛逼，其实我说的还是保守的值。</p><p>&nbsp;下面我来分析下，如何来搞这个项目 要用到哪些技术，传统的php ,asp.net,jsp 都可以来实现这项目。我自己也去看了人家的实现，核心的是采集技术，怎么个采集法呢，不是随便瞎搞的，一条比较好的方法是先去采集百度云分享达人的帐号，然后挨个的采集他们的分享资源。就是搞这个项目，说实话，要花不少时间，就是在采集资源这块。我估计有不少程序员是全职搞这个项目的，我上次看到几个，根据流量和广告。我估计他们一个月至少有2，3万。流量很大。采集到数据后，然后就是显示，这个再简单不过了。作为程序员，如果连这个都不会，那只能称技术员了。</p><p>&nbsp;&nbsp;</p><p>&nbsp; 好了，今天就把这个牛逼蛋糕介绍到这里，希望大家看到我这个文章，假如技术上满足条件，可以试着业余先搞搞。或许你从此屌炸天了。</p><p><br/></p><p><img src=\"/static/userImages/20160204/1454582940339078791.jpg\" title=\"1454582940339078791.jpg\" alt=\"QQ鎴浘20160204184853.jpg\"/></p><p><br/></p><p><br/></p>',4,'百度云 赚钱','/resources/images/no_picture.jpg',3),(50,'使用Jsoup解析出html中的img元素','jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。博客项目有个需求。展示博客列表的时候，显示一些博客里的图片，增强用户体验；这里的话，有两种方案，第一种 是在后台处理，把','2016-02-14 12:52:43',306,7,'<p><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);\">jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span></p><p><img src=\"/static/userImages/20160214/1455425736515085353.jpg\" title=\"1455425736515085353.jpg\" alt=\"QQ鎴浘20160214125257.jpg\"/></p><p><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);\"><br/></span></p><p><span style=\"color: rgb(51, 51, 51); font-family: arial, 宋体, sans-serif; font-size: 14px; line-height: 24px; text-indent: 28px; background-color: rgb(255, 255, 255);\">博客项目有个需求。展示博客列表的时候，显示一些博客里的图片，增强用户体验；</span></p><p>这里的话，有两种方案，第一种 是在后台处理，把解析好的图片存集合里，然后转发到页面，遍历显示；还有一种是把博客内容送到页面，用Jquery处理。</p><p>我考虑了下。还是在后台处理好比较好，因为项目本身用到了 cnd加速，所以在前端处理反而影响效率。</p><p>在后端处理，可以使用Jsoup，很方便；</p><p><br/></p><p>Jsoup主页：<a href=\"http://jsoup.org/\" target=\"_blank\" title=\"http://jsoup.org/\">http://jsoup.org/</a></p><p><br/></p><p>maven地址：</p><pre class=\"brush:xml;toolbar:false\">&lt;dependency&gt;\n		&lt;groupId&gt;org.jsoup&lt;/groupId&gt;\n		&lt;artifactId&gt;jsoup&lt;/artifactId&gt;\n		&lt;version&gt;1.8.3&lt;/version&gt;\n	&lt;/dependency&gt;</pre><p><br/></p><p><br/></p><p>这里给下关键代码：</p><pre class=\"brush:java;toolbar:false\">for(Blog&nbsp;blog:blogList){\n			List&lt;String&gt;&nbsp;imagesList=blog.getImagesList();\n			String&nbsp;blogInfo=blog.getContent();\n			Document&nbsp;doc=Jsoup.parse(blogInfo);\n			Elements&nbsp;jpgs=doc.select(&quot;img[src$=.jpg]&quot;);&nbsp;//　查找扩展名是jpg的图片\n			for(int&nbsp;i=0;i&lt;jpgs.size();i++){\n				Element&nbsp;jpg=jpgs.get(i);\n				imagesList.add(jpg.toString());\n				if(i==2){\n					break;\n				}\n			}\n		}</pre><p><br/></p><p>主要涉及到一些选择器。不难。大家可以参考下官方文档。或者百度很容易上手。</p><p><br/></p>',10,'jsoup java','/resources/images/no_picture.jpg',1),(51,'使用CXF开发WebService服务器端接口','CXF作为java领域主流的WebService实现框架，Java程序员有必要掌握它。CXF主页：http://cxf.apache.org/简介：百度百科今天的话，主要是用CXF来开发下WebService服务器端接口，明天写下开发客户端接口；这里用Maven。首先建一个Maven的j2se项目；项目的jr','2016-02-14 20:46:04',308,1,'<p><br/>CXF作为java领域主流的WebService实现框架，Java程序员有必要掌握它。</p><p><br/></p><p>CXF主页：<a href=\"http://cxf.apache.org/\" target=\"_blank\" title=\"http://cxf.apache.org/\">http://cxf.apache.org/</a></p><p><br/></p><p>简介：<a href=\"http://baike.baidu.com/link?url=DSx84NVH4yZmYVYOiyFVucRScx5i1rXy5VH6N8VgLygZwkybqL1RVAISqgmWXt-pycDsWVTfydkOowd1ysGxGq\" target=\"_blank\" title=\"http://baike.baidu.com/link?url=DSx84NVH4yZmYVYOiyFVucRScx5i1rXy5VH6N8VgLygZwkybqL1RVAISqgmWXt-pycDsWVTfydkOowd1ysGxGq\">百度百科</a></p><p><br/></p><p>今天的话，主要是用CXF来开发下WebService服务器端接口，明天写下开发客户端接口；</p><p><br/></p><p>这里用Maven。<br/></p><p><br/></p><p>首先建一个Maven的j2se项目；<br/></p><p><img src=\"/static/userImages/20160214/1455452546687063197.jpg\" title=\"1455452546687063197.jpg\" alt=\"QQ鎴浘20160214201912.jpg\"/></p><p><br/></p><p>项目的jre用1.7，因为1.7有webservice的默认实现。不要用1.5 不然下面你用我的代码会有问题，用1.5的话，还需要另外加jar包，这里为了大家省事，要换成1.7;</p><p><img src=\"/static/userImages/20160214/1455452618468053349.jpg\" title=\"1455452618468053349.jpg\" alt=\"QQ鎴浘20160214201936.jpg\"/></p><p><br/></p><p><br/></p><p>根据规范，我们先建一个接口类：HelloWorld</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;javax.jws.WebService;\n\n@WebService\npublic&nbsp;interface&nbsp;HelloWorld&nbsp;{\n\n	public&nbsp;String&nbsp;say(String&nbsp;str);\n}</pre><p><br/></p><p>再建一个具体的实现类：HelloWorldImpl</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice.impl;\n\nimport&nbsp;javax.jws.WebService;\n\nimport&nbsp;com.java1234.webservice.HelloWorld;\n\n@WebService\npublic&nbsp;class&nbsp;HelloWorldImpl&nbsp;implements&nbsp;HelloWorld{\n\n	public&nbsp;String&nbsp;say(String&nbsp;str)&nbsp;{\n		return&nbsp;&quot;Hello&nbsp;&quot;+str;\n	}\n\n}</pre><p><br/></p><p>最后建一个发布服务的主类：Server<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\n\nimport&nbsp;javax.xml.ws.Endpoint;\n\nimport&nbsp;com.java1234.webservice.impl.HelloWorldImpl;\n\npublic&nbsp;class&nbsp;Server&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		System.out.println(&quot;web&nbsp;service&nbsp;start&quot;);&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld&nbsp;implementor&nbsp;=&nbsp;new&nbsp;HelloWorldImpl();&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;address&nbsp;=&nbsp;&quot;http://192.168.1.103/helloWorld&quot;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Endpoint.publish(address,&nbsp;implementor);&nbsp;&nbsp;//&nbsp;JDK实现\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;web&nbsp;service&nbsp;started&quot;);&nbsp;&nbsp;\n	}\n}</pre><p><br/></p><p>这里的Endpoint是Jdk自身实现的WebService。所以到这里我们不需要用到CXF的任何东西。</p><p>这里的address，写上自己的本机IP</p><p>我们运行下Server类：</p><p>运行效果如下：<br/></p><p><img src=\"/static/userImages/20160214/1455452954968056097.jpg\" title=\"1455452954968056097.jpg\" alt=\"QQ鎴浘20160214202633.jpg\"/></p><p><br/></p><p>我们在浏览器里访问：<a href=\"http://192.168.1.103/helloWorld?wsdl\" _src=\"http://192.168.1.103/helloWorld?wsdl\">http://192.168.1.103/helloWorld?wsdl</a> </p><p><br/></p><p>效果：<br/></p><p><img src=\"/static/userImages/20160214/1455453073062071044.jpg\" title=\"1455453073062071044.jpg\" alt=\"QQ鎴浘20160214202817.jpg\"/></p><p><br/></p><p>说明已经成功调用了webservice接口；</p><p><br/></p><p>这里的wsdl 是&nbsp;Web Services Description Language的缩写，是一个用来描述Web服务和说明如何与Web服务通信的XML语言。WSDL是Web Service的描述语言，用于描述Web Service的服务，接口绑定等，为用户提供详细的接口说明书。</p><p><br/></p><p>请求后得到的是一个xml规范文档。是一套规范，后面会具体介绍，任何语言平台技术都可以解析。</p><p><br/></p><p><br/></p><p><br/></p><p>下面我们介绍使用CXF来实现webservice接口：</p><p>我们先在pom.xml中加入：<br/></p><pre class=\"brush:xml;toolbar:false\">&lt;dependency&gt;\n		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n		&lt;artifactId&gt;cxf-core&lt;/artifactId&gt;\n		&lt;version&gt;3.1.5&lt;/version&gt;\n	&lt;/dependency&gt;\n	\n	&lt;dependency&gt;\n		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n		&lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;\n		&lt;version&gt;3.1.5&lt;/version&gt;\n	&lt;/dependency&gt;\n	\n	&lt;dependency&gt;\n		&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n		&lt;artifactId&gt;cxf-rt-transports-http-jetty&lt;/artifactId&gt;\n		&lt;version&gt;3.1.5&lt;/version&gt;\n	&lt;/dependency&gt;</pre><p><br/></p><p>这里要额外加入jetty，作为webservice发布的服务器。jetty是一个内嵌的web服务器；</p><p><br/></p><p><img src=\"/static/userImages/20160214/1455453479984038162.jpg\" title=\"1455453479984038162.jpg\" alt=\"QQ鎴浘20160214203514.jpg\"/></p><p><br/></p><p>我们把Server改下。换成CXF实现：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\n\nimport&nbsp;org.apache.cxf.jaxws.JaxWsServerFactoryBean;\n\nimport&nbsp;com.java1234.webservice.impl.HelloWorldImpl;\n\npublic&nbsp;class&nbsp;Server&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		System.out.println(&quot;web&nbsp;service&nbsp;start&quot;);&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld&nbsp;implementor&nbsp;=&nbsp;new&nbsp;HelloWorldImpl();&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;address&nbsp;=&nbsp;&quot;http://192.168.1.103/helloWorld&quot;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Endpoint.publish(address,&nbsp;implementor);&nbsp;&nbsp;//&nbsp;JDK实现\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JaxWsServerFactoryBean&nbsp;factoryBean&nbsp;=&nbsp;new&nbsp;JaxWsServerFactoryBean();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setAddress(address);&nbsp;//&nbsp;设置暴露地址\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setServiceClass(HelloWorld.class);&nbsp;//&nbsp;接口类\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setServiceBean(implementor);&nbsp;//&nbsp;设置实现类\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.create();		\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;web&nbsp;service&nbsp;started&quot;);&nbsp;&nbsp;\n	}\n}</pre><p><br/></p><p>运行效果和刚才一样，这里就不再重复；</p><p><br/></p><p>完整源码下载：<a href=\"http://pan.baidu.com/s/1jHwGLF4\" target=\"_blank\" title=\"http://pan.baidu.com/s/1jHwGLF4\">http://pan.baidu.com/s/1jHwGLF4</a> </p><p><br/></p>',9,'webservice cxf java','/resources/images/no_picture.jpg',1),(52,'使用CXF开发WebService客户端','前面一讲开发了webservice服务器端接口，今天的话，我们来开发webservice客户端，让大家来体验下过程；首先建一个Maven项目，项目名字，WS_Client；然后我们要用CXF给我们提供的工具wsdl2java 来根据请求的url生成客户端代码；wsdl2java工具在CXF开发包里；开发下载地','2016-02-15 21:06:30',324,7,'<p>前面一讲开发了webservice服务器端接口，今天的话，我们来开发webservice客户端，让大家来体验下过程；</p><p><br/></p><p>首先建一个Maven项目，项目名字，WS_Client；</p><p><img src=\"/static/userImages/20160215/1455539511890048174.jpg\" alt=\"1455539511890048174.jpg\"/><br/></p><p><br/></p><p>然后我们要用CXF给我们提供的工具wsdl2java 来根据请求的url生成客户端代码；</p><p><br/></p><p>wsdl2java工具在CXF开发包里；</p><p>开发下载地址：<a title=\"http://cxf.apache.org/download.html\" target=\"_blank\" href=\"http://cxf.apache.org/download.html\">http://cxf.apache.org/download.html</a></p><p><img alt=\"QQ鎴浘20160215203213.jpg\" src=\"/static/userImages/20160215/1455539700734093102.jpg\" title=\"1455539700734093102.jpg\" width=\"667\" height=\"264\" style=\"width: 667px; height: 264px;\"/></p><p><br/></p><p>下载二进制包，然后解压到D盘 <br/></p><p><img alt=\"QQ鎴浘20160215203317.jpg\" src=\"/static/userImages/20160215/1455539761187019902.jpg\" title=\"1455539761187019902.jpg\"/></p><p><br/></p><p>这里我们看到了wsdl2java命令；当然要用的话，还得配置Path。我们打开环境变量配置，加入路径 D:\\apache-cxf-3.1.5\\bin&nbsp; 可能你的和我不一样；</p><p><img src=\"/static/userImages/20160215/1455539844625087079.jpg\" alt=\"1455539844625087079.jpg\"/><br/></p><p><br/></p><p>现在我们要干的事是在我们项目里生成我们需要的webservice客户端代码，</p><p>我们找到项目的本地路径，</p><p><img alt=\"QQ鎴浘20160215203622.jpg\" src=\"/static/userImages/20160215/1455539950421090821.jpg\" title=\"1455539950421090821.jpg\"/></p><p><br/></p><p>我的地址是：D:\\workspace\\WS_Client\\src\\main\\java 你们的可能和我不一样：</p><p><br/></p><p>然后我们进入dos，进入上面的本地硬盘地址，然后执行命令：wsdl2java&nbsp;<a href=\"http://192.168.1.103/helloWorld?wsdl\" _src=\"http://192.168.1.103/helloWorld?wsdl\">http://192.168.1.103/helloWorld?wsdl</a> </p><p><img src=\"/static/userImages/20160215/1455542517421041234.jpg\" title=\"1455542517421041234.jpg\" alt=\"QQ鎴浘20160215211824.jpg\"/></p><p><br/></p><p>这样就完成了代码的生成，我们刷新下工程：</p><p><img src=\"/static/userImages/20160215/1455542567125006252.jpg\" title=\"1455542567125006252.jpg\" alt=\"QQ鎴浘20160215212002.jpg\"/></p><p><br/></p><p>最关键的代码是HelloWorldService.java 我们下面写请求主类要用到；</p><p><br/></p><p><br/></p><p>我们下面写下主类 Client ，自己建下：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\npublic&nbsp;class&nbsp;Client&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		HelloWorldService&nbsp;service=new&nbsp;HelloWorldService();\n		HelloWorld&nbsp;helloWorld=service.getHelloWorldPort();\n		System.out.println(helloWorld.say(&quot;java1234_小锋&quot;));\n	}\n}</pre><p><br/></p><p>运行如下：</p><p><img src=\"/static/userImages/20160215/1455542695984058850.jpg\" title=\"1455542695984058850.jpg\" alt=\"QQ鎴浘20160215212217.jpg\"/></p><p><br/></p><p>说明我们成功调用了webservice服务器端的接口。</p><p><br/></p><p>完整代码：<a href=\"http://pan.baidu.com/s/1gebOAR5\" target=\"_blank\" title=\"http://pan.baidu.com/s/1gebOAR5\">http://pan.baidu.com/s/1gebOAR5</a></p>',9,'webservice cxf','/resources/images/no_picture.jpg',1),(53,'CXF处理JavaBean以及复合类型','前面讲的是处理简单类型，今天这里来讲下CXF处理JavaBean以及复合类型，比如集合；这里实例是客户端传一个JavaBean，服务器端返回集合类型；在原来的项目实例基础上，我们先创建一个实体类User:package com.java1234.entity;/** * 用户实体类 * @author Adm','2016-02-18 10:31:19',202,8,'<p>前面讲的是处理简单类型，今天这里来讲下CXF处理JavaBean以及复合类型，比如集合；</p><p><br/></p><p>这里实例是客户端传一个JavaBean，服务器端返回集合类型；</p><p><br/></p><p>在原来的项目实例基础上，我们先创建一个实体类User:<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.entity;\n\n/**\n&nbsp;*&nbsp;用户实体类\n&nbsp;*&nbsp;@author&nbsp;Administrator\n&nbsp;*\n&nbsp;*/\npublic&nbsp;class&nbsp;User&nbsp;{\n\n	private&nbsp;Integer&nbsp;id;&nbsp;//&nbsp;编号\n	private&nbsp;String&nbsp;userName;&nbsp;//&nbsp;用户名\n	private&nbsp;String&nbsp;password;&nbsp;//&nbsp;密码\n	\n	public&nbsp;Integer&nbsp;getId()&nbsp;{\n		return&nbsp;id;\n	}\n	public&nbsp;void&nbsp;setId(Integer&nbsp;id)&nbsp;{\n		this.id&nbsp;=&nbsp;id;\n	}\n	public&nbsp;String&nbsp;getUserName()&nbsp;{\n		return&nbsp;userName;\n	}\n	public&nbsp;void&nbsp;setUserName(String&nbsp;userName)&nbsp;{\n		this.userName&nbsp;=&nbsp;userName;\n	}\n	public&nbsp;String&nbsp;getPassword()&nbsp;{\n		return&nbsp;password;\n	}\n	public&nbsp;void&nbsp;setPassword(String&nbsp;password)&nbsp;{\n		this.password&nbsp;=&nbsp;password;\n	}\n	\n	\n}</pre><p><br/></p><p>再创建一个Role实体类：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.entity;\n\n/**\n&nbsp;*&nbsp;角色实体\n&nbsp;*&nbsp;@author&nbsp;Administrator\n&nbsp;*\n&nbsp;*/\npublic&nbsp;class&nbsp;Role&nbsp;{\n\n	private&nbsp;Integer&nbsp;id;&nbsp;//&nbsp;编号\n	private&nbsp;String&nbsp;roleName;&nbsp;//&nbsp;角色名称\n	\n	\n	\n	public&nbsp;Role()&nbsp;{\n		super();\n		//&nbsp;TODO&nbsp;Auto-generated&nbsp;constructor&nbsp;stub\n	}\n	\n	\n	\n	public&nbsp;Role(Integer&nbsp;id,&nbsp;String&nbsp;roleName)&nbsp;{\n		super();\n		this.id&nbsp;=&nbsp;id;\n		this.roleName&nbsp;=&nbsp;roleName;\n	}\n\n\n\n	public&nbsp;Integer&nbsp;getId()&nbsp;{\n		return&nbsp;id;\n	}\n	public&nbsp;void&nbsp;setId(Integer&nbsp;id)&nbsp;{\n		this.id&nbsp;=&nbsp;id;\n	}\n	public&nbsp;String&nbsp;getRoleName()&nbsp;{\n		return&nbsp;roleName;\n	}\n	public&nbsp;void&nbsp;setRoleName(String&nbsp;roleName)&nbsp;{\n		this.roleName&nbsp;=&nbsp;roleName;\n	}\n	\n	\n}</pre><p><br/></p><p><br/></p><p>然后HelloWorld再加一个接口方法getRoleByUser，通过用户查找角色：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;java.util.List;\n\nimport&nbsp;javax.jws.WebService;\n\nimport&nbsp;com.java1234.entity.Role;\nimport&nbsp;com.java1234.entity.User;\n\n@WebService\npublic&nbsp;interface&nbsp;HelloWorld&nbsp;{\n\n	public&nbsp;String&nbsp;say(String&nbsp;str);\n	\n	public&nbsp;List&lt;Role&gt;&nbsp;getRoleByUser(User&nbsp;user);\n}</pre><p><br/></p><p><br/></p><p>然后HelloWorld接口实现类 HelloWorldImpl写下新增的方法的具体实现，我们这里写死，模拟下即可：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice.impl;\n\nimport&nbsp;java.util.ArrayList;\nimport&nbsp;java.util.List;\n\nimport&nbsp;javax.jws.WebService;\n\nimport&nbsp;com.java1234.entity.Role;\nimport&nbsp;com.java1234.entity.User;\nimport&nbsp;com.java1234.webservice.HelloWorld;\n\n@WebService\npublic&nbsp;class&nbsp;HelloWorldImpl&nbsp;implements&nbsp;HelloWorld{\n\n	public&nbsp;String&nbsp;say(String&nbsp;str)&nbsp;{\n		return&nbsp;&quot;Hello&nbsp;&quot;+str;\n	}\n\n	public&nbsp;List&lt;Role&gt;&nbsp;getRoleByUser(User&nbsp;user)&nbsp;{\n		List&lt;Role&gt;&nbsp;roleList=new&nbsp;ArrayList&lt;Role&gt;();\n		//&nbsp;模拟&nbsp;直接写死\n		if(user!=null){\n			if(user.getUserName().equals(&quot;java1234&quot;)&nbsp;&amp;&amp;&nbsp;user.getPassword().equals(&quot;123456&quot;)){\n				roleList.add(new&nbsp;Role(1,&quot;技术总监&quot;));\n				roleList.add(new&nbsp;Role(2,&quot;架构师&quot;));\n			}else&nbsp;if(user.getUserName().equals(&quot;jack&quot;)&nbsp;&amp;&amp;&nbsp;user.getPassword().equals(&quot;123456&quot;)){\n				roleList.add(new&nbsp;Role(3,&quot;程序员&quot;));\n			}\n			return&nbsp;roleList;\n		}else{\n			return&nbsp;null;			\n		}\n		\n	}\n	\n	\n\n}</pre><p><br/></p><p>服务端其他地方不用动；<br/></p><p><br/></p><p>下面我们来处理下客户端，和前面讲的一样。我们用wsdl2java工具重新生成代码，这里就不再讲；</p><p><br/></p><p><img src=\"/static/userImages/20160218/1455762437448028677.jpg\" title=\"1455762437448028677.jpg\" alt=\"QQ鎴浘20160218103035.jpg\"/></p><p><br/></p><p>这里我看到，实体类，以及接口实现，代码都生成了。</p><p><br/></p><p>我们改下Client类：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;java.util.List;\n\npublic&nbsp;class&nbsp;Client&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		HelloWorldService&nbsp;service=new&nbsp;HelloWorldService();\n		HelloWorld&nbsp;helloWorld=service.getHelloWorldPort();\n		//System.out.println(helloWorld.say(&quot;java1234&quot;));\n		User&nbsp;user=new&nbsp;User();\n		user.setUserName(&quot;jack&quot;);\n		user.setPassword(&quot;123456&quot;);\n		List&lt;Role&gt;&nbsp;roleList=helloWorld.getRoleByUser(user);\n		for(Role&nbsp;role:roleList){\n			System.out.println(role.getId()+&quot;,&quot;+role.getRoleName());\n		}\n	}\n}</pre><p><br/></p><p>运行截图：<br/></p><p><img src=\"/static/userImages/20160218/1455762521698070806.jpg\" title=\"1455762521698070806.jpg\" alt=\"QQ鎴浘20160218103159.jpg\"/></p><p><br/></p><p>完整代码：<a href=\"http://pan.baidu.com/s/1c1drMYO\" target=\"_blank\" title=\"http://pan.baidu.com/s/1c1drMYO\">http://pan.baidu.com/s/1c1drMYO</a></p><p><br/></p>',9,'webservice cxf','/resources/images/no_picture.jpg',1),(54,'webservice执行过程深入理解','前面我们搞了1，2个DEMO，基本对webservice服务发布，调用 ，执行 有一定的了解。今天的话，我们再系统的梳理下webservice执行过程。首先我们在webservice服务器端开发webservice接口，然后发布webservice；然后我们通过一个Url调用webservice接口，比如发布','2016-02-19 20:18:54',286,1,'<p>前面我们搞了1，2个DEMO，基本对webservice服务发布，调用 ，执行 有一定的了解。</p><p>今天的话，我们再系统的梳理下webservice执行过程。</p><p><br/></p><p>首先我们在webservice服务器端开发webservice接口，然后发布webservice；</p><p><br/></p><p>然后我们通过一个Url调用webservice接口，比如发布的时候 ，url是&nbsp;http://192.168.1.103/helloWorld</p><p><br/></p><p>那我们请求的url就是&nbsp;http://192.168.1.103/helloWorld?wsdl &nbsp;</p><p><br/></p><p>我们在浏览器里输入，运行如下：</p><p><img src=\"/static/userImages/20160219/1455883676261078945.jpg\" title=\"1455883676261078945.jpg\" alt=\"QQ鎴浘20160219201122.jpg\"/></p><p><br/></p><p>这一大串xml标记，其实就是wsdl （Web Services Description Language） 也就是Web Service描述语言，描述服务器端定义的webservice接口的相关信息，</p><p>当然我们不用花时间去学习这东西，毕竟这东西是一套规范，但是我们仔细观察，猜测，也能分析出一些猫腻来，这里wsdl:types就是定义了一些变量，wsdl:message相当于定义方法，</p><p>wsdl:portType相当与调用与返回，下面的话，就是一些操作。这东西不必要去研究细节，搞这东西会晕死的。有工具给我处理。我们角度要站得高。</p><p><br/></p><p>客户端通过这个url请求，获得wsdl规范的xml文档片段信息，然后这里又涉及到一个新的概念SOAP（Simple Object Access Protocol）即简单对象访问协议，我们通过这个协议，来实现客户端，服务器端消息交互，SOAP使用XML消息调用远程方法；当然交互的媒介就是xml，具体交互内容根据wsdl文档描述来。</p><p><br/></p><p>这个就是大体的一个webservie执行过程。<img src=\"http://img.baidu.com/hi/jx2/j_0013.gif\"/> 当然，我作为一个开发者，我觉得一般的应用，Ajax跨域调用，以JSON作为交互媒介也不错。当然也要根据具体情况来。比如有大量的对象，集合类型，webservice还是有他的强项的。</p><p><br/></p><p><br/></p><p><br/></p>',9,'webservice cxf','/resources/images/no_picture.jpg',1),(56,'cxf处理一些Map等复杂类型','前面讲的一些都是简单类型,cxf都支持。但是有些复杂类型，cxf是不支持，比如常用的Map类型；下面我们在前面的实例基础上在加一个方法，比如我们现在有个需求，获取所有用用户以及对应的每个用户所有角色信息；服务器端：HelloWorld接口加方法：/**	 * 获取所有用户以及对应的角色	 * @return	','2016-02-22 17:46:30',185,0,'<p>前面讲的一些都是简单类型,cxf都支持。但是有些复杂类型，cxf是不支持，比如常用的Map类型；<br/></p><p><br/></p><p>下面我们在前面的实例基础上在加一个方法，比如我们现在有个需求，获取所有用用户以及对应的每个用户所有角色信息；</p><p><br/></p><p>服务器端：<br/></p><p><br/></p><p>HelloWorld接口加方法：</p><pre class=\"brush:java;toolbar:false\">/**\n	&nbsp;*&nbsp;获取所有用户以及对应的角色\n	&nbsp;*&nbsp;@return\n	&nbsp;*/\n	public&nbsp;Map&lt;String,List&lt;Role&gt;&gt;&nbsp;getRoles();</pre><p><br/></p><p>HelloWorldImpl实现类加方法实现：<br/></p><pre class=\"brush:java;toolbar:false\">public&nbsp;Map&lt;String,&nbsp;List&lt;Role&gt;&gt;&nbsp;getRoles()&nbsp;{\n		Map&lt;String,List&lt;Role&gt;&gt;&nbsp;map=new&nbsp;HashMap&lt;String,List&lt;Role&gt;&gt;();\n		List&lt;Role&gt;&nbsp;roleList1=new&nbsp;ArrayList&lt;Role&gt;();\n		roleList1.add(new&nbsp;Role(1,&quot;技术总监&quot;));\n		roleList1.add(new&nbsp;Role(2,&quot;架构师&quot;));\n		map.put(&quot;java1234&quot;,&nbsp;roleList1);\n		List&lt;Role&gt;&nbsp;roleList2=new&nbsp;ArrayList&lt;Role&gt;();\n		roleList2.add(new&nbsp;Role(1,&quot;程序员&quot;));\n		map.put(&quot;jack&quot;,&nbsp;roleList2);\n		return&nbsp;map;\n	}</pre><p><br/></p><p>然后我们启动Server类：发现报错：</p><p><img src=\"/static/userImages/20160222/1456134575421042758.jpg\" title=\"1456134575421042758.jpg\" alt=\"QQ鎴浘20160222175231.jpg\"/></p><p>这个报错信息说，不支持该类型；</p><p><br/></p><p>这里我们有好几种解决方案，这里我们用最常用的一种，使用适配器，把cxf不能接受的类型通过适配器，转能接受的类型。</p><p><br/></p><p>我们使用@XmlJavaTypeAdapter注解，加在接口定义上，完整接口代码如下：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;java.util.List;\nimport&nbsp;java.util.Map;\n\nimport&nbsp;javax.jws.WebService;\nimport&nbsp;javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\nimport&nbsp;com.java1234.adapter.MapAdapter;\nimport&nbsp;com.java1234.entity.Role;\nimport&nbsp;com.java1234.entity.User;\n\n@WebService\npublic&nbsp;interface&nbsp;HelloWorld&nbsp;{\n\n	public&nbsp;String&nbsp;say(String&nbsp;str);\n	\n	public&nbsp;List&lt;Role&gt;&nbsp;getRoleByUser(User&nbsp;user);\n	\n	/**\n	&nbsp;*&nbsp;获取所有用户以及对应的角色\n	&nbsp;*&nbsp;@return\n	&nbsp;*/\n	@XmlJavaTypeAdapter(MapAdapter.class)\n	public&nbsp;Map&lt;String,List&lt;Role&gt;&gt;&nbsp;getRoles();\n}</pre><p><br/></p><p>这里参数需要一个实现了XmlAdapter类的适配器类；</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.adapter;\n\nimport&nbsp;java.util.HashMap;\nimport&nbsp;java.util.List;\nimport&nbsp;java.util.Map;\n\nimport&nbsp;javax.xml.bind.annotation.adapters.XmlAdapter;\n\nimport&nbsp;com.java1234.entity.Role;\n\n/**\n&nbsp;*&nbsp;Map适配器\n&nbsp;*&nbsp;@author&nbsp;Administrator\n&nbsp;*\n&nbsp;*/\npublic&nbsp;class&nbsp;MapAdapter&nbsp;extends&nbsp;XmlAdapter&lt;MyRole[],&nbsp;Map&lt;String,List&lt;Role&gt;&gt;&gt;{\n\n	/**\n	&nbsp;*&nbsp;适配转换&nbsp;&nbsp;MyRole[]&nbsp;-&gt;&nbsp;Map&lt;String,&nbsp;List&lt;Role&gt;&gt;\n	&nbsp;*/\n	@Override\n	public&nbsp;Map&lt;String,&nbsp;List&lt;Role&gt;&gt;&nbsp;unmarshal(MyRole[]&nbsp;v)&nbsp;throws&nbsp;Exception&nbsp;{\n		Map&lt;String,&nbsp;List&lt;Role&gt;&gt;&nbsp;map=new&nbsp;HashMap&lt;String,List&lt;Role&gt;&gt;();\n		for(int&nbsp;i=0;i&lt;v.length;i++){\n			MyRole&nbsp;r=v[i];\n			map.put(r.getKey(),&nbsp;r.getValue());\n		}\n		return&nbsp;map;\n	}\n\n	/**\n	&nbsp;*&nbsp;适配转换&nbsp;&nbsp;Map&lt;String,&nbsp;List&lt;Role&gt;&gt;&nbsp;-&gt;&nbsp;MyRole[]\n	&nbsp;*/\n	@Override\n	public&nbsp;MyRole[]&nbsp;marshal(Map&lt;String,&nbsp;List&lt;Role&gt;&gt;&nbsp;v)&nbsp;throws&nbsp;Exception&nbsp;{\n		MyRole[]&nbsp;roles=new&nbsp;MyRole[v.size()];\n		int&nbsp;i=0;\n		for(String&nbsp;key:v.keySet()){\n			roles[i]=new&nbsp;MyRole();\n			roles[i].setKey(key);\n			roles[i].setValue(v.get(key));\n			i++;\n		}\n		return&nbsp;roles;\n	}\n\n	\n	\n\n}</pre><p>这里的话XmlAdapter要加两个参数，XmlAdapter&lt;ValueType,BoundType&gt;&nbsp;</p><p>ValueType是cxf能接收的类型，这里我用了数组；</p><p>BoundType是cxf不能接受的类型，也就是我例子里的需求的Map类型；</p><p><br/></p><p>这里大家会看到，还有一个MyRole自定义类型，key:value。我们搞成两个属性，具体实现如下：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.adapter;\n\nimport&nbsp;java.util.List;\n\nimport&nbsp;com.java1234.entity.Role;\n\n/**\n&nbsp;*&nbsp;自定义实体&nbsp;cxf能接受\n&nbsp;*&nbsp;@author&nbsp;Administrator\n&nbsp;*\n&nbsp;*/\npublic&nbsp;class&nbsp;MyRole&nbsp;{\n\n	private&nbsp;String&nbsp;key;\n	private&nbsp;List&lt;Role&gt;&nbsp;value;\n	\n	public&nbsp;String&nbsp;getKey()&nbsp;{\n		return&nbsp;key;\n	}\n	public&nbsp;void&nbsp;setKey(String&nbsp;key)&nbsp;{\n		this.key&nbsp;=&nbsp;key;\n	}\n	public&nbsp;List&lt;Role&gt;&nbsp;getValue()&nbsp;{\n		return&nbsp;value;\n	}\n	public&nbsp;void&nbsp;setValue(List&lt;Role&gt;&nbsp;value)&nbsp;{\n		this.value&nbsp;=&nbsp;value;\n	}\n	\n	\n}</pre><p><br/></p><p>OK 这样就行了。我们运行Server类，发布webservice接口：</p><p><img src=\"/static/userImages/20160222/1456134226937065109.jpg\" title=\"1456134226937065109.jpg\" alt=\"QQ鎴浘20160222174638.jpg\"/></p><p><br/></p><p><br/></p><p>然后就到了webservice客户端，我们用wsdl2java工具生成下最新代码，具体过程前面讲过，这里不重复讲：</p><p>生成代码如下：</p><p><img src=\"/static/userImages/20160222/1456134312484067804.jpg\" title=\"1456134312484067804.jpg\" alt=\"QQ鎴浘20160222174813.jpg\"/></p><p><br/></p><p>我们修改下Client类：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;java.util.List;\n\npublic&nbsp;class&nbsp;Client&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		HelloWorldService&nbsp;service=new&nbsp;HelloWorldService();\n		HelloWorld&nbsp;helloWorld=service.getHelloWorldPort();\n		//System.out.println(helloWorld.say(&quot;java1234&quot;));\n		/*User&nbsp;user=new&nbsp;User();\n		user.setUserName(&quot;jack&quot;);\n		user.setPassword(&quot;123456&quot;);\n		List&lt;Role&gt;&nbsp;roleList=helloWorld.getRoleByUser(user);\n		for(Role&nbsp;role:roleList){\n			System.out.println(role.getId()+&quot;,&quot;+role.getRoleName());\n		}*/\n		MyRoleArray&nbsp;array=helloWorld.getRoles();\n		List&lt;MyRole&gt;&nbsp;roleList=array.item;\n		for(int&nbsp;i=0;i&lt;roleList.size();i++){\n			MyRole&nbsp;my=roleList.get(i);\n			System.out.print(my.key+&quot;:&quot;);\n			for(Role&nbsp;r:my.value){\n				System.out.print(r.getId()+&quot;,&quot;+r.getRoleName()+&quot;&nbsp;&quot;);\n			}\n			System.out.println();\n		}\n	}\n}</pre><p><br/></p><p>运行下:</p><p><img src=\"/static/userImages/20160222/1456134352140052359.jpg\" title=\"1456134352140052359.jpg\" alt=\"QQ鎴浘20160222174853.jpg\"/></p><p><br/></p><p>OK,这样就实现了复杂类型的调用；</p><p><br/></p><p>完整代码：<a href=\"http://pan.baidu.com/s/1kTUseOZ\" target=\"_blank\" title=\"http://pan.baidu.com/s/1kTUseOZ\">http://pan.baidu.com/s/1kTUseOZ</a></p>',9,'webservice cxf','/resources/images/no_picture.jpg',1),(57,'hibernate无法自动建表的原因','假如启动hibernate，并且数据库已经建好；假如启动的时候报错，项目启动失败，大多数情况是不能自动建表，可以根据报错信息，解决问题；这里我要说的是另外一种情况，假如项目启动没有报错，一切正常，但是数据库依然没有自动建表，这里很有可能的原因是数据库驱动版本过低的原因；大家可以把搞个新点的数据库驱动版本即可；','2016-02-24 14:10:41',126,2,'<p>假如启动hibernate，并且数据库已经建好；<br/></p><p>假如启动的时候报错，项目启动失败，大多数情况是不能自动建表，可以根据报错信息，解决问题；</p><p>这里我要说的是另外一种情况，假如项目启动没有报错，一切正常，但是数据库依然没有自动建表，这里很有可能的原因是数据库驱动版本过低的原因；</p><p>大家可以把搞个新点的数据库驱动版本即可；</p>',11,'hibernate jdbc','/resources/images/no_picture.jpg',1),(58,'开发环境如何运行web项目不带项目名字','比如有个项目Blog；默认情况下，我们发布到Tomcat，要运行项目。浏览器地址是这样的： http://localhost:8080/Blog但是某些情况，我们只有一个项目，而且需要直接IP加端口访问，这个时候，我们可以通过配置Eclipse里的Servers；比如Tomcat作为Web服务器，Eclips','2016-02-24 18:42:23',227,5,'<p>比如有个项目Blog；</p><p><img src=\"/static/userImages/20160224/1456309931725025871.jpg\" alt=\"1456309931725025871.jpg\"/></p><p><br/></p><p>默认情况下，我们发布到Tomcat，要运行项目。浏览器地址是这样的： http://localhost:8080/Blog<br/></p><p><br/></p><p>但是某些情况，我们只有一个项目，而且需要直接IP加端口访问，这个时候，我们可以通过配置Eclipse里的Servers；</p><p>比如Tomcat作为Web服务器，Eclipse Package Explorer 视图下有 ：</p><p><br/></p><p><img src=\"/static/userImages/20160224/1456310119928082641.jpg\" alt=\"1456310119928082641.jpg\"/></p><p><br/></p><p>我们打开server.xml，我们在最下方可以看到一个Context节点：</p><p>&lt;Context docBase=&quot;Blog&quot; path=&quot;/Blog&quot; reloadable=&quot;true&quot; source=&quot;org.eclipse.jst.j2ee.server:Blog&quot;/&gt;&lt;/Host&gt;</p><p><br/></p><p>我们只需要把 path属性值改下，改成path=&quot;/&quot; 即可；</p><p><br/></p><p>改成 保存下； 我们就可以用 http://localhost:8080/ 来访问项目； 当然这里的端口也是可以修改的；</p><p><br/></p><p>我们找到Connector节点：&lt;Connector URIEncoding=&quot;UTF-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</p><p>我们修改port即可 改成80 这样就不需要加端口了；（发布到互联网的项目，我们都要改成80端口）;</p><p>这里的 URIEncoding=&quot;UTF-8&quot;是我自己加的。主要解决url带中文参数问题，具体请看 <a _src=\"http://blog.java1234.com/blog/articles/43.html\" href=\"http://blog.java1234.com/blog/articles/43.html\">http://blog.java1234.com/blog/articles/43.html</a><br/></p><p><br/> </p><p><br/> </p>',3,'tomcat','/resources/images/no_picture.jpg',1),(59,'如何发布Web项目到互联网','比如我们有个项目想要发布到互联网上，我们首先需要购买域名以及主机，主机的话，推荐云主机（本人推荐西部数码或者阿里云），性能好；我们先在云主机上搭建环境，比如Mysql，Jdk，Tomcat；然后我们把自己开发的项目打包，打成War包；具体操作；右击项目-> Export然后点击 Next ;选择Browse，','2016-02-24 18:55:40',484,10,'<p>比如我们有个项目想要发布到互联网上，我们首先需要购买域名以及主机，主机的话，推荐云主机（本人推荐西部数码或者阿里云），性能好；</p><p>我们先在云主机上搭建环境，比如Mysql，Jdk，Tomcat；</p><p>然后我们把自己开发的项目打包，打成War包；</p><p>具体操作；右击项目-&gt; Export</p><p><img alt=\"QQ鎴浘20160224184605.jpg\" src=\"/static/userImages/20160224/1456310792100080598.jpg\" title=\"1456310792100080598.jpg\"/></p><p><br/></p><p>然后点击 Next ;</p><p><img alt=\"QQ鎴浘20160224184644.jpg\" src=\"/static/userImages/20160224/1456310837522027928.jpg\" title=\"1456310837522027928.jpg\"/></p><p><br/></p><p>选择Browse，我们随便选个地方&nbsp; 然后点击Finish即可；</p><p>这样我们就可以生成一个War包了；</p><p>我们把War包传到主机上去，放到Tomcat的webapps下，启动tomcat的startup.bat，会自动解压项目；</p><p>到了这里，还不够。我们只能通过 <a _src=\"http://外网IP:8080/项目名称访问；\" href=\"http://外网IP:8080/项目名称访问；\">http://外网IP:8080/项目名称访问；</a><br/></p><p>我们现在要干两个事情，第一个是去掉端口，第二个是去掉项目名称</p><p>我们找到tomcat安装包下的conf文件夹下的server.xml文件；</p><p><img alt=\"QQ鎴浘20160224185006.jpg\" src=\"/static/userImages/20160224/1456311055147010296.jpg\" title=\"1456311055147010296.jpg\"/></p><p>找到Connector节点；</p><pre class=\"brush:xml;toolbar:false\">&lt;Connector&nbsp;port=&quot;8080&quot;&nbsp;protocol=&quot;HTTP/1.1&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectionTimeout=&quot;20000&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redirectPort=&quot;8443&quot;&nbsp;/&gt;</pre><p>我们把port=&quot;8080&quot;改成80端口即可，这样我们就可以不用端口了。不加端口就是默认访问80端口；</p><p><br/></p><p>我们在最后 找到Host节点：</p><pre class=\"brush:xml;toolbar:false\">&lt;Host&nbsp;name=&quot;localhost&quot;&nbsp;&nbsp;appBase=&quot;webapps&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unpackWARs=&quot;true&quot;&nbsp;autoDeploy=&quot;true&quot;&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;SingleSignOn&nbsp;valve,&nbsp;share&nbsp;authentication&nbsp;between&nbsp;web&nbsp;applications\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Access&nbsp;log&nbsp;processes&nbsp;all&nbsp;example.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Note:&nbsp;The&nbsp;pattern&nbsp;used&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;using&nbsp;pattern=&quot;common&quot;&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.valves.AccessLogValve&quot;&nbsp;directory=&quot;logs&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix=&quot;localhost_access_log.&quot;&nbsp;suffix=&quot;.txt&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern=&quot;%h&nbsp;%l&nbsp;%u&nbsp;%t&nbsp;&amp;quot;%r&amp;quot;&nbsp;%s&nbsp;%b&quot;&nbsp;/&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Host&gt;</pre><p></p><p>我们在里面加一个节点：</p><p>&lt;Context path=&quot;&quot; docBase=&quot;C:\\apache-tomcat-7.0.11-windows-x86\\apache-tomcat-7.0.11\\webapps\\Blog&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; /&gt;&nbsp;&nbsp; <br/></p><pre class=\"brush:xml;toolbar:false\">&lt;Host&nbsp;name=&quot;localhost&quot;&nbsp;&nbsp;appBase=&quot;webapps&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unpackWARs=&quot;true&quot;&nbsp;autoDeploy=&quot;true&quot;&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;SingleSignOn&nbsp;valve,&nbsp;share&nbsp;authentication&nbsp;between&nbsp;web&nbsp;applications\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot;&nbsp;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Context&nbsp;path=&quot;&quot;&nbsp;docBase=&quot;C:\\apache-tomcat-7.0.11-windows-x86\\apache-tomcat-7.0.11\\webapps\\BaiduYun&quot;&nbsp;debug=&quot;0&quot;&nbsp;reloadable=&quot;true&quot;&nbsp;/&gt;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;Access&nbsp;log&nbsp;processes&nbsp;all&nbsp;example.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Documentation&nbsp;at:&nbsp;/docs/config/valve.html\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Note:&nbsp;The&nbsp;pattern&nbsp;used&nbsp;is&nbsp;equivalent&nbsp;to&nbsp;using&nbsp;pattern=&quot;common&quot;&nbsp;--&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;Valve&nbsp;className=&quot;org.apache.catalina.valves.AccessLogValve&quot;&nbsp;directory=&quot;logs&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix=&quot;localhost_access_log.&quot;&nbsp;suffix=&quot;.txt&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pattern=&quot;%h&nbsp;%l&nbsp;%u&nbsp;%t&nbsp;&amp;quot;%r&amp;quot;&nbsp;%s&nbsp;%b&quot;&nbsp;resolveHosts=&quot;false&quot;/&gt;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/Host&gt;</pre><p></p><p>这里的docBase要给成你的项目所在你服务器的本机的绝对路径；</p><p>其他不用变；</p><p><br/></p><p>项目数据库脚本的话自己导入下即可；这样就完整了项目部署；</p><p>我们可以直接通过外网IP直接访问项目；</p><p>域名解析下服务器外网IP。我们就可以通过域名访问了；</p><p><br/></p>',3,'tomcat','/resources/images/no_picture.jpg',1),(60,'如何找到Web项目编译好的class文件','在某些情况，我们需要获取部分Eclipse里的项目编译好的class文件。这里我举个例子，比如我有一个web项目，已经发布到了互联网。但是有个小改动，我们只改了一个java类，这时候。我们不需要把项目重新打War包了，直接找到那个修改好的新产生的class文件，送到服务器，直接替换下原来的class文件即可，','2016-02-25 08:10:32',244,8,'<p>在某些情况，我们需要获取部分Eclipse里的项目编译好的class文件。</p><p>这里我举个例子，比如我有一个web项目，已经发布到了互联网。但是有个小改动，我们只改了一个java类，这时候。我们不需要把项目重新打War包了，</p><p>直接找到那个修改好的新产生的class文件，送到服务器，直接替换下原来的class文件即可，</p><p>配置的Tomcat server.xml的时候 我们Context节点，要加reloadable=&quot;true&quot;，这样的话，Tomcat会自动重新启动项目，不需要我们人工的重启，很方便；</p><p>那如何找到Web项目编译好的class文件呢？</p><p>我们分两种项目进行讲解：</p><p>1，普通Web项目</p><p>我们首先找到Eclipse的工作空间 workspace；</p><p><img src=\"/static/userImages/20160225/1456358794413068531.jpg\" title=\"1456358794413068531.jpg\" alt=\"QQ鎴浘20160225080603.jpg\"/></p><p>这里的BaiduYunServer就是一个普通Web项目，我们点下文件夹，</p><p><img src=\"/static/userImages/20160225/1456358844069022109.jpg\" title=\"1456358844069022109.jpg\" alt=\"QQ鎴浘20160225080653.jpg\"/></p><p>里面有个build文件夹，这里就是项目编译的所有的class文件。</p><p><br/></p><p>2，Maven项目</p><p>我们还是首先找到Eclipse的工作空间 workspace；</p><p><img src=\"/static/userImages/20160225/1456358920038000713.jpg\" title=\"1456358920038000713.jpg\" alt=\"QQ鎴浘20160225080759.jpg\"/></p><p>这里的Blog项目，就是一个Maven项目，我们点下Blog；</p><p><img src=\"/static/userImages/20160225/1456358967319070308.jpg\" title=\"1456358967319070308.jpg\" alt=\"QQ鎴浘20160225080857.jpg\"/></p><p>这里有个target项目，里面就是Maven项目编译好的class文件，当然有配置文件的话，也会在里面；</p><p><br/></p><p>我们可以在里面找到我们需要的class文件；</p><p><br/></p>',3,'tomcat class文件','/resources/images/no_picture.jpg',1),(61,'j2se项目如何打成可以运行Jar包','经常有学员写完一个j2se项目来问我如何打成Jar包，很多学员自己摸索了。由于选错了一个选项，打出来的是Jar包，但不是可运行Jar包；今天我来讲下J2se项目如何打包成可运行Jar包；我们首先建一个J2se项目，随便取名 就叫Test算了：然后我们新建一个Java类 JFrameTest类代码如何：impo','2016-02-26 21:18:25',367,2,'<p>经常有学员写完一个j2se项目来问我如何打成Jar包，很多学员自己摸索了。由于选错了一个选项，打出来的是Jar包，但不是可运行Jar包；<br/></p><p><br/></p><p>今天我来讲下J2se项目如何打包成可运行Jar包；</p><p><br/></p><p>我们首先建一个J2se项目，随便取名 就叫Test算了：</p><p>然后我们新建一个Java类&nbsp;JFrameTest</p><p><img src=\"/static/userImages/20160226/1456492304460084475.jpg\" title=\"1456492304460084475.jpg\" alt=\"QQ鎴浘20160226211111.jpg\"/></p><p><br/></p><p>类代码如何：</p><pre class=\"brush:java;toolbar:false\">import&nbsp;java.awt.Color;\n\nimport&nbsp;javax.swing.JFrame;\n\npublic&nbsp;class&nbsp;JFrameTest&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		JFrame&nbsp;jFrame=new&nbsp;JFrame(&quot;JFrame窗体&quot;);\n		jFrame.getContentPane().setBackground(Color.RED);&nbsp;//&nbsp;设置容器的背景颜色\n		jFrame.setLocation(400,&nbsp;200);&nbsp;//&nbsp;设置容器的位置\n		jFrame.setSize(500,200);&nbsp;//&nbsp;设置容器大小\n		jFrame.setVisible(true);&nbsp;//&nbsp;让容器显示\n	}\n}</pre><p><br/></p><p>然后我们右击项目，选择 Export(导出)：</p><p><img src=\"/static/userImages/20160226/1456492376757021856.png\" title=\"1456492376757021856.png\" alt=\"QQ鍥剧墖20160226211216.png\"/></p><p><br/></p><p>下面就是重点了。一定要选择Runnable Jar file，可以运行Jar包； 选择第一个Jar file就坑了，那个是不可运行的Jar包；</p><p><br/></p><p>我们继续点Next ；</p><p><img src=\"/static/userImages/20160226/1456492463241086491.png\" title=\"1456492463241086491.png\" alt=\"QQ鍥剧墖20160226211347.png\"/></p><p><br/></p><p>这里 我们首先选择启动的包含main方法入口的主类，我们开发的j2se项目可能有好几个类里都包含main方法，我们要选入口的类（一般是登录的那个类）；</p><p>我们这里选择JFrameTest； 然后我们再点Browse(浏览)，导出的目标位置，就放桌面算了；</p><p><img src=\"/static/userImages/20160226/1456492597600055236.jpg\" title=\"1456492597600055236.jpg\" alt=\"QQ鎴浘20160226211544.jpg\"/></p><p><br/></p><p>最后我们选择Finish，我们会看到桌面会有一个Jar包；</p><p><img src=\"/static/userImages/20160226/1456492651772092576.jpg\" title=\"1456492651772092576.jpg\" alt=\"QQ鎴浘20160226211658.jpg\"/></p><p><br/></p><p>我们双击运行下，</p><p><img src=\"/static/userImages/20160226/1456492676600021293.jpg\" title=\"1456492676600021293.jpg\" alt=\"QQ鎴浘20160226211720.jpg\"/></p><p><br/></p><p>直接出结果。</p><p><br/></p><p><br/></p><p><br/></p>',1,'打包','/resources/images/05.jpg',0),(62,'CXF添加拦截器','今天开始讲下拦截器，前面大家学过servlet，struts2 都有拦截器概念，主要作用是做一些权限过滤，编码处理等；webservice也可以加上拦截器，我们可以给webservice请求加权限判断功能；webservice分服务端和客户端，服务端和客户端都是可以加拦截器的，无论是服务端还是客户端，都分进，','2016-02-28 18:29:15',262,2,'<p style=\"white-space: normal;\">今天开始讲下拦截器，前面大家学过servlet，struts2 都有拦截器概念，主要作用是做一些权限过滤，编码处理等；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">webservice也可以加上拦截器，我们可以给webservice请求加权限判断功能；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">webservice分服务端和客户端，服务端和客户端都是可以加拦截器的，无论是服务端还是客户端，都分进，出（In，Out）拦截器；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们先来改下服务端的Server类：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;org.apache.cxf.interceptor.LoggingInInterceptor;\nimport&nbsp;org.apache.cxf.interceptor.LoggingOutInterceptor;\nimport&nbsp;org.apache.cxf.jaxws.JaxWsServerFactoryBean;\n\nimport&nbsp;com.java1234.webservice.impl.HelloWorldImpl;\n\npublic&nbsp;class&nbsp;Server&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		System.out.println(&quot;web&nbsp;service&nbsp;start&quot;);&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld&nbsp;implementor&nbsp;=&nbsp;new&nbsp;HelloWorldImpl();&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;address&nbsp;=&nbsp;&quot;http://192.168.1.103/helloWorld&quot;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JaxWsServerFactoryBean&nbsp;factoryBean&nbsp;=&nbsp;new&nbsp;JaxWsServerFactoryBean();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setAddress(address);&nbsp;//&nbsp;设置暴露地址\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setServiceClass(HelloWorld.class);&nbsp;//&nbsp;接口类\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setServiceBean(implementor);&nbsp;//&nbsp;设置实现类\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.getInInterceptors().add(new&nbsp;LoggingInInterceptor());&nbsp;//&nbsp;添加in拦截器&nbsp;日志拦截器\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.getOutInterceptors().add(new&nbsp;LoggingOutInterceptor());&nbsp;//&nbsp;添加out拦截器\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.create();		\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;web&nbsp;service&nbsp;started&quot;);&nbsp;&nbsp;\n	}\n}</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里的话，我们通过factoryBean对象可以获取拦截器组，添加进或者出拦截器，这里有个经典的拦截器，我们开发的时候经常用，就是日志拦截器，</p><p style=\"white-space: normal;\">我们可以把客户端的请求，以及服务端返回的信息打印出来，可以打印控制台，也可以打印到执行文件；这里为了演示方便，直接搞无参的拦截器，</p><p style=\"white-space: normal;\">打印到控制台；&nbsp;</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">无论是自定义的拦截器，还是CXF自带的拦截器，都必须实现Interceptor接口。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们执行下Server类：</p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160228/1456653585413038703.jpg\" title=\"1456653585413038703.jpg\" alt=\"QQ鎴浘20160228175925.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">然后我们再来执行下客户端的Client类，结果：</p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160228/1456653669428069419.jpg\" title=\"1456653669428069419.jpg\" alt=\"QQ鎴浘20160228180012.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">然后我们仔细观察Server端的控制台:</p><pre class=\"brush:java;toolbar:false\">web&nbsp;service&nbsp;start\n二月&nbsp;28,&nbsp;2016&nbsp;5:59:19&nbsp;下午&nbsp;org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean&nbsp;buildServiceFromClass\n信息:&nbsp;Creating&nbsp;Service&nbsp;{http://webservice.java1234.com/}HelloWorldService&nbsp;from&nbsp;class&nbsp;com.java1234.webservice.HelloWorld\n二月&nbsp;28,&nbsp;2016&nbsp;5:59:20&nbsp;下午&nbsp;org.apache.cxf.endpoint.ServerImpl&nbsp;initDestination\n信息:&nbsp;Setting&nbsp;the&nbsp;server&#39;s&nbsp;publish&nbsp;address&nbsp;to&nbsp;be&nbsp;http://192.168.1.103:80/helloWorld\nSLF4J:&nbsp;Failed&nbsp;to&nbsp;load&nbsp;class&nbsp;&quot;org.slf4j.impl.StaticLoggerBinder&quot;.\nSLF4J:&nbsp;Defaulting&nbsp;to&nbsp;no-operation&nbsp;(NOP)&nbsp;logger&nbsp;implementation\nSLF4J:&nbsp;See&nbsp;http://www.slf4j.org/codes.html#StaticLoggerBinder&nbsp;for&nbsp;further&nbsp;details.\nweb&nbsp;service&nbsp;started\n二月&nbsp;28,&nbsp;2016&nbsp;6:00:07&nbsp;下午&nbsp;org.apache.cxf.services.HelloWorldService.HelloWorldPort.HelloWorld\n信息:&nbsp;Inbound&nbsp;Message\n----------------------------\nID:&nbsp;1\nAddress:&nbsp;http://192.168.1.103/helloWorld?wsdl\nHttp-Method:&nbsp;GET\nContent-Type:&nbsp;\nHeaders:&nbsp;{Accept=[text/html,&nbsp;image/gif,&nbsp;image/jpeg,&nbsp;*;&nbsp;q=.2,&nbsp;*/*;&nbsp;q=.2],&nbsp;connection=[keep-alive],&nbsp;Content-Type=[null],&nbsp;Host=[192.168.1.103],&nbsp;User-Agent=[Java/1.7.0_67]}\n--------------------------------------\n二月&nbsp;28,&nbsp;2016&nbsp;6:00:07&nbsp;下午&nbsp;org.apache.cxf.services.HelloWorldService.HelloWorldPort.HelloWorld\n信息:&nbsp;Inbound&nbsp;Message\n----------------------------\nID:&nbsp;2\nAddress:&nbsp;http://192.168.1.103/helloWorld\nEncoding:&nbsp;UTF-8\nHttp-Method:&nbsp;POST\nContent-Type:&nbsp;text/xml;&nbsp;charset=UTF-8\nHeaders:&nbsp;{Accept=[text/xml,&nbsp;multipart/related],&nbsp;connection=[keep-alive],&nbsp;Content-Length=[175],&nbsp;content-type=[text/xml;&nbsp;charset=UTF-8],&nbsp;Host=[192.168.1.103],&nbsp;SOAPAction=[&quot;&quot;],&nbsp;User-Agent=[JAX-WS&nbsp;RI&nbsp;2.2.4-b01]}\nPayload:&nbsp;&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;?&gt;&lt;S:Envelope&nbsp;xmlns:S=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;S:Body&gt;&lt;ns2:getRoles&nbsp;xmlns:ns2=&quot;http://webservice.java1234.com/&quot;/&gt;&lt;/S:Body&gt;&lt;/S:Envelope&gt;\n--------------------------------------\n二月&nbsp;28,&nbsp;2016&nbsp;6:00:07&nbsp;下午&nbsp;org.apache.cxf.services.HelloWorldService.HelloWorldPort.HelloWorld\n信息:&nbsp;Outbound&nbsp;Message\n---------------------------\nID:&nbsp;2\nResponse-Code:&nbsp;200\nEncoding:&nbsp;UTF-8\nContent-Type:&nbsp;text/xml\nHeaders:&nbsp;{}\nPayload:&nbsp;&lt;soap:Envelope&nbsp;xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;soap:Body&gt;&lt;ns2:getRolesResponse&nbsp;xmlns:ns2=&quot;http://webservice.java1234.com/&quot;&gt;&lt;return&gt;&lt;item&gt;&lt;key&gt;jack&lt;/key&gt;&lt;value&gt;&lt;id&gt;1&lt;/id&gt;&lt;roleName&gt;程序员&lt;/roleName&gt;&lt;/value&gt;&lt;/item&gt;&lt;item&gt;&lt;key&gt;java1234&lt;/key&gt;&lt;value&gt;&lt;id&gt;1&lt;/id&gt;&lt;roleName&gt;技术总监&lt;/roleName&gt;&lt;/value&gt;&lt;value&gt;&lt;id&gt;2&lt;/id&gt;&lt;roleName&gt;架构师&lt;/roleName&gt;&lt;/value&gt;&lt;/item&gt;&lt;/return&gt;&lt;/ns2:getRolesResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\n--------------------------------------</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里的打印出来的就是日志信息：Inbound 进信息 &nbsp;Outbound 是出信息，进的时候，大家会看到有个Headers SOAP消息。后面我们可以在里面加我们的数据；</p><p style=\"white-space: normal;\">在Outbound Message里，Payload消息里我们可以找到webservice返回的数据 SOAP消息；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">同理，我们在客户端也可以加进出拦截器，修改Client代码：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;java.util.List;\n\nimport&nbsp;org.apache.cxf.frontend.ClientProxy;\nimport&nbsp;org.apache.cxf.interceptor.LoggingInInterceptor;\nimport&nbsp;org.apache.cxf.interceptor.LoggingOutInterceptor;\n\npublic&nbsp;class&nbsp;Client&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		HelloWorldService&nbsp;service=new&nbsp;HelloWorldService();\n		HelloWorld&nbsp;helloWorld=service.getHelloWorldPort();\n		org.apache.cxf.endpoint.Client&nbsp;client=ClientProxy.getClient(helloWorld);\n		client.getInInterceptors().add(new&nbsp;LoggingInInterceptor());&nbsp;//&nbsp;添加in拦截器&nbsp;日志拦截器\n		client.getOutInterceptors().add(new&nbsp;LoggingOutInterceptor());&nbsp;//&nbsp;添加out拦截器\n		//System.out.println(helloWorld.say(&quot;java1234&quot;));\n		/*User&nbsp;user=new&nbsp;User();\n		user.setUserName(&quot;jack&quot;);\n		user.setPassword(&quot;123456&quot;);\n		List&lt;Role&gt;&nbsp;roleList=helloWorld.getRoleByUser(user);\n		for(Role&nbsp;role:roleList){\n			System.out.println(role.getId()+&quot;,&quot;+role.getRoleName());\n		}*/\n		MyRoleArray&nbsp;array=helloWorld.getRoles();\n		List&lt;MyRole&gt;&nbsp;roleList=array.item;\n		for(int&nbsp;i=0;i&lt;roleList.size();i++){\n			MyRole&nbsp;my=roleList.get(i);\n			System.out.print(my.key+&quot;:&quot;);\n			for(Role&nbsp;r:my.value){\n				System.out.print(r.getId()+&quot;,&quot;+r.getRoleName()+&quot;&nbsp;&quot;);\n			}\n			System.out.println();\n		}\n	}\n}</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里的话，我们用到了ClientProxy，客户端代理。</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们请求的时候，可以看到控制台的日志信息：</p><pre class=\"brush:java;toolbar:false\">二月&nbsp;28,&nbsp;2016&nbsp;6:22:53&nbsp;下午&nbsp;org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean&nbsp;buildServiceFromWSDL\n信息:&nbsp;Creating&nbsp;Service&nbsp;{http://webservice.java1234.com/}HelloWorldService&nbsp;from&nbsp;WSDL:&nbsp;http://192.168.1.103/helloWorld?wsdl\n二月&nbsp;28,&nbsp;2016&nbsp;6:22:53&nbsp;下午&nbsp;org.apache.cxf.services.HelloWorldService.HelloWorldPort.HelloWorld\n信息:&nbsp;Outbound&nbsp;Message\n---------------------------\nID:&nbsp;1\nAddress:&nbsp;http://192.168.1.103/helloWorld\nEncoding:&nbsp;UTF-8\nHttp-Method:&nbsp;POST\nContent-Type:&nbsp;text/xml\nHeaders:&nbsp;{Accept=[*/*],&nbsp;SOAPAction=[&quot;&quot;]}\nPayload:&nbsp;&lt;soap:Envelope&nbsp;xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;soap:Body&gt;&lt;ns2:getRoles&nbsp;xmlns:ns2=&quot;http://webservice.java1234.com/&quot;/&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\n--------------------------------------\n二月&nbsp;28,&nbsp;2016&nbsp;6:22:53&nbsp;下午&nbsp;org.apache.cxf.services.HelloWorldService.HelloWorldPort.HelloWorld\n信息:&nbsp;Inbound&nbsp;Message\n----------------------------\nID:&nbsp;1\nResponse-Code:&nbsp;200\nEncoding:&nbsp;UTF-8\nContent-Type:&nbsp;text/xml;&nbsp;charset=UTF-8\nHeaders:&nbsp;{content-type=[text/xml;&nbsp;charset=UTF-8],&nbsp;Date=[Sun,&nbsp;28&nbsp;Feb&nbsp;2016&nbsp;10:22:53&nbsp;GMT],&nbsp;Server=[Jetty(9.2.11.v20150529)],&nbsp;transfer-encoding=[chunked]}\nPayload:&nbsp;&lt;soap:Envelope&nbsp;xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&lt;soap:Body&gt;&lt;ns2:getRolesResponse&nbsp;xmlns:ns2=&quot;http://webservice.java1234.com/&quot;&gt;&lt;return&gt;&lt;item&gt;&lt;key&gt;jack&lt;/key&gt;&lt;value&gt;&lt;id&gt;1&lt;/id&gt;&lt;roleName&gt;程序员&lt;/roleName&gt;&lt;/value&gt;&lt;/item&gt;&lt;item&gt;&lt;key&gt;java1234&lt;/key&gt;&lt;value&gt;&lt;id&gt;1&lt;/id&gt;&lt;roleName&gt;技术总监&lt;/roleName&gt;&lt;/value&gt;&lt;value&gt;&lt;id&gt;2&lt;/id&gt;&lt;roleName&gt;架构师&lt;/roleName&gt;&lt;/value&gt;&lt;/item&gt;&lt;/return&gt;&lt;/ns2:getRolesResponse&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;\n--------------------------------------\njack:1,程序员&nbsp;\njava1234:1,技术总监&nbsp;2,架构师</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里也是出进的日志信息，和上面那个类似；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">OK到这里的话，添加拦截器已经讲完了；<br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">完整代码：<a href=\"http://pan.baidu.com/s/1dEbs19Z\" target=\"_blank\" title=\"http://pan.baidu.com/s/1dEbs19Z\">http://pan.baidu.com/s/1dEbs19Z</a></p><p style=\"white-space: normal;\"><br/></p><p><br/></p>',9,'webservice cxf 拦截器','/resources/images/06.jpg',2),(63,'我的某个徒弟的博客开通啦',' http://www.liuyu.space/  在我的指导下，我的一个即将找工作的学徒搞了好几天。终于把博客系统搭建好了。真心祝愿他找份好工作，以后事业有成；','2016-02-29 20:23:24',685,12,'<p><img src=\"http://img.baidu.com/hi/jx2/j_0002.gif\"/>&nbsp;<a href=\"http://www.liuyu.space/\" target=\"_blank\" title=\"http://www.liuyu.space/\">http://www.liuyu.space/</a>&nbsp; 在我的指导下，我的一个即将找工作的学徒搞了好几天。终于把博客系统搭建好了。</p><p><br/></p><p><img src=\"/static/userImages/20160229/1456748535413045927.jpg\" style=\"width: 851px; height: 599px;\" title=\"1456748535413045927.jpg\" width=\"851\" height=\"599\"/></p><p><img src=\"/static/userImages/20160229/1456748535507079958.jpg\" style=\"width: 817px; height: 522px;\" title=\"1456748535507079958.jpg\" width=\"817\" height=\"522\"/></p><p><br/></p><p>真心祝愿他找份好工作，以后事业有成；</p><p><br/></p><p><br/></p>',4,'博客 学徒','/resources/images/05.jpg',0),(65,'部署Maven项目无法找到Maven管理的Jar包','有些学员部署Maven项目的时候，经常遇到奇葩问题，就是导入了maven项目，也没报错，但是运行的时候，各种奇葩报错，xxx.class not found；等等；这种问题根源项目没有把maven管理的Jar包依赖进去；如何解决呢？这里给下解决方案：右击项目，-》 Properties -》 Deployme','2016-03-03 12:41:53',382,4,'<p style=\"white-space: normal;\">有些学员部署Maven项目的时候，经常遇到奇葩问题，就是导入了maven项目，也没报错，但是运行的时候，各种奇葩报错，xxx.class not found；等等；<br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这种问题根源项目没有把maven管理的Jar包依赖进去；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">如何解决呢？</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里给下解决方案：<br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">右击项目，-》&nbsp;Properties -》&nbsp;Deployment Assembly</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160303/1456979882147011039.jpg\" title=\"1456979882147011039.jpg\" alt=\"QQ鎴浘20160303123627.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们点击 Add ;</p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160303/1456979944772024572.png\" title=\"1456979944772024572.png\" alt=\"QQ鍥剧墖20160303123803.png\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">选&nbsp;Java Build Path Entries &nbsp;然后 Next&nbsp;</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160303/1456979983616007611.jpg\" title=\"1456979983616007611.jpg\" alt=\"QQ鎴浘20160303123903.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">选&nbsp;maven Dependencies 然后点 &quot;Finish&quot; 即可；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这样就把Maven管理的Jar包依赖上去了；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">假如还有其他小的报错。根据报错信息来解决即可，应该不是什么大问题了；</p><p style=\"white-space: normal;\"><br/></p><p><br/></p>',12,'maven 部署','/resources/images/maven.jpg',3),(69,'CXF添加自定义拦截器','前面我们说到CXF添加内置的拦截器，今天的话，我们来讲下如何添加自定义拦截器；我们的实例是客户端访问服务端webservice接口要加权限认证。我们思路先说下。我们可以通过在SOAP消息的Header头信息中添加自定义信息，然后发送到服务端端，服务器端通过获取Header头消息，然后进行认证；这里的添加消息，','2016-03-14 09:54:13',147,1,'<p>前面我们说到CXF添加内置的拦截器，今天的话，我们来讲下如何添加自定义拦截器；</p><p><br/></p><p>我们的实例是客户端访问服务端webservice接口要加权限认证。</p><p><br/></p><p>我们思路先说下。我们可以通过在SOAP消息的Header头信息中添加自定义信息，然后发送到服务端端，服务器端通过获取</p><p>Header头消息，然后进行认证；这里的添加消息，和获取消息认证，我们都是通过自定义拦截器来实现；</p><p><br/></p><p>OK下面我们来实现下：</p><p><br/></p><p>首先是服务器端：</p><p><br/></p><p>我们自定义拦截器：MyInterceptor</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.interceptor;\n\nimport&nbsp;java.util.List;\n\nimport&nbsp;org.apache.cxf.binding.soap.SoapMessage;\nimport&nbsp;org.apache.cxf.headers.Header;\nimport&nbsp;org.apache.cxf.interceptor.Fault;\nimport&nbsp;org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport&nbsp;org.apache.cxf.phase.Phase;\nimport&nbsp;org.w3c.dom.Element;\nimport&nbsp;org.w3c.dom.NodeList;\n\n/**\n&nbsp;*&nbsp;自定义拦截器\n&nbsp;*&nbsp;@author&nbsp;Administrator\n&nbsp;*\n&nbsp;*/\npublic&nbsp;class&nbsp;MyInterceptor&nbsp;extends&nbsp;AbstractPhaseInterceptor&lt;SoapMessage&gt;{\n\n	public&nbsp;MyInterceptor(){\n		//&nbsp;在调用方法之前调用拦截器\n		super(Phase.PRE_INVOKE);\n	}\n\n	/**\n	&nbsp;*&nbsp;拦截获取消息\n	&nbsp;*/\n	public&nbsp;void&nbsp;handleMessage(SoapMessage&nbsp;message)&nbsp;throws&nbsp;Fault&nbsp;{\n		List&lt;Header&gt;&nbsp;headers=message.getHeaders();\n		if(headers==null&nbsp;||&nbsp;headers.size()==0){\n			throw&nbsp;new&nbsp;Fault(new&nbsp;IllegalArgumentException(&quot;没有Header,拦截器实施拦截&quot;));\n		}\n		Header&nbsp;firstHeader=headers.get(0);\n		Element&nbsp;ele=(Element)&nbsp;firstHeader.getObject();\n		NodeList&nbsp;userIds=ele.getElementsByTagName(&quot;userName&quot;);\n		NodeList&nbsp;userPasses=ele.getElementsByTagName(&quot;password&quot;);\n		\n		if(userIds.getLength()!=1){\n			throw&nbsp;new&nbsp;Fault(new&nbsp;IllegalArgumentException(&quot;用户名格式不对&quot;));\n		}\n		\n		if(userPasses.getLength()!=1){\n			throw&nbsp;new&nbsp;Fault(new&nbsp;IllegalArgumentException(&quot;密码格式不对&quot;));\n		}\n		\n		String&nbsp;userId=userIds.item(0).getTextContent();\n		String&nbsp;userPass=userPasses.item(0).getTextContent();\n		\n		if(!userId.equals(&quot;java1234&quot;)&nbsp;||&nbsp;!&nbsp;userPass.equals(&quot;123456&quot;)){\n			throw&nbsp;new&nbsp;Fault(new&nbsp;IllegalArgumentException(&quot;用户名或者密码不正确&quot;));\n		}\n		\n	}\n}</pre><p><br/></p><p>这里的话，我们主要是获取Header头消息，然后获取userName和password节点，然后获取值，进行权限判断，假如认证不通过，我们抛出异常；</p><p><br/></p><p>在Server类里，我们要添加一个in 拦截器，在进入的时候，我们要进行验证；<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;org.apache.cxf.interceptor.LoggingInInterceptor;\nimport&nbsp;org.apache.cxf.interceptor.LoggingOutInterceptor;\nimport&nbsp;org.apache.cxf.jaxws.JaxWsServerFactoryBean;\n\nimport&nbsp;com.java1234.interceptor.MyInterceptor;\nimport&nbsp;com.java1234.webservice.impl.HelloWorldImpl;\n\npublic&nbsp;class&nbsp;Server&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		System.out.println(&quot;web&nbsp;service&nbsp;start&quot;);&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HelloWorld&nbsp;implementor&nbsp;=&nbsp;new&nbsp;HelloWorldImpl();&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;address&nbsp;=&nbsp;&quot;http://10.10.7.18/helloWorld&quot;;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JaxWsServerFactoryBean&nbsp;factoryBean&nbsp;=&nbsp;new&nbsp;JaxWsServerFactoryBean();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setAddress(address);&nbsp;//&nbsp;设置暴露地址\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setServiceClass(HelloWorld.class);&nbsp;//&nbsp;接口类\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.setServiceBean(implementor);&nbsp;//&nbsp;设置实现类\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.getInInterceptors().add(new&nbsp;LoggingInInterceptor());&nbsp;//&nbsp;添加in拦截器&nbsp;日志拦截器\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.getOutInterceptors().add(new&nbsp;LoggingOutInterceptor());&nbsp;//&nbsp;添加out拦截器\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.getInInterceptors().add(new&nbsp;MyInterceptor());&nbsp;//&nbsp;添加自定义拦截器\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;factoryBean.create();		\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;web&nbsp;service&nbsp;started&quot;);&nbsp;&nbsp;\n	}\n}</pre><p><br/></p><p>接下来是修改客户端代码：</p><p>我们同样要添加一个自定义拦截器：AddHeaderInterceptor</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.interceptor;\n\n\nimport&nbsp;java.util.List;\n\nimport&nbsp;javax.xml.namespace.QName;\n\nimport&nbsp;org.apache.cxf.binding.soap.SoapMessage;\nimport&nbsp;org.apache.cxf.headers.Header;\nimport&nbsp;org.apache.cxf.helpers.DOMUtils;\nimport&nbsp;org.apache.cxf.interceptor.Fault;\nimport&nbsp;org.apache.cxf.phase.AbstractPhaseInterceptor;\nimport&nbsp;org.apache.cxf.phase.Phase;\nimport&nbsp;org.w3c.dom.Document;\nimport&nbsp;org.w3c.dom.Element;\n\npublic&nbsp;class&nbsp;AddHeaderInterceptor&nbsp;extends&nbsp;AbstractPhaseInterceptor&lt;SoapMessage&gt;&nbsp;{\n\n	private&nbsp;String&nbsp;userName;\n	private&nbsp;String&nbsp;password;\n\n	public&nbsp;AddHeaderInterceptor(String&nbsp;userName,&nbsp;String&nbsp;password)&nbsp;{\n		super(Phase.PREPARE_SEND);&nbsp;//&nbsp;发送SOAP消息之前调用拦截器\n		this.userName=userName;\n		this.password=password;\n	}\n\n	public&nbsp;void&nbsp;handleMessage(SoapMessage&nbsp;message)&nbsp;throws&nbsp;Fault&nbsp;{\n		List&lt;Header&gt;&nbsp;headers=message.getHeaders();\n		\n		Document&nbsp;doc=DOMUtils.createDocument();\n		Element&nbsp;ele=doc.createElement(&quot;authHeader&quot;);\n		Element&nbsp;idElement=doc.createElement(&quot;userName&quot;);\n		idElement.setTextContent(userName);\n		Element&nbsp;passElement=doc.createElement(&quot;password&quot;);\n		passElement.setTextContent(password);\n		\n		ele.appendChild(idElement);\n		ele.appendChild(passElement);\n		\n		headers.add(new&nbsp;Header(new&nbsp;QName(&quot;java1234&quot;),ele));\n		\n		\n	}\n\n	\n}</pre><p><br/></p><p>这里的话，我们主要是在拦截器里创建头消息；</p><p><br/></p><p>Client类里我们要修改下，加下Out 拦截器：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.java1234.webservice;\n\nimport&nbsp;java.util.List;\n\nimport&nbsp;org.apache.cxf.frontend.ClientProxy;\nimport&nbsp;org.apache.cxf.interceptor.LoggingInInterceptor;\nimport&nbsp;org.apache.cxf.interceptor.LoggingOutInterceptor;\n\nimport&nbsp;com.java1234.interceptor.AddHeaderInterceptor;\n\npublic&nbsp;class&nbsp;Client&nbsp;{\n\n	public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n		HelloWorldService&nbsp;service=new&nbsp;HelloWorldService();\n		HelloWorld&nbsp;helloWorld=service.getHelloWorldPort();\n		org.apache.cxf.endpoint.Client&nbsp;client=ClientProxy.getClient(helloWorld);\n		//&nbsp;client.getInInterceptors().add(new&nbsp;LoggingInInterceptor());&nbsp;//&nbsp;添加in拦截器&nbsp;日志拦截器\n		client.getOutInterceptors().add(new&nbsp;AddHeaderInterceptor(&quot;java1234&quot;,&quot;123456&quot;));&nbsp;//&nbsp;添加自定义拦截器\n		client.getOutInterceptors().add(new&nbsp;LoggingOutInterceptor());&nbsp;//&nbsp;添加out拦截器\n		//System.out.println(helloWorld.say(&quot;java1234&quot;));\n		/*User&nbsp;user=new&nbsp;User();\n		user.setUserName(&quot;jack&quot;);\n		user.setPassword(&quot;123456&quot;);\n		List&lt;Role&gt;&nbsp;roleList=helloWorld.getRoleByUser(user);\n		for(Role&nbsp;role:roleList){\n			System.out.println(role.getId()+&quot;,&quot;+role.getRoleName());\n		}*/\n		MyRoleArray&nbsp;array=helloWorld.getRoles();\n		List&lt;MyRole&gt;&nbsp;roleList=array.item;\n		for(int&nbsp;i=0;i&lt;roleList.size();i++){\n			MyRole&nbsp;my=roleList.get(i);\n			System.out.print(my.key+&quot;:&quot;);\n			for(Role&nbsp;r:my.value){\n				System.out.print(r.getId()+&quot;,&quot;+r.getRoleName()+&quot;&nbsp;&quot;);\n			}\n			System.out.println();\n		}\n	}\n}</pre><p><br/></p><p>OK这样就完整了自定义拦截器实现权限认证；</p><p><br/></p><p>先运行Server类，和以前一样；</p><p><br/></p><p>假如我们把 &nbsp;client.getOutInterceptors().add(new AddHeaderInterceptor(&quot;java1234&quot;,&quot;123456&quot;)); // 添加自定义拦截器</p><p>密码改成 123&nbsp;</p><p><br/></p><p>然后运行Client类，会报错；</p><p><img src=\"/static/userImages/20160314/1457920424960022579.png\" title=\"1457920424960022579.png\" alt=\"QQ鎴浘20160314095323.png\"/></p><p><br/></p><p>用户名或者密码不正确；</p><p><br/></p><p>完整代码：&nbsp;<a href=\"http://pan.baidu.com/s/1dEaHNcX\" target=\"_blank\" title=\"http://pan.baidu.com/s/1dEaHNcX\">http://pan.baidu.com/s/1dEaHNcX</a></p><p><br/></p>',9,'webservice cxf','/resources/images/04.jpg',1),(70,'Spring整合CXF之发布WebService服务','今天我们来讲下如何用Spring来整合CXF，来发布WebService服务；给下官方文档地址：http://cxf.apache.org/docs/writing-a-service-with-spring.html根据官方文档。我们把前面的实例用Spring整合CXF来处理下。会简化很多；首先我们来建一个','2016-03-16 14:23:36',174,2,'<p style=\"white-space: normal;\">今天我们来讲下如何用Spring来整合CXF，来发布WebService服务；<br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">给下官方文档地址：<a href=\"http://cxf.apache.org/docs/writing-a-service-with-spring.html\" target=\"_blank\" title=\"http://cxf.apache.org/docs/writing-a-service-with-spring.html\">http://cxf.apache.org/docs/writing-a-service-with-spring.html</a></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">根据官方文档。我们把前面的实例用Spring整合CXF来处理下。会简化很多；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">首先我们来建一个Maven项目&nbsp;WebService_CXF</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">建好项目第一步，我们打开pom.xml</p><p style=\"white-space: normal;\">我们来添加下Spring支持：</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;添加Spring支持&nbsp;--&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-core&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-beans&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n	&nbsp;&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&nbsp;&lt;artifactId&gt;spring-tx&lt;/artifactId&gt;\n	&nbsp;&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n	&lt;/dependency&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-web&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-aop&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n	&lt;groupId&gt;org.springframework&lt;/groupId&gt;\n	&lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;\n	&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">接下来添加下CXF支持：</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;添加cxf支持&nbsp;&nbsp;--&gt;\n&lt;dependency&gt;\n	&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n	&lt;artifactId&gt;cxf-core&lt;/artifactId&gt;\n	&lt;version&gt;3.1.5&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n	&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n	&lt;artifactId&gt;cxf-rt-frontend-jaxws&lt;/artifactId&gt;\n	&lt;version&gt;3.1.5&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n	&lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;\n	&lt;artifactId&gt;cxf-rt-transports-http&lt;/artifactId&gt;\n	&lt;version&gt;3.1.5&lt;/version&gt;\n&lt;/dependency&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们在项目里添加下&nbsp;applicationContext.xml spring配置文件 我们要额外添加下命名路径，因为我们要用新的标签；</p><pre class=\"brush:xml;toolbar:false\">&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:jee=&quot;http://www.springframework.org/schema/jee&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:jaxws=&quot;http://cxf.apache.org/jaxws&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop&nbsp;http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans&nbsp;http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;http://www.springframework.org/schema/context/spring-context-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/jee&nbsp;http://www.springframework.org/schema/jee/spring-jee-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx&nbsp;http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://cxf.apache.org/jaxws&nbsp;http://cxf.apache.org/schemas/jaxws.xsd&quot;&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里的我是参考官方文档上，添加了 jaxws支持。。大家直接贴下即可；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">然后我们再导入下cxf里的一些bean配置，参考官方文档：</p><pre class=\"brush:xml;toolbar:false\">&lt;import&nbsp;resource=&quot;classpath:META-INF/cxf/cxf.xml&quot;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;import&nbsp;resource=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot;/&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">（我看了cxf核心包，其实质疑偶cxf.xml，没有cxf-servlet.xml 估计是兼容前面版本）</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们把前面的类贴到我们这个项目了；</p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160316/1458107956835081125.jpg\" title=\"1458107956835081125.jpg\" alt=\"QQ鎴浘20160316135804.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里的HelloWorldImpl类上，我们加一个&nbsp;@Component(&quot;helloWorld&quot;) &nbsp;</p><p style=\"white-space: normal;\">Spring配置文件里，我加下扫描：</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;自动扫描&nbsp;--&gt;\n&lt;context:component-scan&nbsp;base-package=&quot;com.java1234.webservice&quot;&nbsp;/&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">前面搞完后，我们在处理下web.xml文件 首先启动的时候，必须加载Spring：</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;Spring配置文件&nbsp;--&gt;\n&lt;context-param&gt;\n	&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n	&lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;\n&lt;/context-param&gt;\n\n&lt;!--&nbsp;Spring监听器&nbsp;--&gt;\n&lt;listener&gt;\n	&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n&lt;/listener&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">然后我们要定义一个Servlet，主要是处理WebService请求：</p><pre class=\"brush:xml;toolbar:false\">&lt;servlet&gt;&nbsp;&nbsp;\n&nbsp;&lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt;&nbsp;&nbsp;\n&nbsp;&lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;&nbsp;&nbsp;\n&lt;/servlet&gt;&nbsp;&nbsp;\n\n&lt;servlet-mapping&gt;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&lt;url-pattern&gt;/webservice/*&lt;/url-pattern&gt;&nbsp;&nbsp;\n&lt;/servlet-mapping&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里的话，我们所有的 /webservice请求，都交给CXFServlet类处理；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">最后一步，我们在Spring配置文件里，定义下webservice接口发布：<br/></p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;定义服务提供者&nbsp;&nbsp;--&gt;\n&lt;jaxws:endpoint\n	implementor=&quot;#helloWorld&quot;\n	address=&quot;/HelloWorld&quot;\n&nbsp;&gt;&lt;/jaxws:endpoint&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">这里implementor指定webservice接口实现类</p><p style=\"white-space: normal;\">address是具体的接口路径</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">最终完整的applicationContext.xml配置文件如下：</p><pre class=\"brush:xml;toolbar:false\">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;?&gt;&nbsp;&nbsp;&nbsp;&nbsp;\n&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:jee=&quot;http://www.springframework.org/schema/jee&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:jaxws=&quot;http://cxf.apache.org/jaxws&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop&nbsp;http://www.springframework.org/schema/aop/spring-aop-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans&nbsp;http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;http://www.springframework.org/schema/context/spring-context-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/jee&nbsp;http://www.springframework.org/schema/jee/spring-jee-4.0.xsd&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx&nbsp;http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://cxf.apache.org/jaxws&nbsp;http://cxf.apache.org/schemas/jaxws.xsd&quot;&gt;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n	&lt;import&nbsp;resource=&quot;classpath:META-INF/cxf/cxf.xml&quot;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;import&nbsp;resource=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot;/&gt;\n	\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;自动扫描&nbsp;--&gt;\n	&lt;context:component-scan&nbsp;base-package=&quot;com.java1234.webservice&quot;&nbsp;/&gt;\n	\n	&lt;!--&nbsp;定义服务提供者&nbsp;&nbsp;--&gt;\n	&lt;jaxws:endpoint\n		implementor=&quot;#helloWorld&quot;\n		address=&quot;/HelloWorld&quot;\n	&nbsp;&gt;&lt;/jaxws:endpoint&gt;\n&lt;/beans&gt;</pre><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们来启动下项目，然后访问&nbsp;http://localhost:8080/WebService_CXF/webservice/&nbsp;</p><p style=\"white-space: normal;\">效果如下：</p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160316/1458108744475018549.jpg\" title=\"1458108744475018549.jpg\" alt=\"a.jpg\" width=\"711\" height=\"369\" style=\"width: 711px; height: 369px;\"/></p><p style=\"white-space: normal;\">说明已经webservice接口已经发布成功了；</p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">我们可以访问具体的接口：&nbsp;http://localhost:8080/WebService_CXF/webservice/HelloWorld?wsdl</p><p style=\"white-space: normal;\">效果如下：</p><p style=\"white-space: normal;\"><img src=\"http://blog.java1234.com/static/userImages/20160316/1458108937241033682.jpg\" title=\"1458108937241033682.jpg\" alt=\"b.jpg\"/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\">完整代码：<a href=\"http://pan.baidu.com/s/1nuhocNf\" target=\"_blank\" title=\"http://pan.baidu.com/s/1nuhocNf\">http://pan.baidu.com/s/1nuhocNf</a></p><p style=\"white-space: normal;\"><br/></p><p style=\"white-space: normal;\"><br/></p><p><br/></p>',9,'spring webservice cxf','/resources/images/03.jpg',1),(71,'Spring整合CXF之添加拦截器','今天主要来讲解下如何在Spring整合CXF环境下，添加拦截器；这里我们给下官方的参考文档：http://cxf.apache.org/docs/jax-ws-configuration.html 结合官方文档，我们在前面的实例基础上，加代码：首先我们把前面的自定义拦截器 MyInterceptor 贴进来。','2016-03-17 12:11:55',182,3,'<p>今天主要来讲解下如何在Spring整合CXF环境下，添加拦截器；</p><p><br/></p><p>这里我们给下官方的参考文档：<a href=\"http://cxf.apache.org/docs/jax-ws-configuration.html\" target=\"_blank\" title=\"http://cxf.apache.org/docs/jax-ws-configuration.html\">http://cxf.apache.org/docs/jax-ws-configuration.html</a> </p><p><br/></p><p>结合官方文档，我们在前面的实例基础上，加代码：</p><p><br/></p><p><img src=\"/static/userImages/20160317/1458187484241078987.jpg\" title=\"1458187484241078987.jpg\" alt=\"bbb.jpg\"/></p><p><br/></p><p>首先我们把前面的自定义拦截器 MyInterceptor 贴进来。</p><p><br/></p><p>然后我们打开spring配置文件，applicationContext.xml</p><p><br/></p><p>根据官方文档：我们通过jaxws:inInterceptors&nbsp;jaxws:outInterceptors 这两个标签来添加in拦截器和out拦截器</p><p><br/></p><p>我们修改下jaxws:endpoint 节点：</p><pre class=\"brush:xml;toolbar:false\">&lt;!--&nbsp;定义服务提供者&nbsp;&nbsp;--&gt;\n&lt;jaxws:endpoint\n	implementor=&quot;#helloWorld&quot;\n	address=&quot;/HelloWorld&quot;&gt;\n	&lt;!--&nbsp;添加in拦截器&nbsp;--&gt;\n	&lt;jaxws:inInterceptors&gt;\n		&nbsp;&lt;bean&nbsp;class=&quot;org.apache.cxf.interceptor.LoggingInInterceptor&quot;/&gt;\n		&nbsp;&lt;bean&nbsp;class=&quot;com.java1234.interceptor.MyInterceptor&quot;/&gt;\n	&lt;/jaxws:inInterceptors&gt;\n	&lt;!--&nbsp;添加out拦截器&nbsp;--&gt;\n	&lt;jaxws:outInterceptors&gt;\n		&nbsp;&lt;bean&nbsp;class=&quot;org.apache.cxf.interceptor.LoggingInInterceptor&quot;/&gt;\n	&lt;/jaxws:outInterceptors&gt;\n&lt;/jaxws:endpoint&gt;</pre><p><br/></p><p>这里 我们添加了两个in拦截器，一个是cxf自带的LogginInInterceptor拦截器，还有一个是我们自己定义的MyInterceptor拦截器，</p><p>主要用作权限判断；</p><p><br/></p><p>out拦截器，我们还是用了一个cxf自带的LogginInInterceptor拦截器；</p><p><br/></p><p>这样我们就完事了；我们可以看到。用spring我们可以很轻松的完整拦截器的配置；</p><p><br/></p><p>接下来测试下话，我们还是用前面开发的WS_Client来测试，因为请求的websercie地址变了。</p><p>所以我们用wsdl2java工具重新生成下新的客户端代码；（具体操作大家看前面的帖子，这里就不再重复叙述）</p><p><br/></p><p>我们测试的话，大家可以先把客户端的拦截器注释掉，我们会发现会报错，说找不到header消息；</p><p><br/></p><p>假如密码弄错，会报用户名或者密码不对；</p><p><br/></p><p>我们用正确的密码，webservice接口会返回正确的结果。</p><p><br/></p><p>OK。今天就到这里。</p><p><br/></p>',9,'webservice cxf 自定义拦截器','/resources/images/02.jpg',1),(72,'Activiti简介','Activiti项目是一项新的基于Apache许可的开源BPM平台，从基础开始构建，旨在提供支持新的BPMN 2.0标准，包括支持对象管理组（OMG），面对新技术的机遇，诸如互操作性和云架构，提供技术实现。创始人Tom Baeyens是JBoss jBPM的项目架构师，以及另一位架构师Joram Barrez','2016-03-30 19:42:45',55,0,'<p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">Activiti项目是一项新的基于Apache许可的开源BPM平台，从基础开始构建，旨在提供支持新的BPMN 2.0标准，包括支持对象管理组（OMG），面对新技术的机遇，诸如互操作性和云架构，提供技术实现。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">创始人Tom Baeyens是JBoss jBPM的项目架构师，以及另一位架构师Joram Barrez，一起加入到创建Alfresco这项首次实现Apache开源许可的BPMN 2.0引擎开发中来。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">Activiti是一个独立运作和经营的开源项目品牌，并将独立于Alfresco开源ECM系统运行。 Activiti将是一种轻量级，可嵌入的BPM引擎，而且还设计适用于可扩展的云架构。 Activiti将提供宽松的Apache许可2.0，以便这个项目可以广泛被使用，同时促进Activiti BPM引擎和的BPMN 2.0的匹配，该项目现正由OMG通过标准审定。 加入Alfresco Activiti项目的是VMware的SpringSource分支，Alfresco的计划把该项目提交给Apache基础架构，希望吸引更多方面的BPM专家和促进BPM的创新。</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><img src=\"/ueditor/jsp/upload/image/20160330/1459338126774098603.jpg\" title=\"1458888312900002462.jpg\" alt=\"aa.jpg\" width=\"607\" height=\"453\" style=\"box-sizing: border-box; border: 0px; vertical-align: middle; width: 607px; height: 453px;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">Activiti官方主页：<a href=\"http://www.activiti.org/index.html\" target=\"_blank\" title=\"http://www.activiti.org/index.html\" style=\"box-sizing: border-box; color: rgb(51, 122, 183); text-decoration: none; background-color: transparent;\">http://www.activiti.org/index.html</a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">下载：<a href=\"http://www.activiti.org/download.html\" target=\"_blank\" title=\"http://www.activiti.org/download.html\" style=\"box-sizing: border-box; color: rgb(51, 122, 183); text-decoration: none; background-color: transparent;\">http://www.activiti.org/download.html</a></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">用户指南：<a href=\"http://activiti.org/userguide/index.html\" target=\"_blank\" title=\"http://activiti.org/userguide/index.html\" style=\"box-sizing: border-box; color: rgb(51, 122, 183); text-decoration: none; background-color: transparent;\">http://activiti.org/userguide/index.html</a>&nbsp;&nbsp;（我们通过用户指南来学习Activiti）</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">在线API文档：&nbsp;<a href=\"http://activiti.org/javadocs/index.html\" target=\"_blank\" title=\"http://activiti.org/javadocs/index.html\" style=\"box-sizing: border-box; color: rgb(51, 122, 183); text-decoration: none; background-color: transparent;\">http://activiti.org/javadocs/index.html</a>&nbsp;（我们开发的时候，要用到）</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\"><br style=\"box-sizing: border-box;\"/></p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 10px; color: rgb(51, 51, 51); font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px; line-height: 20px; white-space: normal; background-color: rgb(253, 253, 253);\">Activiti比较牛逼。值得学习。目前主流的是 JBPM和Activiti。Activiti以后更有发展，有必要掌握；</p><p><br/></p>',1,'Activiti 工作流 Activiti简介','/resources/images/01.jpg',1),(74,'12年程序员职业生涯得到的12个经验教训','我已经在ThoughtWorks工作了12年。是不是有点不可思议？回首我的职业生涯，我想写一写我在这些年中经历的困难，以及总结得到的12个非常重要的经验教训。虽然我只选择了12个，但其实远远不止这个数字，但是我觉得12年12个经验教训更有韵味。1.工具不能代替思考在我多年的咨询工作和与许多组织和管理者的共事中','2016-04-08 15:43:50',44,0,'<p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我已经在ThoughtWorks工作了12年。是不是有点不可思议？回首我的职业生涯，我想写一写我在这些年中经历的困难，以及总结得到的12个非常重要的经验教训。虽然我只选择了12个，但其实远远不止这个数字，但是我觉得12年12个经验教训更有韵味。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\"><img class=\"aligncenter size-full wp-image-39460\" title=\"12-years-12-experience\" src=\"http://localhost:8080/blog-web/static/images/12-years-12-experience.jpg\" alt=\"12-years-12-experience\" width=\"628\" height=\"429\" style=\"margin: 0px auto; padding: 5px; border: 1px solid rgb(230, 230, 230); max-width: 628px; display: block; height: 429px; text-align: center; width: 628px;\" border=\"0\" vspace=\"0\"/></p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">1.工具不能代替思考</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在我多年的咨询工作和与许多组织和管理者的共事中，我发现了修复问题的共同套路，那就是管理人员相信工具可以“解决”给出的问题。当问题域被理解透彻，并且不可能有很多例外，以及每个人的行为方式相同的时候，这样的做法很管用。不幸的是，很多现实问题并非如此。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">太多次我目睹管理者使用组织范围的工具锁定到特定的工作方式。自然，该工具未能解决问题，并且阻塞了工作的真正完成。工具应该是用来提供帮助的，用来帮助防止已知错误的，并帮助我们记住重复的任务，而不是取代思考。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">2.除非管理小组能够真正懂得敏捷“转变”的价值，否则它就不能发挥作用</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">许多管理者都犯过这样的错误，那就是认为组织的其他部分在做出改变的同时，只有那些参与工作的人才需要“接受敏捷”。在企业中做这样的统筹需要花费大量的时间和技能，因为你要关注于同步组织在不同水平的变化。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">那些想要组织的一部分接受敏捷的组织面临着真正的威胁。正如有句话所说，“要么改变组织，要么改变组织的方式。”</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">3.学习需要一个安全的环境</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">学习的必要经过是犯错误。在德雷福斯模型中，这意味着，特别是位于高级初级阶段，人需要通过犯错误来学习。但是，当人们觉得犯错会对工作造成坏的影响，会失去同事的尊重或在过程中会伤害到其他人时，那么他们就不会冒犯错的风险。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">因为我热衷于教和学，所以我想办法创造了一个安全的失败空间，在这里失败的话，可以通过犯一些基本的错误来学习。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">4.每个人都可以成为领导者</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我以前写过这个话题的内容，因为这是一个非常重要的观察结果。我看到的一个常见的思维模式陷阱是，人们觉得为了像一个领导，你需要去担任领导的职位。但其实人们可以展示他们的领导力而不论其头衔如何，并且可以通过很多不同的方式做到这一点，只需在没有明确期望或要求的事情上采取行动。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">5.架构师去写代码往往能作出最佳决策</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">在我运行的<a href=\"https://www.thekua.com/atwork/2015/08/holding-a-tech-lead-course-in-sydney/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">Tech Lead courses</a>中，我提倡技术领导者至少将他们30％的时间用来写代码。花时间于编码上有助于建立信任，尊重和理解当前的系统。在做架构决策时，不考虑到当前系统的约束条件往往会造成错误的决定。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">6.改变需要勇气</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我记得曾有人谈论过XP values，其中有一点就是勇气。勇气是领导时所必须的，因为你要冒失败的风险，以及尝试一些新事物的风险/回报。没有风险，往往就不会有很大的回报。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">7.建立信任的关键是言行一致</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">有这么一条古老的箴言，“依其言而行事，勿观其行而仿之。”在现实中，不管你说什么，人们首要的是会记住你是如何行动的。你得始终记得要言行一致。不一致的言行会损害相互之间的信任。说“no”或“现在不行”比答应做一件事却没有办到要好得多。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">8.成功的结对编程与良好的协作相关</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">虽然不是所有的结对编程环境都是健康的，但是我相信，当结对编程有效工作的时候，团队往往具备一种更好的协作文化。许多开发人员更喜欢（长期）<a href=\"http://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">branch-based development</a>的反模式，因为它推迟了反馈和潜在的冲突来源。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我把（可导航的）冲突当作协作团队的一个健康标志。推迟反馈，例如长期分支代码审查的情况往往会导致更多的不满，因为它交付得这么晚。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">9.多模式思维促进更强大的结果</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">我在大学中最喜欢的科目之一是哲学概论，在那个学期中我们每周都会研究不同的哲学家。在我职业生涯的过程中，我渐渐体悟到多样性的价值，并且开始通过多个角度来看问题。系统思想还认识到，事实可以用不同的方式来解释，从而促进产生新的想法或解决方案。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">10.认识到每个人都有不同的优势</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">每个人都是独一无二的，每个人都有自己的长处和短处。虽然我们倾向于寻找志同道合的人，但是拥有广泛优势的团队才能走得更好。这一区域中的优势可能会成为某个上下文中的弱势，所以当团队成员拥有更广泛的优势时，团队会变得更强大。虽然优势的差异可能会导致冲突，但健康的团队会接受彼此之间的差异，而不是憎恶差异。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">11.终身制学习</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">世界在不断的变化，我们总有机会去学习一些新的技能、技术和工具。我们甚至可以去学习如何善于学习，有很多书籍，例如《<a href=\"http://amzn.to/1RQVAJr\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">Apprenticeship Patterns</a>》和《<a href=\"http://amzn.to/1RQVEce\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">The First 20 Hours</a>》可以教你怎么做好这些。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">12.积极的影响迸发幸福感</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">《Drive》，一本脍炙人口的书，谈论了人们如何通过朝某一目标前进而生出幸福感。根据我的经验，帮助别人找到解决方法，对他们产生积极的影响，才是幸福的源泉。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom-color: rgb(238, 238, 238); border-bottom-width: 1px; border-bottom-style: solid; font-size: 18px; font-family: &#39;microsoft yahei&#39;; line-height: 25px; white-space: normal;\">结论</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\">以上这十二个要点并非我在ThoughtWorks的12年时间里所学到的全部经验教训，但它们确确实实是帮助我为客户服务的比较重要的经验教训。</p><p><a id=\"soft-link\" style=\"color: rgb(0, 136, 219); cursor: pointer; font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px; white-space: normal;\" name=\"soft-link\"></a><span style=\"color: rgb(68, 68, 68); font-family: &#39;microsoft yahei&#39;; font-size: 14px; line-height: 25px;\"></span></p><p><br/></p>',4,'程序员 职业 经验','/resources/images/12years.jpg',9),(75,'Jsp的四大作用域与九大对象','内置对象特点:1. 由JSP规范提供,不用编写者实例化。2. 通过Web容器实现和管理3. 所有JSP页面均可使用4. 只有在脚本元素的表达式或代码段中才可使用(<%=使用内置对象%>或<%使用内置对象%>)常用内置对象:1. 输出输入对象:request对象、response对象、out对象2. 通信控制对','2016-04-08 16:58:45',137,1,'<p style=\"text-align:left;\">内置对象特点:</p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">1.&nbsp;</span>由<span style=\"font-family: &#39;Times New Roman&#39;;\">JSP</span>规范提供,不用编写者实例化。</p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">2.&nbsp;</span>通过<span style=\"font-family: &#39;Times New Roman&#39;;\">Web</span>容器实现和管理</p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">3.&nbsp;</span>所有<span style=\"font-family: &#39;Times New Roman&#39;;\">JSP</span>页面均可使用</p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">4.&nbsp;</span>只有在脚本元素的表达式或代码段中才可使用(<span style=\"font-family: &#39;Times New Roman&#39;;\">&lt;%=</span>使用内置对象<span style=\"font-family: &#39;Times New Roman&#39;;\">%&gt;</span>或<span style=\"font-family: &#39;Times New Roman&#39;;\">&lt;%</span>使用内置对象<span style=\"font-family: &#39;Times New Roman&#39;;\">%&gt;</span>)</p><p style=\"text-align:left;\"><br/></p><p style=\"text-align:left;\">常用内置对象<span style=\"font-family: &#39;Times New Roman&#39;;\">:</span></p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">1.&nbsp;</span>输出输入对象:<span style=\"font-family: &#39;Times New Roman&#39;;\">request</span>对象、<span style=\"font-family: &#39;Times New Roman&#39;;\">response</span>对象、<span style=\"font-family: &#39;Times New Roman&#39;;\">out</span>对象</p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">2.&nbsp;</span>通信控制对象:<span style=\"font-family: &#39;Times New Roman&#39;;\">pageContext</span>对象、<span style=\"font-family: &#39;Times New Roman&#39;;\">session</span>对象、<span style=\"font-family: &#39;Times New Roman&#39;;\">application</span>对象</p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">3. Servlet</span>对象:<span style=\"font-family: &#39;Times New Roman&#39;;\">page</span>对象、<span style=\"font-family: &#39;Times New Roman&#39;;\">config</span>对象</p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\">4.&nbsp;</span>错误处理对象:<span style=\"font-family: &#39;Times New Roman&#39;;\">exception</span>对象</p><p style=\"text-align:left;\"><br/></p><p style=\"text-align:left;\"><br/></p><p style=\"text-align:left;\"><span style=\"color: red;\">Request</span><span style=\"color: red;\">(</span><span style=\"color: red;\">Javax.servlet.ServletRequest</span><span style=\"color: red;\">)</span>它包含了有关浏览器请求的信息.通过该对象可以获得请求中的头信息、Cookie和请求参数。</p><p style=\"text-align:left;\"><span style=\"color: red;\">Response</span><span style=\"color: red;\">(</span><span style=\"color: red;\">Javax.servlet.ServletResponse</span><span style=\"color: red;\">)</span>作为JSP页面处理结果返回给用户的响应存储在该对象中。并提供了设置响应内容、响应头以及重定向的方法(如cookies,头信息等)</p><p style=\"text-align:left;\"><span style=\"color: red;\">Out</span><span style=\"color: red;\">(</span><span style=\"color: red;\">Javax.servlet.jsp.JspWriter</span><span style=\"color: red;\">)</span>用于将内容写入JSP页面实例的输出流中,提供了几个方法使你能用于向浏览器回送输出结果。</p><p style=\"text-align:left;\"><span style=\"color: red;\">pageContext</span><span style=\"color: red;\">(</span><span style=\"color: red;\">Javax.servlet.jsp.PageContext</span><span style=\"color: red;\">)</span>描述了当前JSP页面的运行环境。可以返回JSP页面的其他隐式对象及其属性的访问,另外,它还实现将控制权从当前页面传输至其他页面的方法。</p><p style=\"text-align:left;\"><span style=\"color: red;\">Session</span><span style=\"color: red;\">(</span><span style=\"color: red;\">javax.servlet.http.HttpSession</span><span style=\"color: red;\">)</span>会话对象存储有关此会话的信息,也可以将属性赋给一个会话,每个属性都有名称和值。会话对象主要用于存储和检索属性值。</p><p style=\"text-align:left;\"><span style=\"color: red;\">Application</span><span style=\"color: red;\">(</span><span style=\"color: red;\">javax.servle.ServletContext</span><span style=\"color: red;\">)</span>存储了运行JSP页面的servlet以及在同一应用程序中的任何Web组件的上下文信息。</p><p style=\"text-align:left;\"><span style=\"color: red;\">Page</span><span style=\"color: red;\">(</span><span style=\"color: red;\">Java.lang.Object</span><span style=\"color: red;\">)</span>表示当前JSP页面的servlet实例</p><p style=\"text-align:left;\"><span style=\"color: red;\">Config</span><span style=\"color: red;\">(</span><span style=\"color: red;\">javax.servlet.ServletConfig</span><span style=\"color: red;\">)</span>该对象用于存取servlet实例的初始化参数。</p><p style=\"text-align:left;\"><span style=\"color: red;\">Exception</span><span style=\"color: red;\">(</span><span style=\"color: red;\">Javax.lang.Throwable</span><span style=\"color: red;\">)</span>在某个页面抛出异常时,将转发至JSP错误页面,提供此对象是为了在JSP中处理错误。只有在错误页面中才可使用<span style=\"font-family: &#39;Times New Roman&#39;;\">&lt;%@page isErrorPage=</span>“<span style=\"font-family: &#39;Times New Roman&#39;;\">true</span>”<span style=\"font-family: &#39;Times New Roman&#39;;\">%&gt;</span></p><p style=\"text-align:left;\"><span style=\"font-family: &#39;Times New Roman&#39;;\"></span></p><table cellspacing=\"0\" cellpadding=\"0\"><tbody><tr class=\"firstRow\"><td valign=\"top\"><p style=\"text-align:center;\"><strong>Jsp内置对象</strong></p></td><td valign=\"top\"><p style=\"text-align:center;\"><strong>功能</strong></p></td><td valign=\"top\"><p style=\"text-align:center;\"><strong>主要方法</strong></p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">out</p></td><td valign=\"top\"><p style=\"text-align:left;\">向客户端输出数据</p></td><td valign=\"top\"><p style=\"text-align:left;\">print() println() flush() clear() isAutoFlush() getBufferSize() close() …………</p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">request</p></td><td valign=\"top\"><p style=\"text-align:left;\">向客户端请求数据</p></td><td valign=\"top\"><p style=\"text-align:left;\">getAttributeNames() getCookies() getParameter() getParameterValues() setAttribute() getServletPath() …………..</p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">response</p></td><td valign=\"top\"><p style=\"text-align:left;\">封装了jsp产生的响应,然后被发送到客户端以响应客户的请求</p></td><td valign=\"top\"><p style=\"text-align:left;\">addCookie() sendRedirect() setContentType()</p><p style=\"text-align:left;\">flushBuffer() getBufferSize() getOutputStream()</p><p style=\"text-align:left;\">sendError() containsHeader()……………</p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">application</p></td><td valign=\"top\"><br/></td><td valign=\"top\"><br/></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">config</p></td><td valign=\"top\"><p style=\"text-align:left;\">表示Servlet的配置,当一个Servlet初始化时,容器把某些信息通过此对象传递给这个Servlet</p></td><td valign=\"top\"><p style=\"text-align:left;\">getServletContext() getServletName() getInitParameter() getInitParameterNames()……………</p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">page</p></td><td valign=\"top\"><p style=\"text-align:left;\">Jsp实现类的实例,它是jsp本身,通过这个可以对它进行访问</p></td><td valign=\"top\"><p style=\"text-align:left;\">flush()………</p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">pagecontext</p></td><td valign=\"top\"><p style=\"text-align:left;\">为JSP页面包装页面的上下文。管理对属于JSP中特殊可见部分中己经命名对象的该问</p></td><td valign=\"top\"><p style=\"text-align:left;\">forward() getAttribute() getException() getRequest() getResponse() getServletConfig()</p><p style=\"text-align:left;\">getSession() getServletContext() setAttribute()</p><p style=\"text-align:left;\">removeAttribute() findAttribute() ……………</p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">session</p></td><td valign=\"top\"><p style=\"text-align:left;\">用来保存每个用户的信息,以便跟踪每个用户的操作状态</p></td><td valign=\"top\"><p style=\"text-align:left;\">getAttribute() getId() getAttributeNames() getCreateTime() getMaxInactiveInterval()</p><p style=\"text-align:left;\">invalidate() isNew()</p></td></tr><tr><td valign=\"top\"><p style=\"text-align:center;\">exception</p></td><td valign=\"top\"><p style=\"text-align:left;\">反映运行的异常</p></td><td valign=\"top\"><p style=\"text-align:left;\">getMessage()…………</p><p style=\"text-align:left;\"><br/></p></td></tr></tbody></table><p><br/></p><p style=\"text-align:left;\"><br/></p><p style=\"text-align:left;\">pageContext, request, session、application四个作用域中</p><p style=\"text-align:left;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;1、如果把变量放到pageContext里，就说明它的作用域是page，它的有效范围只在当前jsp页面里。&nbsp;从把变量放到pageContext开始，到jsp页面结束，你都可以使用这个变量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 2、如果把变量放到request里，就说明它的作用域是request，它的有效范围是当前请求周期。所谓请求周期，就是指从http请求发起，到服务器处理结束，返回响应的整个过程。在这个过&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程中可能使用forward的方式跳转了多个jsp页面，在这些页面里你都可以使用这个变量。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 3、如果把变量放到session里，就说明它的作用域是session，它的有效范围是当前会话。所谓当前会话，就是指从用户打开浏览器开始，到用户关闭浏览器这中间的过程。这个过程可能包含多个请求响应。也就是说，只要用户不关浏览器，服务器就有办法知道这些请求是一个人发起的，整个过程被称为一个会话（session），而放到会话中的变量，</p><p style=\"text-align:left;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 4、如果把变量放到application里，就说明它的作用域是application，它的有效范围是整个应用。整个应用是指从应用启动，到应用结束。我们没有说“从服务器启动，到服务器关闭”是因为一个服务器可能部署多个应用，当然你关闭了服务器，就会把上面所有的应用都关闭了。application作用域里的变量，它们的存活时间是最长的，如果不进行手工删除，它们就一直可以使用。与上述三个不同的是，application里的变量可以被所有用户共用。如果用户甲的操作修改了application中的变量，用户乙访问时得到的是修改后的值。这在其他scope中都是不会发生的，page, request, session都是完全隔离的，无论如何修改都不会影响其他</p><p><br/></p>',1,'jsp 四大对象','/resources/images/jsp.jpg',69),(76,'Java transient关键字使用总结','哎，虽然自己最熟的是Java，但很多Java基础知识都不知道，比如transient关键字以前都没用到过，所以不知道它的作用是什么，今天做笔试题时发现有一题是关于这个的，于是花个时间整理下transient关键字的使用，涨下姿势~~~好了，废话不多说，下面开始：1. transient的作用及使用方法我们都知','2016-09-28 12:04:52',3,0,'<p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">哎，虽然自己最熟的是Java，但很多Java基础知识都不知道，比如transient关键字以前都没用到过，所以不知道它的作用是什么，今天做笔试题时发现有一题是关于这个的，于是花个时间整理下transient关键字的使用，涨下姿势~~~好了，废话不多说，下面开始：</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">1. transient的作用及使用方法</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">我们都知道一个对象只要实现了Serilizable接口，这个对象就可以被序列化，java的这种序列化模式为开发者提供了很多便利，我们可以不必关系具体序列化的过程，只要这个类实现了Serilizable接口，这个类的所有属性和方法都会自动序列化。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">然而在实际开发过程中，我们常常会遇到这样的问题，这个类的有些属性需要序列化，而其他属性不需要被序列化，打个比方，如果一个用户有一些敏感信息（如密码，银行卡号等），为了安全起见，不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">总之，java 的transient关键字为我们提供了便利，你只需要实现Serilizable接口，将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会序列化到指定的目的地中。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">示例code如下：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); background-color: rgb(251, 251, 251); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &quot;courier new&quot;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial;\">import&nbsp;java.io.FileInputStream;import&nbsp;java.io.FileNotFoundException;import&nbsp;java.io.FileOutputStream;import&nbsp;java.io.IOException;import&nbsp;java.io.ObjectInputStream;import&nbsp;java.io.ObjectOutputStream;import&nbsp;java.io.Serializable;/**\n&nbsp;*&nbsp;@description&nbsp;使用transient关键字不序列化某个变量\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意读取的时候，读取数据的顺序一定要和存放数据的顺序保持一致\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;*&nbsp;@author&nbsp;Alexia\n&nbsp;*&nbsp;@date&nbsp;&nbsp;2013-10-15\n&nbsp;*/public&nbsp;class&nbsp;TransientTest&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;new&nbsp;User();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.setUsername(&quot;Alexia&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.setPasswd(&quot;123456&quot;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;read&nbsp;before&nbsp;Serializable:&nbsp;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;username:&nbsp;&quot;&nbsp;+&nbsp;user.getUsername());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(&quot;password:&nbsp;&quot;&nbsp;+&nbsp;user.getPasswd());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;os&nbsp;=&nbsp;new&nbsp;ObjectOutputStream(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;FileOutputStream(&quot;C:/user.txt&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.writeObject(user);&nbsp;//&nbsp;将User对象写进文件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.flush();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.close();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(FileNotFoundException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;is&nbsp;=&nbsp;new&nbsp;ObjectInputStream(new&nbsp;FileInputStream(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;C:/user.txt&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;=&nbsp;(User)&nbsp;is.readObject();&nbsp;//&nbsp;从流中读取User的数据\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is.close();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;\\nread&nbsp;after&nbsp;Serializable:&nbsp;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;username:&nbsp;&quot;&nbsp;+&nbsp;user.getUsername());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(&quot;password:&nbsp;&quot;&nbsp;+&nbsp;user.getPasswd());\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(FileNotFoundException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(ClassNotFoundException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}class&nbsp;User&nbsp;implements&nbsp;Serializable&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;long&nbsp;serialVersionUID&nbsp;=&nbsp;8294180014912103005L;&nbsp;&nbsp;\n\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;username;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;transient&nbsp;String&nbsp;passwd;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getUsername()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;username;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setUsername(String&nbsp;username)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.username&nbsp;=&nbsp;username;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getPasswd()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;passwd;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setPasswd(String&nbsp;passwd)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.passwd&nbsp;=&nbsp;passwd;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">输出为：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs perl\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); background-color: rgb(251, 251, 251); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &quot;courier new&quot;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial;\">read&nbsp;before&nbsp;Serializable:&nbsp;\nusername:&nbsp;Alexia\npassword:&nbsp;123456read&nbsp;after&nbsp;Serializable:&nbsp;\nusername:&nbsp;Alexia\npassword:&nbsp;null</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">密码字段为null，说明反序列化时根本没有从文件中获取到信息。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">2. transient使用小结</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">1）一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">2）transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">3）被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">第三点可能有些人很迷惑，因为发现在User类中的username字段前加上static关键字后，程序运行结果依然不变，即static类型的username也读出来为“Alexia”了，这不与第三点说的矛盾吗？实际上是这样的：第三点确实没错（一个静态变量不管是否被transient修饰，均不能被序列化），反序列化后类中static型变量username的值为当前JVM中对应static变量的值，这个值是JVM中的不是反序列化得出的，不相信？好吧，下面我来证明：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); background-color: rgb(251, 251, 251); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &quot;courier new&quot;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial;\">import&nbsp;java.io.FileInputStream;import&nbsp;java.io.FileNotFoundException;import&nbsp;java.io.FileOutputStream;import&nbsp;java.io.IOException;import&nbsp;java.io.ObjectInputStream;import&nbsp;java.io.ObjectOutputStream;import&nbsp;java.io.Serializable;/**\n&nbsp;*&nbsp;@description&nbsp;使用transient关键字不序列化某个变量\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意读取的时候，读取数据的顺序一定要和存放数据的顺序保持一致\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;*&nbsp;@author&nbsp;Alexia\n&nbsp;*&nbsp;@date&nbsp;&nbsp;2013-10-15\n&nbsp;*/public&nbsp;class&nbsp;TransientTest&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User&nbsp;user&nbsp;=&nbsp;new&nbsp;User();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.setUsername(&quot;Alexia&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user.setPasswd(&quot;123456&quot;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;read&nbsp;before&nbsp;Serializable:&nbsp;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;username:&nbsp;&quot;&nbsp;+&nbsp;user.getUsername());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(&quot;password:&nbsp;&quot;&nbsp;+&nbsp;user.getPasswd());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;os&nbsp;=&nbsp;new&nbsp;ObjectOutputStream(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;FileOutputStream(&quot;C:/user.txt&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.writeObject(user);&nbsp;//&nbsp;将User对象写进文件\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.flush();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;os.close();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(FileNotFoundException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;在反序列化之前改变username的值\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;User.username&nbsp;=&nbsp;&quot;jmwang&quot;;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;is&nbsp;=&nbsp;new&nbsp;ObjectInputStream(new&nbsp;FileInputStream(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;C:/user.txt&quot;));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;=&nbsp;(User)&nbsp;is.readObject();&nbsp;//&nbsp;从流中读取User的数据\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is.close();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;\\nread&nbsp;after&nbsp;Serializable:&nbsp;&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;username:&nbsp;&quot;&nbsp;+&nbsp;user.getUsername());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.err.println(&quot;password:&nbsp;&quot;&nbsp;+&nbsp;user.getPasswd());\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(FileNotFoundException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(ClassNotFoundException&nbsp;e)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}class&nbsp;User&nbsp;implements&nbsp;Serializable&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;final&nbsp;long&nbsp;serialVersionUID&nbsp;=&nbsp;8294180014912103005L;&nbsp;&nbsp;\n\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;String&nbsp;username;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;transient&nbsp;String&nbsp;passwd;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getUsername()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;username;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setUsername(String&nbsp;username)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.username&nbsp;=&nbsp;username;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getPasswd()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;passwd;\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setPasswd(String&nbsp;passwd)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.passwd&nbsp;=&nbsp;passwd;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">运行结果为：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs perl\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); background-color: rgb(251, 251, 251); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &quot;courier new&quot;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial;\">read&nbsp;before&nbsp;Serializable:&nbsp;\nusername:&nbsp;Alexia\npassword:&nbsp;123456read&nbsp;after&nbsp;Serializable:&nbsp;\nusername:&nbsp;jmwang\npassword:&nbsp;null</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">这说明反序列化后类中static型变量username的值为当前JVM中对应static变量的值，为修改后jmwang，而不是序列化时的值Alexia。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">3. transient使用细节——被transient关键字修饰的变量真的不能被序列化吗？</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">思考下面的例子：</p><pre class=\"brush: java; gutter: true; first-line: 1 hljs\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); background-color: rgb(251, 251, 251); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &quot;courier new&quot;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial;\">import&nbsp;java.io.Externalizable;import&nbsp;java.io.File;import&nbsp;java.io.FileInputStream;import&nbsp;java.io.FileOutputStream;import&nbsp;java.io.IOException;import&nbsp;java.io.ObjectInput;import&nbsp;java.io.ObjectInputStream;import&nbsp;java.io.ObjectOutput;import&nbsp;java.io.ObjectOutputStream;/**\n&nbsp;*&nbsp;@descripiton&nbsp;Externalizable接口的使用\n&nbsp;*&nbsp;\n&nbsp;*&nbsp;@author&nbsp;Alexia\n&nbsp;*&nbsp;@date&nbsp;2013-10-15\n&nbsp;*\n&nbsp;*/public&nbsp;class&nbsp;ExternalizableTest&nbsp;implements&nbsp;Externalizable&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;transient&nbsp;String&nbsp;content&nbsp;=&nbsp;&quot;是的，我将会被序列化，不管我是否被transient关键字修饰&quot;;&nbsp;&nbsp;&nbsp;&nbsp;@Override\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;writeExternal(ObjectOutput&nbsp;out)&nbsp;throws&nbsp;IOException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.writeObject(content);\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;@Override\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;readExternal(ObjectInput&nbsp;in)&nbsp;throws&nbsp;IOException,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ClassNotFoundException&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content&nbsp;=&nbsp;(String)&nbsp;in.readObject();\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;throws&nbsp;Exception&nbsp;{\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExternalizableTest&nbsp;et&nbsp;=&nbsp;new&nbsp;ExternalizableTest();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutput&nbsp;out&nbsp;=&nbsp;new&nbsp;ObjectOutputStream(new&nbsp;FileOutputStream(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new&nbsp;File(&quot;test&quot;)));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.writeObject(et);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectInput&nbsp;in&nbsp;=&nbsp;new&nbsp;ObjectInputStream(new&nbsp;FileInputStream(new&nbsp;File(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;test&quot;)));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;et&nbsp;=&nbsp;(ExternalizableTest)&nbsp;in.readObject();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(et.content);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.close();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in.close();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">content变量会被序列化吗？好吧，我把答案都输出来了，是的，运行结果就是：</p><pre class=\"hljs java\" style=\"margin: 15px auto; padding: 10px 15px; overflow-x: auto; color: rgb(51, 51, 51); background-color: rgb(251, 251, 251); word-break: break-all; word-wrap: break-word; white-space: pre-wrap; font-stretch: normal; font-size: 12px; line-height: 20px; font-family: &quot;courier new&quot;; border-width: 1px 1px 1px 4px; border-style: solid; border-color: rgb(221, 221, 221); border-image: initial;\">是的，我将会被序列化，不管我是否被transient关键字修饰</pre><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">这是为什么呢，不是说类的变量被transient关键字修饰以后将不能序列化了吗？</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">我们知道在Java中，对象的序列化可以通过实现两种接口来实现，若实现的是Serializable接口，则所有的序列化将会自动进行，若实现的是Externalizable接口，则没有任何东西可以自动序列化，需要在writeExternal方法中进行手工指定所要序列化的变量，这与是否被transient修饰无关。因此第二个例子输出的是变量content初始化的内容，而不是null。</p><p><br/></p>',1,'Java transient','/resources/images/no_picture.jpg',3),(77,'这3张图片，改变无数人，你敢看吗？','有时候，一些深刻的道理，仅需一幅小小的道理便可说明。你，看明白了吗？图一：没有行动，懒惰就会生根发芽！没有梦想，堕落就会生根发芽！时间越长，根就越来越深！到时候想站起来就会是件很困难的事。拒绝拖延，拒绝懒惰！想要，就立即行动。与君共勉！图二：每个人一生都需要有两个这样的朋友：他有难时，你撑着；你有难时，他撑着','2016-10-05 13:35:32',1,0,'<p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">有时候，</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">一些深刻的道理，</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">仅需一幅小小的道理便可说明。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">你，</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">看明白了吗？</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">图一：</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"354\" height=\"374\" data-original=\"/d/file/reading/2016-10-04/9e41abdfd6fe4d6f9a3cd5bfec76da8d.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/9e41abdfd6fe4d6f9a3cd5bfec76da8d.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">没有行动，懒惰就会生根发芽！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">没有梦想，堕落就会生根发芽！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">时间越长，根就越来越深！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">到时候想站起来就会是件很困难的事。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">拒绝拖延，拒绝懒惰！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">想要，就立即行动。与君共勉！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">图二：</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"440\" height=\"539\" data-original=\"/d/file/reading/2016-10-04/417594788ece4981311b4f61a702cb62.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/417594788ece4981311b4f61a702cb62.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">每个人一生都需要有两个这样的朋友：</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">他有难时，你撑着；</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">你有难时，他撑着。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">拥有这样的人生才无惧，才精彩！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">这就是朋友，这就是团结，这就是团队！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">我愿做你的其中一位。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">图三：</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"595\" height=\"730\" data-original=\"/d/file/reading/2016-10-04/7d50bf1e346f3a6952270dcc079baa80.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/7d50bf1e346f3a6952270dcc079baa80.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">小合作要放下自我，彼此尊重；</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">大合作要放下利益，彼此平衡；</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">一辈子的合作要放下性格，彼此成就。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">一味索取，不懂付出；</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">或一味任性，不知让步，</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">到最后必然输得精光。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">共同成长，才是生存之道。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">工作如此，</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">婚姻如此，</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">友谊如此，</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">事业亦如此！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><strong>你觉得我说的对吗？</strong></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">1、有时候生活轻不轻松，就看你选择了走什么样的路！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"440\" height=\"582\" data-original=\"/d/file/reading/2016-10-04/ace44fe579f2eefd57e54b545d5822f6.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/ace44fe579f2eefd57e54b545d5822f6.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">2、拥有资源的多少并不重要，如果你不懂得利用，永远都是不够的。</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"484\" height=\"330\" data-original=\"/d/file/reading/2016-10-04/27070b58cf8f51e79e4acad00de88f88.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/27070b58cf8f51e79e4acad00de88f88.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">3、向你伸出手的人，不一定都真心想救你！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"600\" height=\"459\" data-original=\"/d/file/reading/2016-10-04/6be775961666aa32c6e7fc208bc720ab.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/6be775961666aa32c6e7fc208bc720ab.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">4、你永远无法满足所有人！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"461\" height=\"356\" data-original=\"/d/file/reading/2016-10-04/d4698d99328eefc2e1b5de614c5027c2.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/d4698d99328eefc2e1b5de614c5027c2.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">5、别放弃，再坚持一下就到成功彼岸！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"570\" height=\"464\" data-original=\"/d/file/reading/2016-10-04/718cc58d02b7f5ecb988b2b4926ff24a.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/718cc58d02b7f5ecb988b2b4926ff24a.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">6、生活要懂得苦中作乐！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"353\" height=\"353\" data-original=\"/d/file/reading/2016-10-04/5121ebaa179764bc10f904ccf81a9b26.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/5121ebaa179764bc10f904ccf81a9b26.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">7、方向不对，越努力越窘迫！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"396\" height=\"325\" data-original=\"/d/file/reading/2016-10-04/39f6db4553dba707bf9dca4493da34c2.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/39f6db4553dba707bf9dca4493da34c2.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">8、不要墨守成规，敢于创新才能打败对手！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"640\" height=\"677\" data-original=\"/d/file/reading/2016-10-04/3c3ef2982747e78d0563b6907fa2d8d3.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/3c3ef2982747e78d0563b6907fa2d8d3.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\">9、也许有一天，你发觉日子特别的艰难，那可能是这次的收获特别的巨大！</p><p style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px 0px 26px; border: 0px; line-height: 26px; color: rgb(51, 51, 51); font-family: Arial, 微软雅黑; text-indent: 35px; white-space: normal;\"><img width=\"510\" height=\"664\" data-original=\"/d/file/reading/2016-10-04/123334ca70dd5d675037368c7cde9ccf.jpg\" alt=\"\" src=\"http://www.cqcb.com/d/file/reading/2016-10-04/123334ca70dd5d675037368c7cde9ccf.jpg\" style=\"margin: 0px auto; padding: 0px; border: 0px; display: block;\"/></p><p><br/></p>',5,'启示 改变','/resources/images/no_picture.jpg',1),(78,'INSTALL_PARSE_FAILED_MANIFEST_MALFORMED','摘要: 安装APK时引发INSTALL_PARSE_FAILED_MANIFEST_MALFORMED错误的几种可能。1. 申明了新的组件(Activity, Service...etc) 在代码中却没有实现它。 2. 组件的Android:Name属性没有写全，应该是.MainActivity这种形式，少了','2016-10-11 14:59:56',1,0,'<p>摘要: 安装APK时引发INSTALL_PARSE_FAILED_MANIFEST_MALFORMED错误的几种可能。</p><p><val data-name=\"blog_content_type\" data-value=\"richtext\" style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"></val></p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-decoration: underline;\">1. 申明了新的组件(Activity, Service...etc) 在代码中却没有实现它。</span></strong></span></p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-decoration: underline;\"></span></strong>&nbsp;</p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-decoration: underline;\">2. 组件的Android:Name属性没有写全，应该是.MainActivity这种形式，少了.就不行了。</span></strong></p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-decoration: underline;\"></span></strong>&nbsp;</p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-decoration: underline;\">3. 尝试去掉在Service组件中使用的 android:process 属性，然后你就会发现可以将APK刷到设备上了。</span></strong></p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-decoration: underline;\"></span></strong>&nbsp;</p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\"><strong style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent;\"><span style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; text-decoration: underline;\">ps:</span></strong></p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\">android:process</p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\">定义activity运行所在的进程名称。一般情况下，应用的所有组件都运行在为应用创建的默认的进程中，该默认进程的名称应用包名称一致。通过定义&lt;application&gt;元素的“process”属性可以为所有组件指定一个不同的默认进程。但是任意组件都可以重写默认进程，以便实现多进程操作。</p><p style=\"box-sizing: inherit; -webkit-tap-highlight-color: transparent; margin-bottom: 16px;\">如果该属性指定名称以“：”开头，则一个新的专属于该应用的进程将会被创建。如果该进程名以小写字母开头，则为该activity提供权限以让其在一个全局的进程中运行。这样会允许多个应用的不同组件共用一个进程，以便节省资源。</p><p><br/></p>',13,' Android INSTALL_PARSE_FAILED_MANIFEST_MALFORMED APK安装','/resources/images/no_picture.jpg',1),(79,'各个开发阶段最流行的Java工具汇总','仅仅因为工具是最流行的并不意味着它是“最好的”。最好的总是和具体的编程内容相关。不过，人气，不可否认是选择同类工具时的重要指标。这并不是说流行本身会增加工具的价值；价值在于资源和来自于社区的支持。流行的工具更易于学习，因为有如此多的人可以帮助你使用它们。并且流行的开源工具，往往bug较少，因为有更多的目光都集','2016-10-12 12:05:49',3,0,'<p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">仅仅因为工具是最流行的并不意味着它是“最好的”。最好的总是和具体的编程内容相关。不过，人气，不可否认是选择同类工具时的重要指标。这并不是说流行本身会增加工具的价值；价值在于资源和来自于社区的支持。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">流行的工具更易于学习，因为有如此多的人可以帮助你使用它们。并且流行的开源工具，往往bug较少，因为有更多的目光都集中在代码上，有更多的人在大范围的场景中测试它。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">所以，虽然总有像Apache和Nginx这样的对位工具——两web服务器：Apache被更多的网站使用，但Nginx更多的是被web上的顶级站点使用，这意味着它被一些最好的工程团队所使用——在很多情况下，知名度可以成为工具之间的关键区别。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">名单涵盖了绝大多数你在开发Java应用程序时所需工具的重要内容。里面有最流行的工具“冠军”，涵盖了各个类别，此外还有来自于大型Java社区调查证明其地位的在一些背景和引文下稍逊一筹的“亚军”工具。Java初学者应该看一看所有这些顶级工具以便于更了解这个生态系统。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">语言版本</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Java 8</strong><br/><strong style=\"margin: 0px; padding: 0px;\"></strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Java 7</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Java 8有可能是迄今为止最快被采用的新版本了。这可能是因为一些期待已久的现代语言功能如lambda表达式，减少了一些Java经常被批评的冗长程度。性能的提升也是很大的一个卖点。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">虽然现在新的Java app和主要的app是用Java 8写的，但是还有大量现有的Java app仍然使用的是Java 7或6。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">我不会趟进Java EE与Spring之间的竞争，因为相关的统计数据总是存在争议，但是两者在用户数量上似乎相当接近。大约三分之一的开发人员在使用其中之一的同时还是用了另外一个。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.9，1.10）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://static.dzone.com/uvej/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（图1＆2）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">编辑器和IDE</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：（存在争议）Eclipse和IntelliJ IDEA</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Netbeans</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Eclipse和Netbeans都是免费和开源的。Eclipse因其大型的社区和插件（很容易写）的富有而闻名，这使得该平台可无休止地扩展，但有时会加载缓慢和繁琐。Netbeans因包括如Maven和Git的整合开箱即用而显得与众不同。IntelliJ具有商业产品的性能和完美。它有免费和付费两种版本。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a title=\"IntelliJ IDEA的光芒会盖过Eclipse吗 - 码农网\" href=\"http://www.codeceo.com/article/intellij-idea-eclipse.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">IntelliJ IDEA的光芒会盖过Eclipse吗</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（IntelliJ IDEA是本报告中的最佳IDE，图1.11）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"https://static.dzone.com/uvej/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（Eclipse是其中的最佳IDE，图4）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">web框架</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：AngularJS，Spring MVC</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Java Server Faces（JSF）</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">虽然三分之二的调查显示了Spring MVC优于Java Server Faces（JSF），但是来自于<a href=\"https://dzone.com/articles/poll-what-java-jvm-frameworks-do-you-use\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">DZone大型投票</a>（图5）显示Spring MVC和JSF之间的打成了平手。这可能已经没有多大关系了，因为JavaScript框架在许多流行的web堆栈中变得越来越有价值。一项问及AngularJS与纯Java Web框架使用率比较的调查显示，在前端上，AngularJS优于最流行的Java框架。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a title=\"调查：Java程序员最亲睐的Web框架 - 码农网\" href=\"http://www.codeceo.com/article/java-survey-web-frameworks.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">调查：Java程序员最亲睐的Web框架</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.16）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"https://static.dzone.com/uvej/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（表3，第5段显示平局）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[4]&nbsp;<a href=\"https://dzone.com/articles/poll-what-java-jvm-frameworks-do-you-use\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">JSF和Spring MVC在Java打成平手 / JVM框架调查投票</a></p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">应用服务器</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Tomcat</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Wildfly</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Tomcat已经很多年担任最常用Java应用服务器的称号了。它轻巧，不会尝试实现所有的Java EE规范。在一些调查中，Jetty，另一个轻量级的应用服务器，领先于Wildfly——顶部Java EE——支持的应用程序服务器。Tomcat是简单Java应用的领导者，而轻量级的应用服务器毫无疑问是微服务架构的首选。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.13）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://static.dzone.com/uvej/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（图4）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"http://pages.zeroturnaround.com/RebelLabs-AllReportLanders_TheGreatAppServerDebate.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2013年RebelLabs应用程序服务器辩论</a>（为了更深入地了解应用服务器用例）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">测试框架</h2><h3 style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 14px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">单元测试</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">冠军：JUnit</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">实际上的Java单元测试框架。</p><h3 style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 14px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">Mocking</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">冠军：Mockito</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">显然是Java mocking框架中的最爱。</p><h3 style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 14px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">自动化web浏览器测试</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">冠军：Selenium</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Selenium不过是自动化了浏览器。开发人员通常与测试框架一起使用这个工具来做大规模的web应用程序测试。</p><h3 style=\"margin: 0px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 14px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">行为驱动开发测试（BDD）</h3><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">冠军：Cucumber-JVM，Spock</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Cucumber原本是一个Ruby项目，但现在具有针对每一种主要编程语言的实现。Spock支持JVM语言Groovy和Java。它还可以处理很多Mockito能做的事情。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a title=\"8个超实用的Java测试工具和框架 - 码农网\" href=\"http://www.codeceo.com/article/8-java-test-framework.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">8个超实用的Java测试工具和框架</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://zeroturnaround.com/wp-content/uploads/2014/06/jtnt-mindmap.png\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2014年RebelLabs Java工具和技术趋势报告</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"https://dzone.com/guides/continuous-delivery-2\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（第20页）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">版本控制系统</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Git</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Subversion</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">请记住，Git比只用GitHub及其约定的版本控制更灵活。Git似乎已经几乎打赢了版本控制的战役，大多数的Subversion和CVS用户被开发人员抓进了一套遗留的工具中。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"http://www.codeceo.com/article/tag/git\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">Git教程及相关文章</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.18）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">持续集成</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Jenkins</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：No CI server</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">这是另一个有着明确领导者的领域。Jenkins的灵活的插件系统，导致其在过去的五年时间里，逐渐上升到主导地位。不使用任何CI&nbsp;server的人比使用任意单一Jenkins竞争者的人要多。最接近的竞争者是Bamboo。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.13）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://dzone.com/guides/continuous-delivery-2\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版持续交付DZone指南</a>（第20页）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"https://static.dzone.com/uvej/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（第4段）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">数据库</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：OracleDB</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：MySQL</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">选择数据库相比这里的许多其他工具，更依赖于上下文。根据你要构建的app，你可能需要一个轻巧的key-value存储，以及一个巨大的列式数据库。对于大多数应用程序，关系数据库可以把这工作做好，这就是为什么你会看到两个关系型数据库站到Java工具世界之巅的原因。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Oracle是这篇文章中提到的少数商业产品之一，这意味着它有很多的“企业”特点。 MySQL或甚至SQLite是开源的强大选择。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a title=\"2015年240个数据库引擎排名参考 - 码农网\" href=\"http://www.codeceo.com/article/2015-240-db-ranking.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015年240个数据库引擎排名参考</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"http://db-engines.com/en/ranking\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">DB-引擎数据库排名</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"https://static.dzone.com/datapersistence_2016/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年数据库DZone指南</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[4]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.14，这是唯一特定Java的一个）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">对象关系映射（ORM）</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Java Persistence API（JPA）/Hibernate</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Java Database Connectivity API（JDBC）</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Hibernate是如此受欢迎，若干年前它得到了Java Persistence API规范的标准化。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://static.dzone.com/uvej/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（第4段）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"http://pages.zeroturnaround.com/Java-Tools-Technologies.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2014年RebelLabs Java工具和技术趋势报告</a>（第31页）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">静态代码分析</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：FindBugs</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：SonarQube</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">这两个工具都在范围上有很大的不同，因此很难比较。FindBugs是一个简单的静态代码分析工具，而SonarQube是一个用于代码质量分析，语法检查和代码度量的完整平台。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://dzone.com/guides/continuous-delivery-2\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版持续交付DZone指南</a>（第20页）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"http://pages.zeroturnaround.com/Java-Tools-Technologies.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2014年RebelLabs Java工具和技术趋势报告</a>（第2页）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">语法检查</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Checkstyle</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Eclipse</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">此功能可以在主要的<span class=\"wp_keywordlink\"><a href=\"http://www.codeceo.com/article/11-free-java-ide-editor.html\" title=\"java ide\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">java ide</a></span>中找到，但如果你需要一个单独的程序用于专门的语法检查（又名“linting”），Checkstyle是一个不错的选择。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://dzone.com/guides/continuous-delivery-2\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版持续交付DZone指南</a>（第20页）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">工件管理</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Sonatype Nexus</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：JFrog Artifactory</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">许多开发人员在版本化JAR，WAR，库和完整的app时不使用工件仓库。但是，如果他们这样做的话，Nexus有用户优势。两者都是商业产品。Apache Archiva是一个开源选择。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"http://pages.zeroturnaround.com/Java-Tools-Technologies.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2014年RebelLabs Java工具和技术趋势报告</a>（第45页）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">依赖注入</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Spring Framework DI</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Google Guice</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Spring框架在依赖注入上做的很好，但谷歌的开发者用Guice也创造了一个流行工具。Dagger没有那么普及，但它很新，并且用户在增加，特别是围绕Android开发。它被用于Pokémon Go。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://polldaddy.com/poll/9473094/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">reddit.com/r<wbr/>/java</a></p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">性能分析/分析器</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">Java分析</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：VisualVM</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：No profiler</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">显著数量的Java开发人员不使用任何分析器。YourKit是VisualVM另一个流行的替代分析器。</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">负载测试</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：JMeter</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：LoadRunner</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">除了这两个之外，还有大量各种负载测试工具，所以一定要研究这个市场。JMeter是开源的，而LoadRunner是商业产品。商业产品的主要优点是运行测试的云服务范围。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.19）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://dzone.com/guides/continuous-delivery-2,%20page%2020\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版持续交付DZone指南</a>（第20页）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">自动化构建与依赖管理</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">冠军：Maven</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\"><strong style=\"margin: 0px; padding: 0px;\">亚军：Gradle</strong></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">虽然Maven明显领先，但Gradle仍然被广泛用作辅助构建工具，并且是Android的标准构建工具。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a title=\"Gradle在大型Java项目上的应用 - 码农网\" href=\"http://www.codeceo.com/article/gradle-java-usage.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">Gradle在大型Java项目上的应用</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a href=\"https://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-2016/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年RebelLabs Java工具和技术趋势报告</a>（图1.12）</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"https://static.dzone.com/uvej/index.html#p=4\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2015版Java生态系统DZone指南</a>（图4）</p><h2 style=\"margin: 30px 0px 14px; padding: 0px 0px 5px; color: rgb(34, 34, 34); border-bottom: 1px solid rgb(238, 238, 238); font-size: 18px; font-family: &quot;microsoft yahei&quot;; white-space: normal;\">日志库</h2><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">冠军：<span class=\"wp_keywordlink\"><a href=\"http://www.codeceo.com/article/log4j-usage.html\" title=\"log4j\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">log4j</a></span></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">日志库的亚军还不清楚，因为在这个工具类上较少有研究。这篇文章给出了围绕Java流行的日志库和设置问题。</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">数据：</p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[1]&nbsp;<a title=\"Java程序员最常用的8个Java日志框架 - 码农网\" href=\"http://www.codeceo.com/article/8-java-log-framework.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">Java程序员最常用的8个Java日志框架</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[2]&nbsp;<a title=\"最详细的Log4j使用教程 - 码农网\" href=\"http://www.codeceo.com/article/log4j-usage.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">最详细的Log4j使用教程</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[3]&nbsp;<a href=\"http://blog.takipi.com/the-top-100-java-libraries-in-2016-after-analyzing-47251-dependencies/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2016年Takipi&nbsp;Java库&nbsp;100强</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">[4]&nbsp;<a href=\"http://zeroturnaround.com/rebellabs/the-state-of-logging-in-java-2013/\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">2013年Java日志状态</a></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px; color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\">你有什么要补充的最新的Java工具研究吗？欢迎分享。</p><p><a id=\"soft-link\" style=\"color: rgb(0, 136, 219); cursor: pointer; font-family: &quot;microsoft yahei&quot;; font-size: 14px; white-space: normal;\" name=\"soft-link\"></a><span style=\"color: rgb(68, 68, 68); font-family: &quot;microsoft yahei&quot;; font-size: 14px;\"></span></p><p style=\"margin-top: 0px; margin-bottom: 15px; padding: 0px;\">译文链接：<a href=\"http://www.codeceo.com/article/java-tools-every-phase-dev.html\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">http://www.codeceo.com/article/java-tools-every-phase-dev.html</a><br/>英文原文：<a href=\"https://dzone.com/articles/research-most-popular-java-tools-for-every-phase-o\" target=\"_blank\" style=\"color: rgb(0, 136, 219); text-decoration: none; cursor: pointer;\">The Most Popular Java Tools for Every Phase of Development</a></p><p><br/></p>',1,'java 工具','/resources/images/no_picture.jpg',3);
/*!40000 ALTER TABLE `t_blog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_blogger`
--

DROP TABLE IF EXISTS `t_blogger`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_blogger` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(50) DEFAULT NULL,
  `password` varchar(100) DEFAULT NULL,
  `profile` text,
  `nick_name` varchar(50) DEFAULT NULL,
  `sign` varchar(100) DEFAULT NULL,
  `image_name` varchar(100) DEFAULT NULL,
  `version` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_blogger`
--

LOCK TABLES `t_blogger` WRITE;
/*!40000 ALTER TABLE `t_blogger` DISABLE KEYS */;
INSERT INTO `t_blogger` VALUES (1,'Dong','70f57208b804bd90d51fdac84afe6472','<p>Java1234_小锋(QQ:527085608)，毕业于江苏师范大学计算机系；</p><p>有6年多的JAVA学习工作研究经验，Oracle认证Java程序员；</p><p>目前成立了自己的工作室，主要从事Java培训指导，以及Java开源研究，有好的私活的话，也会接几个玩玩；</p><p>同时运维主要站点 <a href=\"http://www.java1234.com/\" target=\"_blank\">http://www.java1234.com/</a>&nbsp;子站点 <a href=\"http://pan.java1234.com\" target=\"_blank\">http://pan.java1234.com</a>&nbsp;以及本站点 <a href=\"http://blog.java1234.com\" target=\"_blank\">http://blog.java1234.com</a><br/></p><p><br/></p><p><img src=\"http://img.baidu.com/hi/tsj/t_0009.gif\"/>&nbsp;本屌出身贫寒，从小学习努力，勤奋刻苦；</p><p><img src=\"http://img.baidu.com/hi/tsj/t_0013.gif\"/> &nbsp;功夫不负有心人，本屌27岁的时候，房子，车子，媳妇都有了，基本步入小康生活；</p><p><img src=\"http://img.baidu.com/hi/jx2/j_0003.gif\"/> &nbsp;座右铭&nbsp;“知识改变命运，技术改变世界” ；</p><p><br/></p><p><br/></p>','dong','知识改变命运，技术改变世界','20160910121704.jpg',2);
/*!40000 ALTER TABLE `t_blogger` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_blogtype`
--

DROP TABLE IF EXISTS `t_blogtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_blogtype` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `type_name` varchar(30) DEFAULT NULL,
  `order_no` int(11) DEFAULT NULL,
  `version` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_blogtype`
--

LOCK TABLES `t_blogtype` WRITE;
/*!40000 ALTER TABLE `t_blogtype` DISABLE KEYS */;
INSERT INTO `t_blogtype` VALUES (1,'Java核心基础',1,0),(2,'Mysql',2,0),(3,'Tomcat',3,0),(4,'IT之路',6,0),(5,'随心生活',7,0),(7,'shiro',4,0),(9,'webservice',5,0),(10,'jsoup',4,0),(11,'hibernate',5,0),(12,'maven',5,0),(13,'android',4,0),(14,'前端设计',8,1),(15,'Html5+css3',8,0),(16,'javascript',9,0),(17,'php',10,0);
/*!40000 ALTER TABLE `t_blogtype` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_category`
--

DROP TABLE IF EXISTS `t_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_category` (
  `id` bigint(20) NOT NULL,
  `version` int(11) DEFAULT NULL,
  `cate_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT '',
  `sort` int(11) NOT NULL,
  `type_ids` varchar(80) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_category`
--

LOCK TABLES `t_category` WRITE;
/*!40000 ALTER TABLE `t_category` DISABLE KEYS */;
INSERT INTO `t_category` VALUES (20,6,'Java',1,NULL),(22,1,'Android',2,NULL),(23,0,'PHP',3,NULL),(24,2,'HTML5',4,NULL),(28,1,'JavaScript',5,NULL);
/*!40000 ALTER TABLE `t_category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_comment`
--

DROP TABLE IF EXISTS `t_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_comment` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_ip` varchar(50) DEFAULT NULL,
  `blog_id` bigint(20) NOT NULL,
  `content` varchar(1000) DEFAULT NULL,
  `comment_date` datetime DEFAULT NULL,
  `state` int(11) DEFAULT NULL,
  `version` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `blogId` (`blog_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=340 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_comment`
--

LOCK TABLES `t_comment` WRITE;
/*!40000 ALTER TABLE `t_comment` DISABLE KEYS */;
INSERT INTO `t_comment` VALUES (17,'221.204.14.22',39,'屌炸天测试','2016-02-02 12:17:37',1,0),(18,'221.204.14.22',44,'评论测试','2016-02-02 15:56:03',1,0),(19,'120.52.18.47',40,'逗逼蜂，猜我是谁','2016-02-02 17:45:59',1,0),(20,'221.204.14.22',43,'评测再测','2016-02-02 17:54:05',1,0),(21,'221.204.14.21',45,'3222222224','2016-02-02 18:43:45',1,0),(22,'221.204.14.21',39,'峰哥你猜我是谁','2016-02-02 18:44:09',1,0),(24,'202.102.85.15',45,'dfdsfd','2016-02-02 19:09:32',1,0),(25,'202.102.85.15',45,'dfdsfd','2016-02-02 19:09:42',1,0),(26,'120.52.18.54',40,'沙发沙发','2016-02-02 19:12:48',1,0),(32,'125.88.189.20',45,'dsfadsfds','2016-02-02 19:33:16',1,0),(33,'120.52.18.45',39,'2332','2016-02-02 21:05:52',1,0),(34,'221.204.14.22',45,'alert(\'1\')','2016-02-02 21:22:44',1,0),(35,'221.204.14.22',45,'alert(\'1\')','2016-02-02 21:23:28',1,0),(36,'61.240.144.21',44,'赞赞赞！！！','2016-02-02 22:22:24',1,0),(37,'222.73.144.28',45,'真厉害!','2016-02-03 00:11:27',1,0),(38,'125.88.189.21',45,'溜脾','2016-02-03 08:06:46',1,0),(39,'125.88.189.21',45,'溜脾','2016-02-03 08:06:51',1,0),(40,'120.52.18.45',45,'alert(\"溜脾\");','2016-02-03 09:48:31',1,0),(41,'202.102.85.19',45,'12312312312','2016-02-03 10:06:40',1,0),(42,'202.102.85.19',45,'15615615615616156515','2016-02-03 10:06:58',1,0),(43,'125.88.189.12',39,'牛掰','2016-02-03 10:46:21',1,0),(44,'222.73.144.32',44,'应用','2016-02-03 11:04:18',1,0),(45,'202.102.85.15',45,'6666','2016-02-03 11:19:40',1,0),(46,'222.73.144.27',45,'楼主每天花在学习上的时间是多少 ？','2016-02-03 11:40:14',1,0),(47,'222.73.144.27',45,'尔','2016-02-03 11:41:23',1,0),(48,'222.73.144.27',45,'如同仁堂','2016-02-03 11:41:35',1,0),(49,'222.73.144.30',45,'这个站点不错，我喜欢这样的风格，很简洁','2016-02-03 13:33:34',1,0),(50,'125.88.189.19',41,'博主说得不错哦','2016-02-03 14:02:21',1,0),(51,'221.204.14.24',41,'赞','2016-02-03 15:50:30',1,0),(52,'221.204.14.24',40,'Σ( ° △ °|||)︴ ','2016-02-03 15:51:41',1,0),(53,'120.52.18.49',47,'不错啊','2016-02-03 17:24:14',1,0),(54,'120.52.18.49',39,'不错','2016-02-03 17:25:04',1,0),(59,'202.102.85.17',45,'hahaha','2016-02-03 20:38:33',1,0),(60,'183.136.133.29',39,'好牛逼啊','2016-02-03 20:46:56',1,0),(61,'221.204.14.22',47,'额外无污染','2016-02-03 21:42:34',1,0),(62,'221.204.14.27',44,'生活是一种态度！','2016-02-03 22:48:06',1,0),(63,'113.17.174.44',40,'相見恨晚','2016-02-04 00:55:43',1,0),(64,'113.17.174.47',41,'赞','2016-02-04 01:54:47',1,0),(65,'120.52.18.47',44,'赞','2016-02-04 09:14:42',1,0),(66,'120.52.18.47',44,'赞赞赞','2016-02-04 09:15:03',1,0),(67,'120.52.18.47',42,'赞赞赞','2016-02-04 09:15:28',1,0),(68,'222.73.144.27',39,'不是有主站吗，怎么专门开一个博客了','2016-02-04 09:51:13',1,0),(69,'120.52.18.49',47,'：）','2016-02-04 09:57:34',1,0),(70,'120.52.18.49',47,'耶？师傅我刚发表的文字咋不见了~~~','2016-02-04 10:11:55',1,0),(71,'221.204.14.23',47,'webservice 有的人一看到这个，估计会认为这个是一种新技术，一种新框架。\n\n其实不是，严格的说，webservice是一种跨平台，跨语言的规范，用于不同平台，不同语言开发的应用之间的交互。\n\n\n\n  这里具体举个例子，比如在Windows Server服务器上有个C#.Net开发的应用A，在Linux上有个Java语言开发的应用B，\n\nB应用要调用A应用，或者是互相调用。用于查看对方的业务数据。\n\n  再举个例子，天气预报接口。无数的应用需要获取天气预报信息；这些应用可能是各种平台，各种技术实现；而气象局的项目，估计也就一两种，要对外提供天气预报信息，这个时候，如何解决呢？\n\n\n\n  webservice就是出于以上类似需求而定义出来的规范；\n\n  \n\n  开发人员一般就是在具体平台开发webservice接口，以及调用webservice接口；每种开发语言都有自己的webservice实现框架。比如Java 就有 Apache Axis1、Apache Axis2、Codehaus XFire、Apache CXF、Apache Wink、Jboss  RESTEasyd等等...','2016-02-04 10:39:56',1,0),(72,'183.136.133.31',39,'大神就是这样玩的','2016-02-04 11:28:05',1,0),(73,'61.160.224.135',40,'来看看','2016-02-04 12:11:02',1,0),(74,'113.17.174.48',39,'好厉害','2016-02-04 14:37:24',1,0),(75,'113.17.174.48',39,'好厉害','2016-02-04 14:37:59',1,0),(76,'120.52.18.51',44,'这个评论不需要注册的么','2016-02-04 15:39:13',1,0),(77,'120.52.18.50',47,'天天天天天天','2016-02-04 16:00:32',1,0),(78,'120.52.18.50',47,'吞吞吐吐','2016-02-04 16:01:06',1,0),(79,'222.73.144.31',48,'123123','2016-02-04 19:36:19',1,0),(80,'222.73.144.31',48,'来说两句','2016-02-04 19:36:36',1,0),(81,'221.204.14.23',44,'让他有让他有额y','2016-02-04 21:05:52',1,0),(82,'221.204.14.23',48,'为','2016-02-05 11:12:45',1,0),(83,'221.204.14.23',44,'2楼SB','2016-02-05 11:14:03',1,0),(84,'221.204.14.28',48,'审核测试','2016-02-06 10:09:56',1,0),(85,'61.240.144.20',48,'峰哥威武 峰哥威武 峰哥威武','2016-02-06 17:37:41',1,0),(86,'202.102.85.19',48,'1564156145','2016-02-06 19:13:52',1,0),(87,'120.52.18.49',48,'峰哥，具体怎么搞啊？可以给你发邮件咱们私聊吗？','2016-02-06 21:59:48',1,0),(88,'120.52.18.49',45,'峰哥，我是你的VIP会员呢。嘿嘿。个人觉得，一个技术网站，一方面是资源多。另一个方面就是需要有原创。这点峰哥做的可以。还有这个站点不就是屌丝记事本的原型吗。','2016-02-06 22:03:15',1,0),(89,'221.204.14.25',44,'aa','2016-02-07 11:55:10',1,0),(90,'202.102.85.20',47,'不错不错','2016-02-08 07:47:01',1,0),(91,'202.102.85.20',47,'不错不错','2016-02-08 07:47:02',1,0),(92,'120.52.18.52',48,'峰哥威武霸气，猴年吉祥','2016-02-08 09:20:03',1,0),(93,'221.204.14.23',48,'四大','2016-02-08 22:05:52',1,0),(94,'221.204.14.24',49,'新的一年，祝愿峰哥猴年大吉。\n','2016-02-10 10:10:41',1,0),(95,'221.204.14.21',49,'为什么这个评论楼层是倒着啊？！！先评论的是1楼，再一个评论先评论的就成2楼了','2016-02-10 10:55:17',1,0),(96,'113.17.174.46',49,'13年去北大青鸟学习过。。最后工作却与开发无关。。空余时间较多想学习安卓开发，可以前学的java忘的差不多了','2016-02-10 15:18:12',1,0),(97,'202.102.85.19',41,'读起来挺有感觉的，希望自己能每天进步一点点！加油','2016-02-10 20:13:30',1,0),(98,'222.73.144.34',44,'test','2016-02-11 10:22:19',1,0),(99,'125.88.189.13',44,'dsad','2016-02-11 20:26:48',1,0),(100,'222.73.144.30',44,'test  叼扎天ip','2016-02-12 10:11:09',1,0),(101,'202.102.85.15',47,'good','2016-02-12 12:06:32',1,0),(102,'202.102.85.20',49,'<font color=red>新年快乐</font>','2016-02-12 16:55:57',1,0),(103,'183.136.133.29',41,'赞','2016-02-12 22:12:32',1,0),(104,'221.204.14.23',39,'赞','2016-02-13 19:18:04',1,0),(105,'61.160.224.139',48,'测试下','2016-02-13 20:55:16',1,0),(106,'61.160.224.139',48,'ad','2016-02-13 21:06:08',1,0),(107,'125.88.189.14',49,'看看','2016-02-14 10:14:26',1,0),(108,'120.52.18.54',49,'试试','2016-02-14 12:46:00',2,0),(109,'120.52.18.54',49,'试试','2016-02-14 12:46:22',1,0),(110,'222.73.144.28',48,'666','2016-02-14 16:11:15',1,0),(111,'221.204.14.20',50,'手动滑稽','2016-02-14 19:21:52',1,0),(112,'125.88.189.18',49,'fghjk','2016-02-14 19:56:22',1,0),(113,'202.102.85.15',44,'ee','2016-02-14 20:37:16',1,0),(114,'125.88.189.12',41,'解决了我的很多学习方法上的困惑，非常感谢！','2016-02-15 11:18:05',1,0),(115,'222.73.144.27',50,'用它在做爬虫','2016-02-15 14:45:23',1,0),(116,'222.73.144.27',50,'用它在做爬虫','2016-02-15 14:45:43',1,0),(117,'221.204.14.21',50,'fffff','2016-02-15 15:20:43',1,0),(118,'222.73.144.32',44,'楼主厉害，汗颜','2016-02-15 16:14:11',1,0),(119,'222.73.144.28',39,'谢谢锋哥！','2016-02-15 16:51:58',1,0),(120,'61.240.144.26',48,'好~~~~~~~~~~~~','2016-02-15 16:58:02',1,0),(121,'202.102.85.22',42,'asdf','2016-02-16 09:03:05',1,0),(122,'183.136.133.42',52,'配置完环境变量之后应该怎么验证是否配置成功了呢，因为我按照上面的步骤进行。提示：\'wsdl2java\' 不是内部或外部命令，也不是可运行的程序或批处理文件。怎么处理','2016-02-16 11:34:09',1,0),(123,'183.136.133.42',52,'本人菜鸟一枚，刚才我跟您发的信息，现在已经搞定！希望您在后续的文章里能否发表一篇文章是关于CXF WebService的应用场景，或者大多应该应用在哪，最好有例子说明。','2016-02-16 12:00:12',1,0),(124,'222.73.144.32',50,'12321312','2016-02-16 16:44:07',1,0),(125,'202.102.85.22',52,'peizhihuanjingbianliang','2016-02-16 20:27:25',2,0),(126,'202.102.85.22',52,'配置环境变量','2016-02-16 20:27:45',1,0),(127,'202.102.85.22',52,'<script>\nfor(;;){\nwhile(true){\nalert(\"haha);\n}}\n</script>','2016-02-16 20:28:45',2,0),(128,'202.102.85.17',45,'<script>alert(\"溜脾\");</script>','2016-02-17 11:23:04',2,0),(129,'183.136.133.28',43,'不错哦~','2016-02-17 14:08:37',1,0),(130,'221.204.14.27',39,'牛逼，问一下右上角搜索如何实现的？群主','2016-02-17 14:13:48',1,0),(131,'221.204.14.27',44,'知识改变命运，技术改变世界','2016-02-17 14:18:06',1,0),(132,'120.52.18.53',48,'峰哥威武 峰哥威武 峰哥威武 ','2016-02-17 14:23:39',1,0),(133,'221.204.14.27',49,'新年快乐','2016-02-17 14:32:23',1,0),(134,'120.52.18.53',45,'峰哥，什么时间有空了，讲讲jackrabbit','2016-02-17 14:35:23',1,0),(135,'120.52.18.50',44,'不明觉厉~','2016-02-17 14:50:30',1,0),(136,'120.52.18.50',48,'吾问无为谓','2016-02-17 15:28:56',1,0),(137,'222.73.144.33',47,'Good!','2016-02-17 15:53:52',1,0),(138,'221.204.14.23',40,'test','2016-02-17 17:30:47',2,0),(139,'221.204.14.23',40,'Test IP','2016-02-17 17:31:18',1,0),(140,'221.204.14.25',51,'rfff','2016-02-17 17:43:45',2,0),(141,'119.84.15.37',48,'哈哈哈哈，不错哟','2016-02-17 18:21:15',1,0),(142,'221.204.14.28',48,'评论测试','2016-02-17 19:58:10',1,0),(143,'221.204.14.23',50,'cnd加速什么鬼','2016-02-18 18:36:01',1,0),(144,'120.52.18.47',53,'<a href=\"www.java1234.com\">测试</a>','2016-02-18 20:00:07',2,0),(145,'120.52.18.54',53,'<a href=\"www.java1234.com\">test</a>','2016-02-18 20:01:01',2,0),(146,'221.204.14.23',47,'1212','2016-02-18 20:28:26',2,0),(147,'221.204.14.23',47,'1212','2016-02-18 20:28:35',2,0),(148,'202.102.85.20',53,'123213','2016-02-18 20:55:23',2,0),(149,'202.102.85.20',53,'123213','2016-02-18 20:55:27',2,0),(150,'202.102.85.20',53,'\n<script type=\"text/javascript\">\nalert(\'1\');\n</script>','2016-02-18 20:56:02',2,0),(151,'202.102.85.20',53,'\n<script type=\"text/javascript\">\nalert(\'1\');\n</script>','2016-02-18 20:56:03',2,0),(152,'202.102.85.20',53,'\n<script type=\"text/javascript\">\nalert(\'1\');\n</script>','2016-02-18 20:56:16',2,0),(153,'120.52.18.49',39,'牛逼啊','2016-02-18 21:55:24',2,0),(154,'120.52.18.49',39,'牛逼啊','2016-02-18 21:55:32',2,0),(155,'120.52.18.49',39,'牛逼啊','2016-02-18 21:55:33',2,0),(156,'120.52.18.49',39,'牛逼啊','2016-02-18 21:55:35',1,0),(157,'120.52.18.49',39,'牛逼啊','2016-02-18 21:55:35',2,0),(158,'120.52.18.49',39,'狠人','2016-02-18 21:55:48',1,0),(159,'221.204.14.27',53,'锋哥赞一个','2016-02-18 22:34:03',1,0),(160,'120.52.18.50',53,'12','2016-02-19 12:54:52',1,0),(161,'222.73.144.34',49,'可以','2016-02-20 19:52:09',1,0),(162,'183.136.133.31',45,'http://blog.java1234.com/index.html?page=0&typeId=7&\n//////\n\n### Error querying database.  Cause: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'-10,10\' at line 5\n### The error may exist in file [C:\\apache-tomcat-7.0.63\\webapps\\Blog\\WEB-INF\\classes\\com\\java1234\\mappers\\BlogMapper.xml]\n### The error may involve com.java1234.dao.BlogDao.list-Inline\n### The error occurred while setting parameters\n### SQL: select * from t_blog    WHERE  typeId = ?    order by releaseDate desc        limit ?,?','2016-02-20 23:09:32',1,0),(163,'120.52.18.45',44,'我靠','2016-02-21 10:23:03',1,0),(164,'222.73.144.34',55,'赞','2016-02-21 17:17:16',1,0),(165,'222.73.144.32',55,'666，咋不买威朗','2016-02-21 17:52:48',1,0),(166,'125.88.189.16',55,'豪！','2016-02-21 18:41:39',1,0),(167,'202.102.85.21',55,' 土豪','2016-02-21 19:34:50',1,0),(168,'202.102.85.17',55,'打土豪，分田地','2016-02-21 20:55:04',1,0),(169,'221.204.14.28',42,'66666','2016-02-21 21:32:27',1,0),(170,'221.204.14.28',42,'66666','2016-02-21 21:32:42',1,0),(171,'120.52.18.52',48,'还行','2016-02-22 08:48:17',1,0),(172,'120.52.18.48',55,'你多少岁呀 土豪','2016-02-22 09:49:04',1,0),(173,'183.136.133.28',55,'锋哥是土豪','2016-02-22 10:16:56',1,0),(174,'221.204.14.22',52,'啊哩咕噜囧有害，峰哥页面加载有点慢啊','2016-02-22 11:05:54',1,0),(175,'222.73.144.30',42,'博客写的很好','2016-02-22 13:17:41',2,0),(176,'222.73.144.30',42,'博客写的很好','2016-02-22 13:17:44',2,0),(177,'222.73.144.30',42,'博客写的很好','2016-02-22 13:17:45',2,0),(178,'222.73.144.30',42,'博客写的很好','2016-02-22 13:17:45',2,0),(179,'222.73.144.30',42,'博客写的很好','2016-02-22 13:17:46',1,0),(180,'222.73.144.30',42,'博客写的很好','2016-02-22 13:17:46',2,0),(181,'222.73.144.30',42,'博客写的很好','2016-02-22 13:17:46',2,0),(182,'202.102.85.20',55,'车咋样啊？','2016-02-22 14:29:40',1,0),(183,'61.160.224.137',55,'可以','2016-02-22 14:45:34',1,0),(184,'183.136.133.29',55,'土豪，好厉害~','2016-02-22 15:48:50',1,0),(185,'120.52.18.48',55,'我就来看看评论','2016-02-22 16:05:42',1,0),(186,'120.52.18.48',55,'我就来看看评论','2016-02-22 16:05:59',1,0),(187,'119.84.15.36',55,'峰哥土豪','2016-02-22 16:49:55',1,0),(188,'221.204.14.24',55,'打土豪，分媳妇。。。哦不，分田地！','2016-02-22 17:14:58',1,0),(189,'58.217.139.169',39,'好棒啊，技术玩的不错','2016-02-23 00:24:18',2,0),(190,'58.217.139.169',39,'好棒啊，技术玩的不错','2016-02-23 00:24:36',1,0),(191,'221.204.14.25',55,'峰总好棒！！','2016-02-23 01:40:06',1,0),(192,'222.73.144.34',55,'南通的土豪！','2016-02-23 09:46:51',1,0),(193,'113.17.174.50',55,'峰哥牛B！支持峰哥^ ^','2016-02-23 11:42:01',1,0),(194,'222.73.144.31',55,'来看评论的','2016-02-23 13:36:38',1,0),(195,'120.52.18.49',40,'撒旦','2016-02-23 13:54:42',1,0),(196,'221.204.14.20',41,'阿萨德','2016-02-23 16:38:59',1,0),(197,'125.88.189.12',55,'向峰哥看齐','2016-02-23 16:41:01',1,0),(198,'125.88.189.12',55,'向峰哥看齐','2016-02-23 16:41:11',2,0),(199,'125.88.189.13',55,'<script>alert(\"xxs test\")!</script>','2016-02-23 17:36:43',2,0),(200,'120.52.18.49',55,'旁边的是别墅啊！','2016-02-23 17:37:24',1,0),(201,'113.17.174.49',45,'<script>alert(1)</script>','2016-02-23 21:18:45',2,0),(202,'120.52.18.53',48,'小锋老师，想问一下关于百度云资源搜索的问题：您的后台是调用谷歌的API来获取数据集的么？或者是别的方法？','2016-02-23 22:23:23',1,0),(203,'202.102.85.22',44,'是啊','2016-02-24 14:53:32',1,0),(204,'61.240.144.32',55,'威武霸气','2016-02-24 15:17:44',1,0),(205,'202.102.85.15',59,'建议搞个视频！','2016-02-24 21:16:17',1,0),(206,'120.52.18.50',57,'1111111','2016-02-25 09:31:31',1,0),(207,'113.17.174.45',55,'壕','2016-02-25 09:48:14',1,0),(208,'120.52.18.50',55,'打酱油','2016-02-25 10:03:05',1,0),(209,'222.73.144.30',59,'已经购买域名，如何选择主机发布到互联网','2016-02-25 11:12:37',1,0),(210,'202.102.85.20',55,'峰哥好棒~','2016-02-25 19:43:03',1,0),(211,'222.73.144.32',49,'dafasfasfa','2016-02-25 20:32:05',1,0),(212,'202.102.85.16',58,'好','2016-02-25 21:04:20',1,0),(213,'202.102.85.20',55,'老司机~','2016-02-25 21:41:33',1,0),(214,'202.102.85.20',40,'留，如果能加入多说评论就好了，','2016-02-25 21:52:01',1,0),(215,'61.240.144.21',60,'你好，博客系统的源码是什么编码格式的？我引入到工作目录中文注释乱码了...','2016-02-25 22:47:27',1,0),(216,'125.88.189.18',49,'试一下这个评论有没有分页，而且没有回复功能','2016-02-26 09:02:19',1,0),(217,'183.136.133.28',59,'太棒了~ 正需要这个东西，最好能搞个简单视频！','2016-02-26 11:32:00',1,0),(218,'202.102.85.22',59,'可以啊！','2016-02-26 13:07:07',1,0),(219,'202.102.85.22',55,'哇，要变成老司机啊！','2016-02-26 13:36:06',1,0),(220,'202.102.85.22',49,'哈哈，峰哥，阿里云服务是怎么收费的呀？\n','2016-02-26 13:38:09',1,0),(221,'202.102.85.22',49,'对了，峰哥，你的这个验证码不好看，建议你去看看google搞的Kaptcha；','2016-02-26 13:39:01',1,0),(222,'120.52.18.48',60,'支持下!','2016-02-26 15:42:52',1,0),(223,'120.52.18.48',45,'.......','2016-02-26 15:48:03',1,0),(224,'113.17.174.41',58,'真的好','2016-02-26 16:02:35',1,0),(225,'221.204.14.28',60,'6666','2016-02-26 16:12:00',1,0),(226,'119.84.15.42',59,'改80端口，如果是国内空间的话要备案吧','2016-02-26 21:29:35',1,0),(227,'120.52.18.50',60,'锋哥','2016-02-27 00:09:40',1,0),(228,'120.52.18.45',41,'锋哥','2016-02-27 00:12:54',1,0),(229,'125.88.189.17',60,'scccccccccccc','2016-02-28 15:18:02',1,0),(230,'125.88.189.18',55,'峰哥混的不错啊  带带我啊','2016-02-29 10:27:44',1,0),(231,'222.73.144.32',48,'666666666666666666666','2016-02-29 11:49:55',1,0),(232,'125.88.189.18',43,'不错哟啊 ','2016-02-29 12:03:24',1,0),(233,'125.88.189.18',54,'webservcice 不知道有什么用','2016-02-29 12:16:11',1,0),(234,'222.73.144.27',59,'nice','2016-02-29 13:39:41',1,0),(235,'120.52.18.48',59,'锋哥，建议你把这个弄一期专门的视频吧，很多人都需要这个的==','2016-02-29 15:33:09',1,0),(236,'202.102.85.21',63,'牛掰牛逼，比峰哥做的还nb','2016-02-29 20:53:05',1,0),(237,'202.102.85.20',63,'牛掰牛逼','2016-02-29 22:18:23',1,0),(238,'222.73.144.30',63,'博主这个问题怎么解决啊 ：\n no segments* file found in MMapDirectory@E:\\lucene lockFactory=org.apache.lucene.store.NativeFSLockFactory@2f628329: files: [BlogIndex.class, BlogIndex.java]\n\n','2016-03-01 00:14:17',1,0),(239,'202.102.85.19',63,'赞一个','2016-03-01 00:37:05',1,0),(240,'61.160.224.138',48,'首先，什么叫做采集百度云分享达人的帐号？再次，什么叫采集他们的分享资源？','2016-03-01 09:33:19',1,0),(241,'120.52.18.48',63,'服务器跟数据库在哪买的，能说下吗','2016-03-01 10:31:49',1,0),(242,'120.52.18.49',63,'博主要厉害','2016-03-01 15:01:22',1,0),(243,'202.102.85.19',59,'如何选择主机发布到互联网 ','2016-03-01 17:44:18',1,0),(244,'222.73.144.32',55,'可以啊','2016-03-01 20:17:02',1,0),(245,'222.73.144.32',55,'可以啊','2016-03-01 20:17:12',1,0),(246,'61.240.144.22',63,'锋哥，博客视频教程别断更啊...','2016-03-01 20:58:49',1,0),(247,'113.17.174.50',63,'真是大神','2016-03-01 23:36:36',1,0),(248,'221.204.14.27',64,'确实是这样，同样的项目，其他人卖的很贵，而且没人指导，峰哥的视频，质量很高，而且会随时指导，对学习有很大的帮助，我也是在峰哥的指导下找到工作了，今年6月就毕业了，是一起同学工资的几乎双倍！','2016-03-02 14:11:01',1,0),(249,'120.52.18.47',64,'  有信仰，峰哥，好样的','2016-03-02 14:48:22',1,0),(250,'183.136.133.31',63,'你的这个徒弟今天毕业？想在哪里找工作？我现在北京一家软件公司（中软），如果有意向可以让他联系我，QQ：284441807','2016-03-02 17:34:40',1,0),(251,'202.102.85.19',64,'说真的，后悔去培训机构交那么多钱，没峰哥教的好，教的多，真的是早点遇到峰哥就好了','2016-03-02 19:36:09',1,0),(252,'221.204.14.19',64,'我就想知道how much','2016-03-02 20:18:10',1,0),(253,'61.240.144.22',64,'支持锋哥，什么时候教下移动端的开发','2016-03-02 22:45:09',1,0),(254,'222.73.144.31',41,'峰哥，很赞','2016-03-03 07:38:14',1,0),(255,'222.73.144.32',64,'傻逼一个','2016-03-03 11:47:03',2,0),(256,'119.84.15.44',50,'测试','2016-03-03 14:02:47',1,0),(257,'113.17.174.46',58,'这是配置虚拟路径吗？','2016-03-03 14:06:01',1,0),(258,'113.17.174.46',58,'这是配置虚拟路径吗？','2016-03-03 14:06:13',1,0),(259,'221.204.14.28',65,'峰哥速度更新谷歌搜索啊','2016-03-03 16:20:42',1,0),(260,'222.73.144.30',39,'wa o','2016-03-03 17:49:42',1,0),(261,'61.160.224.136',66,'求收徒。','2016-03-03 17:53:33',1,0),(262,'221.204.14.21',66,'屌！','2016-03-03 18:34:39',1,0),(263,'222.73.144.28',62,'111','2016-03-03 20:42:46',1,0),(264,'202.102.85.22',66,'nbnx牛掰牛叉牛掰','2016-03-03 21:00:49',1,0),(265,'120.52.18.52',66,'屌的不行不行的','2016-03-04 09:20:54',1,0),(266,'221.204.14.25',65,'峰哥速度更新谷歌搜索啊   ','2016-03-04 14:48:52',1,0),(267,'61.240.144.32',43,'ddd','2016-03-04 14:52:13',1,0),(268,'221.204.14.20',66,'求拿下','2016-03-04 16:43:28',1,0),(269,'183.136.133.30',66,'666','2016-03-04 17:02:57',1,0),(270,'183.136.133.30',67,'我想说我也是看了峰哥的视频才找的工作吗，现在在福建福州福富软件公司实习，已经签了协议，4000+的工资，就搞了一个那个日记本的源码搞熟了，我说是我做的，然后面试的时候问我怎么实现的，我全部说完，那个经理就来了一句很不错啊就被录取了','2016-03-04 17:08:35',1,0),(271,'222.73.144.34',67,'66666','2016-03-05 00:51:31',1,0),(272,'222.73.144.34',63,'66666','2016-03-05 00:52:16',1,0),(273,'125.88.189.21',63,'都不能发文章\nhttps://hacpai.com/article/1456470367361','2016-03-05 09:31:01',2,0),(274,'113.17.174.47',67,'一直在学','2016-03-05 20:41:09',1,0),(275,'113.17.174.47',67,'一直在学','2016-03-05 20:41:12',1,0),(276,'202.102.85.17',67,'锋哥的教学视频很真诚','2016-03-06 20:47:51',1,0),(277,'120.52.18.45',66,'不错啊','2016-03-06 22:45:21',1,0),(278,'113.17.174.50',58,'为什么myeclipse打开下面，左边的代码是src/main/java这样子的路径（正文第一张图），是不是哪里配置问题？','2016-03-07 10:57:09',1,0),(279,'183.136.133.41',67,'5楼的兄弟，你是哪个部门的 我也在福富 不过我今天是第一次知道这个 我朋友推荐我看的 原来都是做大数据 现在学学前端','2016-03-08 09:34:37',1,0),(280,'222.73.144.32',65,'6666666','2016-03-08 11:11:24',1,0),(281,'183.136.133.41',66,'厉害','2016-03-08 14:41:26',1,0),(282,'183.136.133.41',64,'我也是看您的视频的，我也是vip，2年前买的。','2016-03-08 14:43:05',1,0),(283,'120.52.18.51',57,'ddd','2016-03-08 20:22:42',1,0),(284,'120.52.18.51',67,'矿大的路过。。。','2016-03-08 22:03:45',1,0),(285,'120.52.18.49',39,'谁谁谁','2016-03-09 09:58:58',1,0),(286,'202.102.85.19',67,'我现在在学习做','2016-03-09 11:42:00',1,0),(287,'202.102.85.18',63,'6666666666','2016-03-09 17:10:57',1,0),(288,'61.240.144.23',66,'求一师傅带带  有基础 但是现在找不到方向。。。求带进门','2016-03-09 20:36:10',1,0),(289,'183.136.133.30',67,'EDA，原来还有同事呀，，，3楼','2016-03-10 14:35:47',1,0),(290,'120.52.18.49',67,'sss','2016-03-10 17:44:02',1,0),(291,'202.102.85.17',68,'沙发，这几天我也面试了','2016-03-10 18:03:13',1,0),(292,'221.204.14.27',68,'1111','2016-03-11 13:06:16',1,0),(293,'222.73.144.28',68,'沙发','2016-03-11 15:43:26',1,0),(294,'120.52.18.49',68,'才开始学习。。','2016-03-11 17:14:09',1,0),(295,'222.73.144.31',68,'评论系统甚是简陋呀,至少应该能写个用户名之类的吧','2016-03-12 11:12:24',1,0),(296,'222.73.144.31',68,'这个是伪静态的页面把 ','2016-03-12 11:14:42',1,0),(297,'113.17.174.49',52,'=w=','2016-03-12 15:45:47',1,0),(299,'222.73.144.32',61,'为毛我的打包的就报错了呢','2016-03-12 23:14:01',1,0),(300,'222.73.144.32',61,'为毛我的打包的就报错了呢','2016-03-12 23:14:14',1,0),(301,'120.52.18.48',60,'挺好的呢!!','2016-03-12 23:28:20',1,0),(303,'222.73.144.30',60,'11','2016-03-13 19:07:09',1,0),(304,'120.52.18.47',48,'逗比 蜂','2016-03-13 21:20:09',1,0),(305,'120.52.18.48',60,'123321','2016-03-13 23:01:09',1,0),(306,'113.17.174.41',41,'博主不错','2016-03-14 09:45:12',1,0),(307,'221.204.14.20',59,'枯干在二','2016-03-14 14:41:02',1,0),(308,'221.204.14.20',59,'dfsfg','2016-03-14 14:41:19',1,0),(310,'120.52.18.49',69,'买了视频，不错的巩固基础','2016-03-15 21:49:16',1,0),(312,'61.240.144.25',65,'最近有个项目一直报这个错，可以试下','2016-03-15 23:28:24',1,0),(315,'202.102.85.21',68,'alert(\"加油！\");','2016-03-16 09:43:04',2,0),(318,'221.204.14.24',55,'有本事换A7啊','2016-03-16 13:09:14',2,0),(319,'221.204.14.24',55,'这个 家伙十有八九是骗钱的 不相信他','2016-03-16 13:09:40',2,0),(320,'221.204.14.22',48,'我也要业余琢磨琢磨了   锋哥霸气侧漏','2016-03-16 19:28:04',2,0),(321,'221.204.14.22',48,'我也要业余琢磨琢磨了   锋哥霸气侧漏','2016-03-16 19:28:12',1,0),(322,'221.204.14.24',70,'不错的','2016-03-17 10:08:58',1,0),(323,'113.17.174.45',68,'34234','2016-03-17 19:55:08',2,0),(325,'202.102.85.16',70,'随便逛逛','2016-03-18 00:48:11',1,0),(326,'222.73.144.33',44,'louzhutailihaile...','2016-03-18 09:02:10',1,0),(327,'222.73.144.33',44,'louzhutailihaile...','2016-03-18 09:02:20',2,0),(328,'222.73.144.33',44,'louzhutailihaile...','2016-03-18 09:02:28',2,0),(330,'222.73.144.33',62,'测试','2016-03-21 09:45:52',1,0),(331,'125.88.189.19',71,'挺好的','2016-03-21 10:11:30',1,0),(332,'125.88.189.19',71,'顶','2016-03-21 19:08:14',1,0),(333,'222.73.144.32',71,'fadfa','2016-03-22 12:54:59',1,0),(334,'120.52.18.45',43,'学习了，哈哈','2016-03-22 15:22:47',1,0),(335,'202.102.85.17',68,'虚心学习','2016-03-22 18:31:59',0,0),(336,'127.0.0.1',75,'good','2016-04-08 17:01:10',1,0),(337,'127.0.0.1',37,'很好，很不错','2016-09-17 16:27:56',1,1),(338,'127.0.0.1',37,'很有用，学习了！','2016-09-17 16:30:08',1,1),(339,'127.0.0.1',37,'哦~ 原来是这样','2016-09-18 15:02:15',1,1);
/*!40000 ALTER TABLE `t_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_link`
--

DROP TABLE IF EXISTS `t_link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_link` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `link_name` varchar(100) DEFAULT NULL,
  `link_url` varchar(200) DEFAULT NULL,
  `order_no` int(11) DEFAULT NULL,
  `version` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_link`
--

LOCK TABLES `t_link` WRITE;
/*!40000 ALTER TABLE `t_link` DISABLE KEYS */;
INSERT INTO `t_link` VALUES (1,'Java知识分享网','http://www.java1234.com/',1,0),(2,'百度云搜索引擎','http://pan.java1234.com/',2,0),(3,'小图标下载','http://www.easyicon.net/',3,0),(4,'Java贴吧','http://tieba.baidu.com/f?kw=java',4,0),(5,'免费logo在线制作','http://www.uugai.com/',5,0),(6,'java学习路线图','http://www.java1234.com/javaxuexiluxiantu.html',6,0),(7,'码农网','http://www.codeceo.com/',7,0),(12,'百度','http://www.baidu.com',8,0),(13,'highcharts','http://www.highcharts.com/',9,0),(14,'老D博客','https://laod.org/',10,0),(15,'json格式化','http://www.bejson.com/',11,0);
/*!40000 ALTER TABLE `t_link` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-10-15 16:23:12
